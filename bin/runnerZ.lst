???????? SRCFILE                    ???????? x                          
???????? y                          0000500D _ZERO                      
00005029 _MAIN                      0000500F _ONES                      
00005020 _TITLE                     00000007 C_WHT                      
00005014 CLRSCR                     0000033E _screen                    
0000501A FILLZERO                   0000501B MEMSET                     
000002F0 STACK                      0000502C _MAIN0                     
0000503F _MAIN4                     00000104 _rand                      
0000630E _pal1_vector               00000100 ISRVEC                     
0000505A _MAIN1                     00000103 _ntsc                      
00005061 _MAIN2                     0000506F _MAIN3                     
000062FA _wait                      0000640A _init_music                
00000109 _mode_select               0000030B Q6                         
00000121 Q3                         0000010C V1                         
000050AE T1                         000063DD _next_random               
00006709 qs_mpy8                    00000124 Q4                         
0000011E Q5                         00000118 V2                         
00000309 V3                         00000116 V4                         
00000119 V5                         00000117 V6                         
00000112 V7                         0000010D V8                         
0000010E V9                         0000010F V10                        
00000110 V11                        00000308 V12                        
0000011B V13                        00000113 V14                        
0000030A V15                        00000111 V16                        
00000115 V17                        00000114 V18                        
0000011D V19                        0000011C V20                        
00000105 _gram_target               00000106 _gram_total                
0000611A Q8                         0000033C _gram_bitmap               
0000615A Q9                         0000619A Q10                        
000061DA Q11                        000060E2 Q12                        
000060F6 Q13                        000060FE Q14                        
0000610E Q15                        00006112 Q16                        
00006116 Q17                        0000610A Q18                        
000051BA Q19                        000051C2 T2                         
000051E6 Q20                        000051CB T3                         
00005383 Q21                        000051D4 T4                         
000053D1 Q22                        000051DD T5                         
000055D6 Q23                        0000033F _color                     
0000533B T6                         0000533B T7                         
00005335 T9                         0000532E T8                         
00000340 _mobs                      00005363 T10                        
00005370 T11                        00005382 T12                        
00005B57 Q25                        000061DE Q27                        
000062E8 CPYBLK                     00005E52 Q28                        
000057AD Q29                        0000580F Q30                        
000058BE Q31                        000053AB T13                        
00005FB5 Q32                        00005FF6 Q33                        
000053B9 T14                        000053CD T15                        
000054E4 T17                        00005527 T16                        
00005527 T18                        00005521 T20                        
0000551A T19                        0000554F T21                        
0000555C T22                        00005574 T23                        
00005581 T24                        000055C9 T25                        
000055D5 T26                        000060B6 Q35                        
000056CB T28                        0000570E T27                        
0000570E T29                        00005708 T31                        
00005701 T30                        00005736 T32                        
00005743 T33                        0000575B T34                        
00005768 T35                        000057A1 T36                        
000057AC T37                        000057BF T38                        
000057B7 T39                        00005CFD Q38                        
00005DC7 Q39                        00005E37 Q40                        
00005813 T40                        0000581F T42                        
0000581B T43                        00005839 T41                        
00005839 T44                        00005D63 Q42                        
00005855 T45                        0000588A T46                        
00000340 Q1                         000058B4 T47                        
000058C6 T49                        000058D9 T48                        
000058E0 T51                        000058F3 T50                        
000058FA T53                        00005916 T52                        
00005924 T55                        00005936 T54                        
00005938 T56                        0000594C T58                        
00005948 T59                        0000596F T57                        
0000597B T61                        00005977 T62                        
0000599A T60                        000059A6 T64                        
000059A2 T65                        000059C0 T63                        
00006074 Q44                        000059CC T67                        
000059C8 T68                        000059E6 T66                        
0000600A Q45                        000059F2 T70                        
000059EE T71                        00005A44 T69                        
00005A44 T72                        00005A3E T74                        
00005A37 T73                        00005A50 T75                        
00005A6B T76                        00005A5C T77                        
00005A67 T78                        00005A8C T79                        
00005A98 T81                        00005A94 T82                        
00005B4D T80                        00005AE5 T83                        
0000603F Q46                        00005AF4 T84                        
00005B10 T85                        00005B24 T86                        
0000011A V21                        00005BFE Q47                        
00005B36 T87                        00005B4D T88                        
00005B61 T89                        00005B63 T91                        
00005BA6 T90                        00005BA6 T92                        
00005BA0 T94                        00005B99 T93                        
00005BC0 T95                        00005BD9 T96                        
00005C13 T97                        00005C15 T99                        
00005C58 T98                        00005C58 T100                       
00005C52 T102                       00005C4B T101                       
00005C90 T103                       00005CB8 T104                       
00005CE0 T105                       00005D07 T106                       
00005D13 T107                       00005D19 T108                       
00005D34 T109                       00005D3A T110                       
00005D53 T111                       00000127 Q7                         
00005D77 T112                       00005DAD T113                       
00005D84 T114                       00005D91 T115                       
00005D9E T116                       00005DC6 T117                       
00005DCA T119                       00005DD9 T118                       
00005DEE T120                       00005DFC T121                       
00005E08 T122                       00005E0E T123                       
00005E27 T124                       00005E42 T125                       
00005E79 T126                       00005FB4 T127                       
00005E9F T128                       00005EC5 T129                       
00005EEB T130                       00005F11 T131                       
00005F37 T132                       00005F5D T133                       
00005F83 T134                       00005FA9 T135                       
00000001 intybasic_fastmult         000062CE stuck                      
000062D0 CPYBLK2                    000062D8 CPYBLK2.1                  
000062DA CPYBLK2.2                  000062EB CPYBLK.1                   
000062EC CPYBLK.2                   ???????? intybasic_keypad           
???????? _cnt1_p0                   ???????? _wait.2                    
???????? _cnt1_p1                   00006302 _keypad_table              
???????? _wait.4                    ???????? _cnt1_key                  
???????? _cnt2_p0                   ???????? _wait.5                    
???????? _cnt2_p1                   ???????? _wait.7                    
???????? _cnt2_key                  00000102 _int                       
000062FD _wait.1                    0000631A _pal2_vector               
0000632E _int_vector                00006329 _pal2_vector.1             
???????? intybasic_stack            ???????? _int_vector.vs             
???????? _int_vector.vs1            ???????? _int_vector.vs2            
00006358 _int_vector.vi0            00006342 _int_vector.vi14           
00006352 _int_vector.vi15           0000010A _border_color              
0000010B _border_mask               00000358 _col0                      
???????? intybasic_scroll           ???????? _scroll_x                  
???????? _scroll_y                  00006385 _int_vector.vi2            
???????? intybasic_music            ???????? _int_vector.vo97           
???????? _music_frame               ???????? _int_vector.vo14           
???????? _int_vector.vo15           ???????? _emit_sound                
000063B1 _int_vector.vi1            0000639C _int_vector.vi3            
0000033D _gram2_bitmap              000063D4 _int_vector.vii1           
00000107 _gram2_target              00000108 _gram2_total               
000063BF _int_vector.vii3           ???????? _scroll_d                  
???????? _int_vector.vi4            ???????? _int_vector.vi5            
???????? _int_vector.vi6            ???????? _int_vector.vi7            
???????? _int_vector.vi8            ???????? _int_vector.vi12           
???????? _int_vector.vi11           00000323 _scroll_buffer             
???????? _int_vector.vi10           ???????? _int_vector.vi13           
???????? _int_vector.vi9            ???????? intybasic_voice            
???????? IV_ISR                     ???????? _int_vector.vo98           
???????? _int_vector.vo16           ???????? _generate_music            
0000033A _frame                     ???????? ntsc_note_table            
???????? pal_note_table             ???????? _init_music.0              
00000337 _music_table               ???????? _music_mix                 
???????? _play_music                ???????? @@1                        
00000338 _music_start               00000339 _music_p                   
???????? _music_t                   ???????? _music_tc                  
???????? _music_vol1                ???????? _music_vol2                
???????? _music_vol3                ???????? @@6                        
???????? @@15                       ???????? @@000                      
???????? @@001                      ???????? @@00                       
???????? @@0                        ???????? _music_n1                  
???????? _music_s1                  ???????? _music_i1                  
???????? @@2                        ???????? _music_n2                  
???????? _music_s2                  ???????? _music_i2                  
???????? @@3                        ???????? _music_n3                  
???????? _music_s3                  ???????? _music_i3                  
???????? _music_n4                  ???????? _music_s4                  
???????? @@7                        ???????? _note2freq                 
???????? _music_freq10              ???????? _music_freq11              
???????? @@20                       ???????? @@8                        
???????? _music_freq20              ???????? _music_freq21              
???????? @@21                       ???????? @@9                        
???????? _music_freq30              ???????? _music_freq31              
???????? @@22                       ???????? @@4                        
???????? @@5                        ???????? @@12                       
???????? @@10                       ???????? _music_noise               
???????? _activate_drum             ???????? @@11                       
???????? _piano_instrument          ???????? _clarinet_instrument       
???????? _flute_instrument          ???????? _bass_instrument           
???????? _bass_volume               ???????? intybasic_music_volume     
???????? _global_volume             ???????? _piano_volume              
???????? _clarinet_vibrato          ???????? _clarinet_volume           
???????? _flute_vibrato             ???????? _flute_volume              
???????? _music_vol                 ???????? @@table                    
???????? _music_mode                ???????? intybasic_numbers          
???????? _PW10                      ???????? PRNUM16                    
???????? @@l                        ???????? @@l1                       
???????? @@z2                       ???????? @@b                        
???????? @@b1                       ???????? @@z                        
???????? @@z1                       ???????? @@lblnk                    
???????? @@llp                      ???????? @@ldone                    
???????? @@digit                    ???????? @@dig1                     
???????? @@done                     ???????? @@nxdig                    
???????? @@cont                     ???????? @@spcl                     
???????? @@div                      ???????? _AA                        
???????? _AA.end                    ???????? _AE1                       
???????? _AE1.end                   ???????? _AO                        
???????? _AO.end                    ???????? _AR                        
???????? _AR.end                    ???????? _AW                        
???????? _AW.end                    ???????? _AX                        
???????? _AX.end                    ???????? _AY                        
???????? _AY.end                    ???????? _BB1                       
???????? _BB1.end                   ???????? _BB2                       
???????? _BB2.end                   ???????? _CH                        
???????? _CH.end                    ???????? _DD1                       
???????? _DD1.end                   ???????? _DD2                       
???????? _DD2.end                   ???????? _DH1                       
???????? _DH1.end                   ???????? _DH2                       
???????? _DH2.end                   ???????? _EH                        
???????? _EH.end                    ???????? _EL                        
???????? _EL.end                    ???????? _ER1                       
???????? _ER1.end                   ???????? _ER2                       
???????? _ER2.end                   ???????? _EY                        
???????? _EY.end                    ???????? _FF                        
???????? _FF.end                    ???????? _GG1                       
???????? _GG1.end                   ???????? _GG2                       
???????? _GG2.end                   ???????? _GG3                       
???????? _GG3.end                   ???????? _HH1                       
???????? _HH1.end                   ???????? _HH2                       
???????? _HH2.end                   ???????? _IH                        
???????? _IH.end                    ???????? _IY                        
???????? _IY.end                    ???????? _JH                        
???????? _JH.end                    ???????? _KK1                       
???????? _KK1.end                   ???????? _KK2                       
???????? _KK2.end                   ???????? _KK3                       
???????? _KK3.end                   ???????? _LL                        
???????? _LL.end                    ???????? _MM                        
???????? _MM.end                    ???????? _NG1                       
???????? _NG1.end                   ???????? _NN1                       
???????? _NN1.end                   ???????? _NN2                       
???????? _NN2.end                   ???????? _OR2                       
???????? _OR2.end                   ???????? _OW                        
???????? _OW.end                    ???????? _OY                        
???????? _OY.end                    ???????? _PA1                       
???????? _PA1.end                   ???????? _PA2                       
???????? _PA2.end                   ???????? _PA3                       
???????? _PA3.end                   ???????? _PA4                       
???????? _PA4.end                   ???????? _PA5                       
???????? _PA5.end                   ???????? _PP                        
???????? _PP.end                    ???????? _RR1                       
???????? _RR1.end                   ???????? _RR2                       
???????? _RR2.end                   ???????? _SH                        
???????? _SH.end                    ???????? _SS                        
???????? _SS.end                    ???????? _TH                        
???????? _TH.end                    ???????? _TT1                       
???????? _TT1.end                   ???????? _TT2                       
???????? _TT2.end                   ???????? _UH                        
???????? _UH.end                    ???????? _UW1                       
???????? _UW1.end                   ???????? _UW2                       
???????? _UW2.end                   ???????? _VV                        
???????? _VV.end                    ???????? _WH                        
???????? _WH.end                    ???????? _WW                        
???????? _WW.end                    ???????? _XR2                       
???????? _XR2.end                   ???????? _YR                        
???????? _YR.end                    ???????? _YY1                       
???????? _YY1.end                   ???????? _YY2                       
???????? _YY2.end                   ???????? _ZH                        
???????? _ZH.end                    ???????? _ZZ                        
???????? _ZZ.end                    ???????? IV_INIT                    
???????? @@no_ivoice                ???????? IV.FPTR                    
???????? IV.PPTR                    ???????? IV.QH                      
???????? IV.QT                      ???????? @@ok                       
???????? @@ald_busy                 ???????? @@leave                    
???????? @@no_fifodata              ???????? @@fifo_fill                
???????? @@fifo_busy                ???????? IV.FLEN                    
???????? @@last_fifo                ???????? @@no_fifo_ald              
???????? @@next_phrase              ???????? @@process_phrase           
???????? IV.Q                       ???????? @@play_resrom_r4           
???????? @@new_phrase               ???????? @@play_fifo                
???????? @@play_resrom_r0           ???????? @@new_fifo_ok              
???????? @@qtok                     ???????? IV_PLAY                    
???????? IV_PLAYW                   ???????? IV_PLAY.leave              
???????? IV_PLAY.2                  ???????? IV_WAIT                    
???????? @@q_loop                   ???????? @@s_loop                   
???????? IV_SAYNUM16                ???????? @@zero                     
???????? @@thloop                   ???????? @@no_thousand              
???????? IV_SAYNUM16.recurse        ???????? @@no_hundred               
???????? @@hloop                    ???????? IV_PLAYW.1                 
???????? @@notrecurse               ???????? @@recurse                  
???????? @@teens                    ???????? @@tyloop                   
???????? intybasic_flash            ???????? JF.first                   
???????? JF.last                    ???????? JF.addr                    
???????? JF.row                     ???????? JF.wrcmd                   
???????? JF.rdcmd                   ???????? JF.ercmd                   
???????? JF.wrkey                   ???????? JF.rdkey                   
???????? JF.erkey                   ???????? JF.write                   
???????? JF.read                    ???????? JF.erase                   
???????? JF.INIT                    ???????? @@__code                   
???????? JF.SYSRAM                  ???????? JF.CMD                     
???????? JF.SV.R4                   ???????? JF.SV.R0                   
???????? JF.SV.R5                   ???????? JF.SV.ISR                  
0000640B QSQR8_TBL                  0000650A QSQR8_TBL.mid              
0000670E qs_mpy8.ok                 00006711 qs_mpy16                   
00006722 qs_mpy16.pos_ll            00006729 qs_mpy16.pos_lh            
00006730 qs_mpy16.pos_hl            ???????? intybasic_fastdiv          
???????? uf_udiv16                  ???????? @@13                       
???????? @@14                       ???????? @@16                       
???????? intybasic_ecs              00000200 Q2                         
0000033B _read                      00000359 _col1                      
0000035A _col2                      0000035B _col3                      
0000035C _col4                      0000035D _col5                      
0000035E _col6                      0000035F _col7                      
00000100 SCRATCH                    0000012B _SCRATCH                   
000002F0 SYSTEM                     0000030F _SYSTEM                    
                                	; IntyBASIC compiler v1.2.8 Oct/07/2016
                                        ;
                                        ; Prologue for IntyBASIC programs
                                        ; by Oscar Toledo G.  http://nanochess.org/
                                        ;
                                        ; Revision: Jan/30/2014. Spacing adjustment and more comments.
                                        ; Revision: Apr/01/2014. It now sets the starting screen pos. for PRINT
                                	    ; Revision: Aug/26/2014. Added PAL detection code.
                                	    ; Revision: Dec/12/2014. Added optimized constant multiplication routines
                                	    ;                        by James Pujals.
                                	    ; Revision: Jan/25/2015. Added marker for automatic title replacement.
                                	    ;                        (option --title of IntyBASIC)
                                	    ; Revision: Aug/06/2015. Turns off ECS sound. Seed random generator using
                                	    ;                        trash in 16-bit RAM. Solved bugs and optimized
                                	    ;                        macro for constant multiplication.
                                        ; Revision: Jan/12/2016. Solved bug in PAL detection.
                                        ; Revision: May/03/2016. Changed in _mode_select initialization.
                                	    ; Revision: Jul/31/2016. Solved bug in multiplication by 126 and 127.
                                	; Revision: Sep/08/2016. Now CLRSCR initializes screen position for PRINT, this
                                	;                        solves bug when user programs goes directly to PRINT.
                                        ;

                                        ROMW 16
0x5000                                  ORG $5000

                                        ; This macro will 'eat' SRCFILE directives if the assembler doesn't support the directive.
                                        IF ( DEFINED __FEATURE.SRCFILE ) = 0
                                            MACRO SRCFILE x, y
                                            ; macro must be non-empty, but a comment works fine.
                                            ENDM
                                        ENDI

                                        ;
                                        ; ROM header
                                        ;
5000   000D 0050                        BIDECLE _ZERO           ; MOB picture base
5002   000D 0050                        BIDECLE _ZERO           ; Process table
5004   0029 0050                        BIDECLE _MAIN           ; Program start
5006   000D 0050                        BIDECLE _ZERO           ; Background base image
5008   000F 0050                        BIDECLE _ONES           ; GRAM
500A   0020 0050                        BIDECLE _TITLE          ; Cartridge title and date
500C   03C0                             DECLE   $03C0           ; No ECS title, jump to code after title,
                                                                ; ... no clicks
                                                                
500D   0000                     _ZERO:  DECLE   $0000           ; Border control
500E   0000                             DECLE   $0000           ; 0 = color stack, 1 = f/b mode
                                        
500F   0001 0001                _ONES:  DECLE   $0001, $0001    ; Initial color stack 0 and 1: Blue
5011   0001 0001                        DECLE   $0001, $0001    ; Initial color stack 2 and 3: Blue
5013   0001                             DECLE   $0001           ; Initial border color: Blue

0x7                             C_WHT:  EQU $0007

5014   02BC 0200                CLRSCR: MVII #$200,R4           ; Used also for CLS
5016   0244 033E                	MVO R4,_screen		; Set up starting screen position for PRINT
5018   02B9 00F0                        MVII #$F0,R1
0x501A                          FILLZERO:
501A   01C0                             CLRR R0
0x501B                          MEMSET:
501B   0260                             MVO@ R0,R4
501C   0011                             DECR R1
501D   022C 0003                        BNE MEMSET
501F   00AF                             JR R5

                                        ;
                                        ; Title, Intellivision EXEC will jump over it and start
                                        ; execution directly in _MAIN
                                        ;
                                	; Note mark is for automatic replacement by IntyBASIC
0x5020                          _TITLE:
5020   0075 0072 0075 006E      	BYTE 117,'runnerZ',0
5024   006E 0065 0072 005A 0000 
                                        
                                        ;
                                        ; Main program
                                        ;
0x5029                          _MAIN:
5029   0003                             DIS
502A   02BE 02F0                        MVII #STACK,R6

0x502C                          _MAIN0:
                                        ;
                                        ; Clean memory
                                        ;
502C   02B9 000E                        MVII #$00e,R1           ; 14 of sound (ECS)
502E   02BC 00F0                        MVII #$0f0,R4           ; ECS PSG
5030   0004 0150 001A                   CALL FILLZERO
5033   02B9 00FE                        MVII #$0fe,R1           ; 240 words of 8 bits plus 14 of sound
5035   02BC 0100                        MVII #$100,R4           ; 8-bit scratch RAM
5037   0004 0150 001A                   CALL FILLZERO

                                	; Seed random generator using 16 bit RAM (not cleared by EXEC)
503A   01C0                     	CLRR R0
503B   02BC 02F0                	MVII #$02F0,R4
503D   02B9 0044                	MVII #$0110/4,R1        ; Includes phantom memory for extra randomness
0x503F                          _MAIN4:                         ; This loop is courtesy of GroovyBee
503F   02E0                     	ADD@ R4,R0
5040   02E0                     	ADD@ R4,R0
5041   02E0                     	ADD@ R4,R0
5042   02E0                     	ADD@ R4,R0
5043   0011                     	DECR R1
5044   022C 0006                	BNE _MAIN4
5046   0240 0104                	MVO R0,_rand

5048   02B9 0058                        MVII #$058,R1           ; 88 words of 16 bits
504A   02BC 0308                        MVII #$308,R4           ; 16-bit scratch RAM
504C   0004 0150 001A                   CALL FILLZERO

504F   0004 0150 0014                   CALL CLRSCR             ; Clean up screen

5052   02B8 630E                        MVII #_pal1_vector,R0 ; Points to interrupt vector
5054   0240 0100                        MVO R0,ISRVEC
5056   0040                             SWAP R0
5057   0240 0101                        MVO R0,ISRVEC+1

5059   0002                             EIS

505A   0280 0103                _MAIN1:	MVI _ntsc,R0
505C   0378 0003                	CMPI #3,R0
505E   022C 0005                	BNE _MAIN1
5060   01D2                     	CLRR R2
5061   000A                     _MAIN2:	INCR R2
5062   0280 0103                	MVI _ntsc,R0
5064   0378 0004                	CMPI #4,R0
5066   022C 0006                	BNE _MAIN2

                                        ; 596 for PAL in jzintv
                                        ; 444 for NTSC in jzintv
5068   037A 0208                        CMPI #520,R2
506A   02B8 0001                        MVII #1,R0
506C   0206 0001                        BLE _MAIN3
506E   01C0                             CLRR R0
506F   0240 0103                _MAIN3: MVO R0,_ntsc

5071   0004 0160 02FA                   CALL _wait
5074   0004 0164 000A           	CALL _init_music
5077   02B8 0002                        MVII #2,R0
5079   0240 0109                        MVO R0,_mode_select
507B   02B8 0038                        MVII #$038,R0
507D   0240 01F8                        MVO R0,$01F8            ; Configures sound
507F   0240 00F8                        MVO R0,$00F8            ; Configures sound (ECS)
5081   0004 0160 02FA                   CALL _wait

                                ;* ======================================================================== *;
                                ;*  These routines are placed into the public domain by their author.  All  *;
                                ;*  copyright rights are hereby relinquished on the routines and data in    *;
                                ;*  this file.  -- James Pujals (DZ-Jay), 2014                              *;
                                ;* ======================================================================== *;

                                ; Modified by Oscar Toledo G. (nanochess), Aug/06/2015
                                ; * Tested all multiplications with automated test.
                                ; * Accelerated multiplication by 7,14,15,28,31,60,62,63,112,120,124
                                ; * Solved bug in multiplication by 23,39,46,47,55,71,78,79,87,92,93,94,95,103,110,111,119
                                ; * Improved sequence of instructions to be more interruptible.

                                ;; ======================================================================== ;;
                                ;;  MULT reg, tmp, const                                                    ;;
                                ;;  Multiplies "reg" by constant "const" and using "tmp" for temporary      ;;
                                ;;  calculations.  The result is placed in "reg."  The multiplication is    ;;
                                ;;  performed by an optimal combination of shifts, additions, and           ;;
                                ;;  subtractions.                                                           ;;
                                ;;                                                                          ;;
                                ;;  NOTE:   The resulting contents of the "tmp" are undefined.              ;;
                                ;;                                                                          ;;
                                ;;  ARGUMENTS                                                               ;;
                                ;;      reg         A register containing the multiplicand.                 ;;
                                ;;      tmp         A register for temporary calculations.                  ;;
                                ;;      const       The constant multiplier.                                ;;
                                ;;                                                                          ;;
                                ;;  OUTPUT                                                                  ;;
                                ;;      reg         Output value.                                           ;;
                                ;;      tmp         Trashed.                                                ;;
                                ;;      .ERR.Failed True if operation failed.                               ;;
                                ;; ======================================================================== ;;
                                MACRO   MULT reg, tmp, const
                                ;
                                    LISTING "code"

                                _mul.const      QSET    %const%
                                _mul.done       QSET    0

                                        IF (%const% > $7F)
                                _mul.const      QSET    (_mul.const SHR 1)
                                                SLL     %reg%,  1
                                        ENDI

                                        ; Multiply by $00 (0)
                                        IF (_mul.const = $00)
                                _mul.done       QSET    -1
                                                CLRR    %reg%
                                        ENDI

                                        ; Multiply by $01 (1)
                                        IF (_mul.const = $01)
                                _mul.done       QSET    -1
                                                ; Nothing to do
                                        ENDI

                                        ; Multiply by $02 (2)
                                        IF (_mul.const = $02)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                        ENDI

                                        ; Multiply by $03 (3)
                                        IF (_mul.const = $03)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $04 (4)
                                        IF (_mul.const = $04)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                        ENDI

                                        ; Multiply by $05 (5)
                                        IF (_mul.const = $05)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $06 (6)
                                        IF (_mul.const = $06)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $07 (7)
                                        IF (_mul.const = $07)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $08 (8)
                                        IF (_mul.const = $08)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                        ENDI

                                        ; Multiply by $09 (9)
                                        IF (_mul.const = $09)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $0A (10)
                                        IF (_mul.const = $0A)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $0B (11)
                                        IF (_mul.const = $0B)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $0C (12)
                                        IF (_mul.const = $0C)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $0D (13)
                                        IF (_mul.const = $0D)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $0E (14)
                                        IF (_mul.const = $0E)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $0F (15)
                                        IF (_mul.const = $0F)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $10 (16)
                                        IF (_mul.const = $10)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                        ENDI

                                        ; Multiply by $11 (17)
                                        IF (_mul.const = $11)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $12 (18)
                                        IF (_mul.const = $12)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $13 (19)
                                        IF (_mul.const = $13)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $14 (20)
                                        IF (_mul.const = $14)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $15 (21)
                                        IF (_mul.const = $15)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $16 (22)
                                        IF (_mul.const = $16)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $17 (23)
                                        IF (_mul.const = $17)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $18 (24)
                                        IF (_mul.const = $18)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $19 (25)
                                        IF (_mul.const = $19)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $1A (26)
                                        IF (_mul.const = $1A)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $1B (27)
                                        IF (_mul.const = $1B)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $1C (28)
                                        IF (_mul.const = $1C)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $1D (29)
                                        IF (_mul.const = $1D)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $1E (30)
                                        IF (_mul.const = $1E)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $1F (31)
                                        IF (_mul.const = $1F)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                		ADDR	%reg%,	%reg%
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $20 (32)
                                        IF (_mul.const = $20)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                		ADDR	%reg%,	%reg%
                                        ENDI

                                        ; Multiply by $21 (33)
                                        IF (_mul.const = $21)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                		ADDR	%reg%,	%reg%
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $22 (34)
                                        IF (_mul.const = $22)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $23 (35)
                                        IF (_mul.const = $23)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $24 (36)
                                        IF (_mul.const = $24)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $25 (37)
                                        IF (_mul.const = $25)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $26 (38)
                                        IF (_mul.const = $26)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $27 (39)
                                        IF (_mul.const = $27)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                		SUBR	%tmp%,	%reg%
                                        ENDI

                                        ; Multiply by $28 (40)
                                        IF (_mul.const = $28)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $29 (41)
                                        IF (_mul.const = $29)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $2A (42)
                                        IF (_mul.const = $2A)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $2B (43)
                                        IF (_mul.const = $2B)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $2C (44)
                                        IF (_mul.const = $2C)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $2D (45)
                                        IF (_mul.const = $2D)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $2E (46)
                                        IF (_mul.const = $2E)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                		SUBR	%tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $2F (47)
                                        IF (_mul.const = $2F)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                		SUBR	%tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $30 (48)
                                        IF (_mul.const = $30)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $31 (49)
                                        IF (_mul.const = $31)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $32 (50)
                                        IF (_mul.const = $32)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $33 (51)
                                        IF (_mul.const = $33)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $34 (52)
                                        IF (_mul.const = $34)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $35 (53)
                                        IF (_mul.const = $35)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $36 (54)
                                        IF (_mul.const = $36)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $37 (55)
                                        IF (_mul.const = $37)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                		SLL	%reg%,	1
                                		SUBR	%tmp%,	%reg%
                                        ENDI

                                        ; Multiply by $38 (56)
                                        IF (_mul.const = $38)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $39 (57)
                                        IF (_mul.const = $39)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $3A (58)
                                        IF (_mul.const = $3A)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $3B (59)
                                        IF (_mul.const = $3B)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $3C (60)
                                        IF (_mul.const = $3C)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $3D (61)
                                        IF (_mul.const = $3D)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $3E (62)
                                        IF (_mul.const = $3E)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                		ADDR	%reg%,	%reg%
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $3F (63)
                                        IF (_mul.const = $3F)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $40 (64)
                                        IF (_mul.const = $40)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                        ENDI

                                        ; Multiply by $41 (65)
                                        IF (_mul.const = $41)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $42 (66)
                                        IF (_mul.const = $42)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                		ADDR	%reg%,	%reg%
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $43 (67)
                                        IF (_mul.const = $43)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                		ADDR	%reg%,	%reg%
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $44 (68)
                                        IF (_mul.const = $44)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $45 (69)
                                        IF (_mul.const = $45)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $46 (70)
                                        IF (_mul.const = $46)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $47 (71)
                                        IF (_mul.const = $47)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                		SUBR	%tmp%,	%reg%
                                        ENDI

                                        ; Multiply by $48 (72)
                                        IF (_mul.const = $48)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $49 (73)
                                        IF (_mul.const = $49)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $4A (74)
                                        IF (_mul.const = $4A)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $4B (75)
                                        IF (_mul.const = $4B)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $4C (76)
                                        IF (_mul.const = $4C)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $4D (77)
                                        IF (_mul.const = $4D)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $4E (78)
                                        IF (_mul.const = $4E)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                		SUBR	%tmp%,	%reg%
                                        ENDI

                                        ; Multiply by $4F (79)
                                        IF (_mul.const = $4F)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                		SUBR	%tmp%,	%reg%
                                        ENDI

                                        ; Multiply by $50 (80)
                                        IF (_mul.const = $50)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $51 (81)
                                        IF (_mul.const = $51)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $52 (82)
                                        IF (_mul.const = $52)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $53 (83)
                                        IF (_mul.const = $53)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $54 (84)
                                        IF (_mul.const = $54)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $55 (85)
                                        IF (_mul.const = $55)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $56 (86)
                                        IF (_mul.const = $56)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $57 (87)
                                        IF (_mul.const = $57)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                		SUBR    %reg%,	%tmp%
                                                SLL     %reg%,  2
                                		SUBR	%tmp%,	%reg%
                                        ENDI

                                        ; Multiply by $58 (88)
                                        IF (_mul.const = $58)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $59 (89)
                                        IF (_mul.const = $59)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $5A (90)
                                        IF (_mul.const = $5A)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $5B (91)
                                        IF (_mul.const = $5B)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $5C (92)
                                        IF (_mul.const = $5C)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                		SUBR	%tmp%,	%reg%
                                        ENDI

                                        ; Multiply by $5D (93)
                                        IF (_mul.const = $5D)
                                _mul.done       QSET    -1
                                		MOVR	%reg%,	%tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                		SUBR	%tmp%,	%reg%
                                        ENDI

                                        ; Multiply by $5E (94)
                                        IF (_mul.const = $5E)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                		SUBR	%tmp%,	%reg%
                                        ENDI

                                        ; Multiply by $5F (95)
                                        IF (_mul.const = $5F)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                ADDR	%reg%,	%reg%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                		SUBR	%tmp%,	%reg%
                                        ENDI

                                        ; Multiply by $60 (96)
                                        IF (_mul.const = $60)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                		ADDR	%reg%,	%reg%
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $61 (97)
                                        IF (_mul.const = $61)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $62 (98)
                                        IF (_mul.const = $62)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $63 (99)
                                        IF (_mul.const = $63)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $64 (100)
                                        IF (_mul.const = $64)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $65 (101)
                                        IF (_mul.const = $65)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $66 (102)
                                        IF (_mul.const = $66)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $67 (103)
                                        IF (_mul.const = $67)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $68 (104)
                                        IF (_mul.const = $68)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $69 (105)
                                        IF (_mul.const = $69)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $6A (106)
                                        IF (_mul.const = $6A)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $6B (107)
                                        IF (_mul.const = $6B)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $6C (108)
                                        IF (_mul.const = $6C)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $6D (109)
                                        IF (_mul.const = $6D)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $6E (110)
                                        IF (_mul.const = $6E)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                		SUBR	%tmp%,	%reg%
                                        ENDI

                                        ; Multiply by $6F (111)
                                        IF (_mul.const = $6F)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                		SUBR	%tmp%,	%reg%
                                        ENDI

                                        ; Multiply by $70 (112)
                                        IF (_mul.const = $70)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $71 (113)
                                        IF (_mul.const = $71)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $72 (114)
                                        IF (_mul.const = $72)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $73 (115)
                                        IF (_mul.const = $73)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $74 (116)
                                        IF (_mul.const = $74)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $75 (117)
                                        IF (_mul.const = $75)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $76 (118)
                                        IF (_mul.const = $76)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $77 (119)
                                        IF (_mul.const = $77)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $78 (120)
                                        IF (_mul.const = $78)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $79 (121)
                                        IF (_mul.const = $79)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $7A (122)
                                        IF (_mul.const = $7A)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $7B (123)
                                        IF (_mul.const = $7B)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $7C (124)
                                        IF (_mul.const = $7C)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                		ADDR	%reg%,	%reg%
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $7D (125)
                                        IF (_mul.const = $7D)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                		ADDR	%reg%,	%reg%
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $7E (126)
                                        IF (_mul.const = $7E)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $7F (127)
                                        IF (_mul.const = $7F)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        IF  (_mul.done = 0)
                                            ERR $("Invalid multiplication constant \'%const%\', must be between 0 and ", $#($7F), ".")
                                        ENDI

                                    LISTING "prev"
                                ENDM

                                ;; ======================================================================== ;;
                                ;;  EOF: pm:mac:lang:mult                                                   ;;
                                ;; ======================================================================== ;;

                                	;FILE C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS
                                	;[1] ' =========================================================================
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",1
                                	;[2] ' IntyBASIC SDK Project: RunnerZ V.1
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",2
                                	;[3] ' -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",3
                                	;[4] '     Programmer: Josue N Rivera
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",4
                                	;[5] '     Created:    12/14/2017
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",5
                                	;[6] '     Updated:    12/14/2017
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",6
                                	;[7] '
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",7
                                	;[8] ' -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",8
                                	;[9] ' History:
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",9
                                	;[10] ' 12/14/2017 - runnerZ project created.
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",10
                                	;[11] ' 12/15/2017 - power ups added and the ability to jump.
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",11
                                	;[12] ' 12/16/2017 - animation for level ups and power ups.
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",12
                                	;[13] ' 12/17/2017 - small improvement to animation, power ups and the pause option.
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",13
                                	;[14] ' 12/20/2017 - improvement to animation.
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",14
                                	;[15] ' 12/20/2017 - Version 1 released.
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",15
                                	;[16] ' =========================================================================
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",16
                                	;[17] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",17
                                	;[18] INCLUDE "constants.bas"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",18
                                	;FILE C:\IntyBASIC SDK\lib\constants.bas
                                	;[1] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",1
                                	;[2] REM HEADER - CONSTANTS.BAS
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",2
                                	;[3] REM
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",3
                                	;[4] REM Started by Mark Ball, July 2015
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",4
                                	;[5] REM
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",5
                                	;[6] REM Constants for use in IntyBASIC
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",6
                                	;[7] REM
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",7
                                	;[8] REM HISTORY
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",8
                                	;[9] REM -------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",9
                                	;[10] REM 1.00F 05/07/15 - First version.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",10
                                	;[11] REM 1.01F 07/07/15 - Added disc directions.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",11
                                	;[12] REM                - Added background modes.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",12
                                	;[13] REM                - Minor comment changes.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",13
                                	;[14] REM 1.02F 08/07/15 - Renamed constants.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",14
                                	;[15] REM                - Added background access information.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",15
                                	;[16] REM                - Adjustments to layout.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",16
                                	;[17] REM 1.03F 08/07/15 - Fixed comment delimiter.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",17
                                	;[18] REM 1.04F 11/07/15 - Added useful functions.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",18
                                	;[19] REM                - Added controller movement mask.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",19
                                	;[20] REM 1.05F 11/07/15 - Added BACKGROUND constants.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",20
                                	;[21] REM 1.06F 11/07/15 - Changed Y, X order to X, Y in DEF FN functions.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",21
                                	;[22] REM 1.07F 11/07/15 - Added colour stack advance.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",22
                                	;[23] REM 1.08F 12/07/15 - Added functions for sprite position handling.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",23
                                	;[24] REM 1.09F 12/07/15 - Added a function for resetting a sprite.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",24
                                	;[25] REM 1.10F 13/07/15 - Added keypad constants.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",25
                                	;[26] REM 1.11F 13/07/15 - Added side button constants.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",26
                                	;[27] REM 1.12F 13/07/15 - Updated sprite functions.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",27
                                	;[28] REM 1.13F 19/07/15 - Added border masking constants.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",28
                                	;[29] REM 1.14F 20/07/15 - Added a combined border masking constant.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",29
                                	;[30] REM 1.15F 20/07/15 - Renamed border masking constants to BORDER_HIDE_xxxx.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",30
                                	;[31] REM 1.16F 28/09/15 - Fixed disc direction typos.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",31
                                	;[32] REM 1.17F 30/09/15 - Fixed DISC_SOUTH_WEST value.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",32
                                	;[33] REM 1.18F 05/12/15 - Fixed BG_XXXX colours.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",33
                                	;[34] REM 1.19F 01/01/16 - Changed name of BACKTAB constant to avoid confusion with #BACKTAB array.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",34
                                	;[35] REM                - Added pause key constants.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",35
                                	;[36] REM 1.20F 14/01/16 - Added coloured squares mode's pixel colours.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",36
                                	;[37] REM 1.21F 15/01/16 - Added coloured squares mode's X and Y limits.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",37
                                	;[38] REM 1.22F 23/01/16 - Added PSG constants.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",38
                                	;[39] REM 1.23F 24/01/16 - Fixed typo in PSG comments.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",39
                                	;[40] REM 1.24F 16/11/16 - Added toggle DEF FN's for sprite's BEHIND, HIT and VISIBLE.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",40
                                	;[41] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",41
                                	;[42] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",42
                                	;[43] REM /////////////////////////////////////////////////////////////////////////
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",43
                                	;[44] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",44
                                	;[45] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",45
                                	;[46] REM Background information.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",46
                                	;[47] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",47
                                	;[48] CONST BACKTAB_ADDR					= $0200		' Start of the BACKground TABle (BACKTAB) in RAM.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",48
                                	;[49] CONST BACKGROUND_ROWS				= 12		' Height of the background in cards.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",49
                                	;[50] CONST BACKGROUND_COLUMNS			= 20		' Width of the background in cards.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",50
                                	;[51] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",51
                                	;[52] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",52
                                	;[53] REM Background GRAM cards.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",53
                                	;[54] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",54
                                	;[55] CONST BG00							= $0800
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",55
                                	;[56] CONST BG01							= $0808
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",56
                                	;[57] CONST BG02							= $0810
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",57
                                	;[58] CONST BG03							= $0818
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",58
                                	;[59] CONST BG04							= $0820
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",59
                                	;[60] CONST BG05							= $0828
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",60
                                	;[61] CONST BG06							= $0830
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",61
                                	;[62] CONST BG07							= $0838
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",62
                                	;[63] CONST BG08							= $0840
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",63
                                	;[64] CONST BG09							= $0848
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",64
                                	;[65] CONST BG10							= $0850
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",65
                                	;[66] CONST BG11							= $0858
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",66
                                	;[67] CONST BG12							= $0860
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",67
                                	;[68] CONST BG13							= $0868
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",68
                                	;[69] CONST BG14							= $0870
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",69
                                	;[70] CONST BG15							= $0878
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",70
                                	;[71] CONST BG16							= $0880
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",71
                                	;[72] CONST BG17							= $0888
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",72
                                	;[73] CONST BG18							= $0890
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",73
                                	;[74] CONST BG19							= $0898
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",74
                                	;[75] CONST BG20							= $08A0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",75
                                	;[76] CONST BG21							= $08A8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",76
                                	;[77] CONST BG22							= $08B0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",77
                                	;[78] CONST BG23							= $08B8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",78
                                	;[79] CONST BG24							= $08C0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",79
                                	;[80] CONST BG25							= $08C8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",80
                                	;[81] CONST BG26							= $08D0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",81
                                	;[82] CONST BG27							= $08D8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",82
                                	;[83] CONST BG28							= $08E0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",83
                                	;[84] CONST BG29							= $08E8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",84
                                	;[85] CONST BG30							= $08F0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",85
                                	;[86] CONST BG31							= $08F8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",86
                                	;[87] CONST BG32							= $0900
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",87
                                	;[88] CONST BG33							= $0908
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",88
                                	;[89] CONST BG34							= $0910
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",89
                                	;[90] CONST BG35							= $0918
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",90
                                	;[91] CONST BG36							= $0920
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",91
                                	;[92] CONST BG37							= $0928
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",92
                                	;[93] CONST BG38							= $0930
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",93
                                	;[94] CONST BG39							= $0938
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",94
                                	;[95] CONST BG40							= $0940
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",95
                                	;[96] CONST BG41							= $0948
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",96
                                	;[97] CONST BG42							= $0950
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",97
                                	;[98] CONST BG43							= $0958
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",98
                                	;[99] CONST BG44							= $0960
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",99
                                	;[100] CONST BG45							= $0968
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",100
                                	;[101] CONST BG46							= $0970
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",101
                                	;[102] CONST BG47							= $0978
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",102
                                	;[103] CONST BG48							= $0980
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",103
                                	;[104] CONST BG49							= $0988
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",104
                                	;[105] CONST BG50							= $0990
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",105
                                	;[106] CONST BG51							= $0998
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",106
                                	;[107] CONST BG52							= $09A0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",107
                                	;[108] CONST BG53							= $09A8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",108
                                	;[109] CONST BG54							= $09B0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",109
                                	;[110] CONST BG55							= $09B8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",110
                                	;[111] CONST BG56							= $09C0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",111
                                	;[112] CONST BG57							= $09C8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",112
                                	;[113] CONST BG58							= $09D0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",113
                                	;[114] CONST BG59							= $09D8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",114
                                	;[115] CONST BG60							= $09E0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",115
                                	;[116] CONST BG61							= $09E8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",116
                                	;[117] CONST BG62							= $09F0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",117
                                	;[118] CONST BG63							= $09F8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",118
                                	;[119] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",119
                                	;[120] REM /////////////////////////////////////////////////////////////////////////
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",120
                                	;[121] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",121
                                	;[122] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",122
                                	;[123] REM GRAM card index numbers.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",123
                                	;[124] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",124
                                	;[125] REM Note: For use with the "define" command.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",125
                                	;[126] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",126
                                	;[127] CONST DEF00							= $0000
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",127
                                	;[128] CONST DEF01							= $0001
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",128
                                	;[129] CONST DEF02							= $0002
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",129
                                	;[130] CONST DEF03							= $0003
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",130
                                	;[131] CONST DEF04							= $0004
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",131
                                	;[132] CONST DEF05							= $0005
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",132
                                	;[133] CONST DEF06							= $0006
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",133
                                	;[134] CONST DEF07							= $0007
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",134
                                	;[135] CONST DEF08							= $0008
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",135
                                	;[136] CONST DEF09							= $0009
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",136
                                	;[137] CONST DEF10							= $000A
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",137
                                	;[138] CONST DEF11							= $000B
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",138
                                	;[139] CONST DEF12							= $000C
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",139
                                	;[140] CONST DEF13							= $000D
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",140
                                	;[141] CONST DEF14							= $000E
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",141
                                	;[142] CONST DEF15							= $000F
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",142
                                	;[143] CONST DEF16							= $0010
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",143
                                	;[144] CONST DEF17							= $0011
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",144
                                	;[145] CONST DEF18							= $0012
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",145
                                	;[146] CONST DEF19							= $0013
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",146
                                	;[147] CONST DEF20							= $0014
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",147
                                	;[148] CONST DEF21							= $0015
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",148
                                	;[149] CONST DEF22							= $0016
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",149
                                	;[150] CONST DEF23							= $0017
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",150
                                	;[151] CONST DEF24							= $0018
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",151
                                	;[152] CONST DEF25							= $0019
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",152
                                	;[153] CONST DEF26							= $001A
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",153
                                	;[154] CONST DEF27							= $001B
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",154
                                	;[155] CONST DEF28							= $001C
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",155
                                	;[156] CONST DEF29							= $001D
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",156
                                	;[157] CONST DEF30							= $001E
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",157
                                	;[158] CONST DEF31							= $001F
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",158
                                	;[159] CONST DEF32							= $0020
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",159
                                	;[160] CONST DEF33							= $0021
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",160
                                	;[161] CONST DEF34							= $0022
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",161
                                	;[162] CONST DEF35							= $0023
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",162
                                	;[163] CONST DEF36							= $0024
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",163
                                	;[164] CONST DEF37							= $0025
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",164
                                	;[165] CONST DEF38							= $0026
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",165
                                	;[166] CONST DEF39							= $0027
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",166
                                	;[167] CONST DEF40							= $0028
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",167
                                	;[168] CONST DEF41							= $0029
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",168
                                	;[169] CONST DEF42							= $002A
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",169
                                	;[170] CONST DEF43							= $002B
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",170
                                	;[171] CONST DEF44							= $002C
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",171
                                	;[172] CONST DEF45							= $002D
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",172
                                	;[173] CONST DEF46							= $002E
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",173
                                	;[174] CONST DEF47							= $002F
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",174
                                	;[175] CONST DEF48							= $0030
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",175
                                	;[176] CONST DEF49							= $0031
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",176
                                	;[177] CONST DEF50							= $0032
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",177
                                	;[178] CONST DEF51							= $0033
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",178
                                	;[179] CONST DEF52							= $0034
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",179
                                	;[180] CONST DEF53							= $0035
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",180
                                	;[181] CONST DEF54							= $0036
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",181
                                	;[182] CONST DEF55							= $0037
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",182
                                	;[183] CONST DEF56							= $0038
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",183
                                	;[184] CONST DEF57							= $0039
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",184
                                	;[185] CONST DEF58							= $003A
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",185
                                	;[186] CONST DEF59							= $003B
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",186
                                	;[187] CONST DEF60							= $003C
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",187
                                	;[188] CONST DEF61							= $003D
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",188
                                	;[189] CONST DEF62							= $003E
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",189
                                	;[190] CONST DEF63							= $003F
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",190
                                	;[191] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",191
                                	;[192] REM /////////////////////////////////////////////////////////////////////////
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",192
                                	;[193] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",193
                                	;[194] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",194
                                	;[195] REM Screen modes.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",195
                                	;[196] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",196
                                	;[197] REM Note: For use with the "mode" command.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",197
                                	;[198] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",198
                                	;[199] CONST SCREEN_COLOR_STACK			= $0000
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",199
                                	;[200] CONST SCREEN_FOREGROUND_BACKGROUND	= $0001
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",200
                                	;[201] REM Abbreviated versions.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",201
                                	;[202] CONST SCREEN_FB						= $0001
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",202
                                	;[203] CONST SCREEN_CS						= $0000
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",203
                                	;[204] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",204
                                	;[205] REM /////////////////////////////////////////////////////////////////////////
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",205
                                	;[206] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",206
                                	;[207] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",207
                                	;[208] REM COLORS - Border.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",208
                                	;[209] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",209
                                	;[210] REM Notes:
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",210
                                	;[211] REM - For use with the commands "mode 0" and "mode 1".
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",211
                                	;[212] REM - For use with the "border" command.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",212
                                	;[213] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",213
                                	;[214] CONST BORDER_BLACK					= $0000
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",214
                                	;[215] CONST BORDER_BLUE					= $0001
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",215
                                	;[216] CONST BORDER_RED					= $0002
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",216
                                	;[217] CONST BORDER_TAN					= $0003
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",217
                                	;[218] CONST BORDER_DARKGREEN				= $0004
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",218
                                	;[219] CONST BORDER_GREEN					= $0005
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",219
                                	;[220] CONST BORDER_YELLOW					= $0006
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",220
                                	;[221] CONST BORDER_WHITE					= $0007
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",221
                                	;[222] CONST BORDER_GREY					= $0008
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",222
                                	;[223] CONST BORDER_CYAN					= $0009
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",223
                                	;[224] CONST BORDER_ORANGE					= $000A
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",224
                                	;[225] CONST BORDER_BROWN					= $000B
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",225
                                	;[226] CONST BORDER_PINK					= $000C
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",226
                                	;[227] CONST BORDER_LIGHTBLUE				= $000D
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",227
                                	;[228] CONST BORDER_YELLOWGREEN			= $000E
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",228
                                	;[229] CONST BORDER_PURPLE					= $000F
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",229
                                	;[230] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",230
                                	;[231] REM /////////////////////////////////////////////////////////////////////////
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",231
                                	;[232] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",232
                                	;[233] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",233
                                	;[234] REM BORDER - Edge masks.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",234
                                	;[235] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",235
                                	;[236] REM Note: For use with the "border color, edge" command.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",236
                                	;[237] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",237
                                	;[238] CONST BORDER_HIDE_LEFT_EDGE			= $0001		' Hide the leftmost column of the background.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",238
                                	;[239] CONST BORDER_HIDE_TOP_EDGE			= $0002		' Hide the topmost row of the background.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",239
                                	;[240] CONST BORDER_HIDE_TOP_LEFT_EDGE		= $0003		' Hide both the topmost row and leftmost column of the background.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",240
                                	;[241] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",241
                                	;[242] REM /////////////////////////////////////////////////////////////////////////
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",242
                                	;[243] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",243
                                	;[244] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",244
                                	;[245] REM COLORS - Mode 0 (Color Stack).
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",245
                                	;[246] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",246
                                	;[247] REM Stack
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",247
                                	;[248] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",248
                                	;[249] REM Note: For use as the last 4 parameters used in the "mode 1" command.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",249
                                	;[250] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",250
                                	;[251] CONST STACK_BLACK					= $0000
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",251
                                	;[252] CONST STACK_BLUE					= $0001
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",252
                                	;[253] CONST STACK_RED						= $0002
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",253
                                	;[254] CONST STACK_TAN						= $0003
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",254
                                	;[255] CONST STACK_DARKGREEN				= $0004
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",255
                                	;[256] CONST STACK_GREEN					= $0005
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",256
                                	;[257] CONST STACK_YELLOW					= $0006
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",257
                                	;[258] CONST STACK_WHITE					= $0007
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",258
                                	;[259] CONST STACK_GREY					= $0008
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",259
                                	;[260] CONST STACK_CYAN					= $0009
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",260
                                	;[261] CONST STACK_ORANGE					= $000A
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",261
                                	;[262] CONST STACK_BROWN					= $000B
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",262
                                	;[263] CONST STACK_PINK					= $000C
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",263
                                	;[264] CONST STACK_LIGHTBLUE				= $000D
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",264
                                	;[265] CONST STACK_YELLOWGREEN				= $000E
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",265
                                	;[266] CONST STACK_PURPLE					= $000F
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",266
                                	;[267] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",267
                                	;[268] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",268
                                	;[269] REM Foreground.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",269
                                	;[270] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",270
                                	;[271] REM Notes:
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",271
                                	;[272] REM - For use with "peek/poke" commands that access BACKTAB.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",272
                                	;[273] REM - Only one foreground colour permitted per background card.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",273
                                	;[274] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",274
                                	;[275] CONST CS_BLACK						= $0000
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",275
                                	;[276] CONST CS_BLUE						= $0001
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",276
                                	;[277] CONST CS_RED						= $0002
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",277
                                	;[278] CONST CS_TAN						= $0003
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",278
                                	;[279] CONST CS_DARKGREEN					= $0004
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",279
                                	;[280] CONST CS_GREEN						= $0005
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",280
                                	;[281] CONST CS_YELLOW						= $0006
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",281
                                	;[282] CONST CS_WHITE						= $0007
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",282
                                	;[283] CONST CS_GREY						= $1000
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",283
                                	;[284] CONST CS_CYAN						= $1001
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",284
                                	;[285] CONST CS_ORANGE						= $1002
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",285
                                	;[286] CONST CS_BROWN						= $1003
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",286
                                	;[287] CONST CS_PINK						= $1004
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",287
                                	;[288] CONST CS_LIGHTBLUE					= $1005
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",288
                                	;[289] CONST CS_YELLOWGREEN				= $1006
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",289
                                	;[290] CONST CS_PURPLE						= $1007
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",290
                                	;[291] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",291
                                	;[292] CONST CS_CARD_DATA_MASK				= $07F8		' Mask to get the background card's data.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",292
                                	;[293] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",293
                                	;[294] CONST CS_ADVANCE					= $2000		' Advance the colour stack by one position.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",294
                                	;[295] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",295
                                	;[296] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",296
                                	;[297] REM Coloured squares mode.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",297
                                	;[298] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",298
                                	;[299] REM Notes :
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",299
                                	;[300] REM - Only available in colour stack mode.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",300
                                	;[301] REM - Pixels in each BACKTAB card are arranged in the following manner:
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",301
                                	;[302] REM +-------+-------+
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",302
                                	;[303] REM | Pixel | Pixel |
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",303
                                	;[304] REM |   0   |   1   !
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",304
                                	;[305] REM +-------+-------+
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",305
                                	;[306] REM | Pixel | Pixel |
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",306
                                	;[307] REM |   2   |   3   !
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",307
                                	;[308] REM +-------+-------+
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",308
                                	;[309] REM
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",309
                                	;[310] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",310
                                	;[311] CONST CS_COLOUR_SQUARES_ENABLE		= $1000
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",311
                                	;[312] CONST CS_PIX0_BLACK					= 0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",312
                                	;[313] CONST CS_PIX0_BLUE					= 1
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",313
                                	;[314] CONST CS_PIX0_RED					= 2
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",314
                                	;[315] CONST CS_PIX0_TAN					= 3
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",315
                                	;[316] CONST CS_PIX0_DARKGREEN				= 4
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",316
                                	;[317] CONST CS_PIX0_GREEN					= 5
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",317
                                	;[318] CONST CS_PIX0_YELLOW				= 6
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",318
                                	;[319] CONST CS_PIX0_BACKGROUND			= 7
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",319
                                	;[320] CONST CS_PIX1_BLACK					= 0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",320
                                	;[321] CONST CS_PIX1_BLUE					= 1*8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",321
                                	;[322] CONST CS_PIX1_RED					= 2*8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",322
                                	;[323] CONST CS_PIX1_TAN					= 3*8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",323
                                	;[324] CONST CS_PIX1_DARKGREEN				= 4*8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",324
                                	;[325] CONST CS_PIX1_GREEN					= 5*8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",325
                                	;[326] CONST CS_PIX1_YELLOW				= 6*8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",326
                                	;[327] CONST CS_PIX1_BACKGROUND			= 7*8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",327
                                	;[328] CONST CS_PIX2_BLACK					= 0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",328
                                	;[329] CONST CS_PIX2_BLUE					= 1*64
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",329
                                	;[330] CONST CS_PIX2_RED					= 2*64
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",330
                                	;[331] CONST CS_PIX2_TAN					= 3*64
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",331
                                	;[332] CONST CS_PIX2_DARKGREEN				= 4*64
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",332
                                	;[333] CONST CS_PIX2_GREEN					= 5*64
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",333
                                	;[334] CONST CS_PIX2_YELLOW				= 6*64
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",334
                                	;[335] CONST CS_PIX2_BACKGROUND			= 7*64
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",335
                                	;[336] CONST CS_PIX3_BLACK					= 0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",336
                                	;[337] CONST CS_PIX3_BLUE					= $0200
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",337
                                	;[338] CONST CS_PIX3_RED					= $0400
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",338
                                	;[339] CONST CS_PIX3_TAN					= $0600
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",339
                                	;[340] CONST CS_PIX3_DARKGREEN				= $2000
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",340
                                	;[341] CONST CS_PIX3_GREEN					= $2200
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",341
                                	;[342] CONST CS_PIX3_YELLOW				= $2400
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",342
                                	;[343] CONST CS_PIX3_BACKGROUND			= $2600
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",343
                                	;[344] CONST CS_PIX_MASK					= CS_COLOUR_SQUARES_ENABLE+CS_PIX0_BACKGROUND+CS_PIX1_BACKGROUND+CS_PIX2_BACKGROUND+CS_PIX3_BACKGROUND
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",344
                                	;[345] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",345
                                	;[346] CONST CS_PIX_X_MIN					= 0		' Minimum x coordinate.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",346
                                	;[347] CONST CS_PIX_X_MAX					= 39	' Maximum x coordinate.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",347
                                	;[348] CONST CS_PIX_Y_MIN					= 0		' Minimum Y coordinate.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",348
                                	;[349] CONST CS_PIX_Y_MAX					= 23	' Maximum Y coordinate.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",349
                                	;[350] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",350
                                	;[351] REM /////////////////////////////////////////////////////////////////////////
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",351
                                	;[352] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",352
                                	;[353] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",353
                                	;[354] REM COLORS - Mode 1 (Foreground Background)
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",354
                                	;[355] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",355
                                	;[356] REM Foreground.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",356
                                	;[357] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",357
                                	;[358] REM Notes:
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",358
                                	;[359] REM - For use with "peek/poke" commands that access BACKTAB.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",359
                                	;[360] REM - Only one foreground colour permitted per background card.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",360
                                	;[361] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",361
                                	;[362] CONST FG_BLACK						= $0000
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",362
                                	;[363] CONST FG_BLUE						= $0001
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",363
                                	;[364] CONST FG_RED						= $0002
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",364
                                	;[365] CONST FG_TAN						= $0003
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",365
                                	;[366] CONST FG_DARKGREEN					= $0004
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",366
                                	;[367] CONST FG_GREEN						= $0005
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",367
                                	;[368] CONST FG_YELLOW						= $0006
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",368
                                	;[369] CONST FG_WHITE						= $0007
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",369
                                	;[370] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",370
                                	;[371] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",371
                                	;[372] REM Background.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",372
                                	;[373] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",373
                                	;[374] REM Notes:
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",374
                                	;[375] REM - For use with "peek/poke" commands that access BACKTAB.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",375
                                	;[376] REM - Only one background colour permitted per background card.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",376
                                	;[377] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",377
                                	;[378] CONST BG_BLACK						= $0000
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",378
                                	;[379] CONST BG_BLUE						= $0200
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",379
                                	;[380] CONST BG_RED						= $0400
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",380
                                	;[381] CONST BG_TAN						= $0600
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",381
                                	;[382] CONST BG_DARKGREEN					= $2000
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",382
                                	;[383] CONST BG_GREEN						= $2200
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",383
                                	;[384] CONST BG_YELLOW						= $2400
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",384
                                	;[385] CONST BG_WHITE						= $2600
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",385
                                	;[386] CONST BG_GREY						= $1000
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",386
                                	;[387] CONST BG_CYAN						= $1200
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",387
                                	;[388] CONST BG_ORANGE						= $1400
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",388
                                	;[389] CONST BG_BROWN						= $1600
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",389
                                	;[390] CONST BG_PINK						= $3000
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",390
                                	;[391] CONST BG_LIGHTBLUE					= $3200
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",391
                                	;[392] CONST BG_YELLOWGREEN				= $3400
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",392
                                	;[393] CONST BG_PURPLE						= $3600
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",393
                                	;[394] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",394
                                	;[395] CONST FGBG_CARD_DATA_MASK			= $01F8		' Mask to get the background card's data.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",395
                                	;[396] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",396
                                	;[397] REM /////////////////////////////////////////////////////////////////////////
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",397
                                	;[398] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",398
                                	;[399] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",399
                                	;[400] REM Sprites.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",400
                                	;[401] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",401
                                	;[402] REM Note: For use with "sprite" command.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",402
                                	;[403] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",403
                                	;[404] REM X
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",404
                                	;[405] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",405
                                	;[406] REM Note: Add these constants to the sprite command's X parameter.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",406
                                	;[407] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",407
                                	;[408] CONST HIT							= $0100		' Enable the sprite's collision detection.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",408
                                	;[409] CONST VISIBLE						= $0200		' Make the sprite visible.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",409
                                	;[410] CONST ZOOMX2						= $0400		' Make the sprite twice the width.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",410
                                	;[411] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",411
                                	;[412] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",412
                                	;[413] REM Y
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",413
                                	;[414] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",414
                                	;[415] REM Note: Add these constants to the sprite command's Y parameter.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",415
                                	;[416] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",416
                                	;[417] CONST DOUBLEY						= $0080		' Make a double height sprite (with 2 GRAM cards).
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",417
                                	;[418] CONST ZOOMY2						= $0100		' Make the sprite twice (x2) the normal height.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",418
                                	;[419] CONST ZOOMY4						= $0200		' Make the sprite quadruple (x4) the normal height.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",419
                                	;[420] CONST ZOOMY8						= $0300		' Make the sprite octuple (x8) the normal height.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",420
                                	;[421] CONST FLIPX							= $0400		' Flip/mirror the sprite in X.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",421
                                	;[422] CONST FLIPY							= $0800		' Flip/mirror the sprite in Y.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",422
                                	;[423] CONST MIRROR						= $0C00		' Flip/mirror the sprite in both X and Y.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",423
                                	;[424] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",424
                                	;[425] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",425
                                	;[426] REM A
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",426
                                	;[427] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",427
                                	;[428] REM Notes:
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",428
                                	;[429] REM - Combine to create the sprite command's A parameter.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",429
                                	;[430] REM - Only one colour per sprite.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",430
                                	;[431] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",431
                                	;[432] CONST GRAM							= $0800		' Sprite's data is located in GRAM.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",432
                                	;[433] CONST BEHIND						= $2000		' Sprite is behind the background.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",433
                                	;[434] CONST SPR_BLACK						= $0000
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",434
                                	;[435] CONST SPR_BLUE						= $0001
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",435
                                	;[436] CONST SPR_RED						= $0002
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",436
                                	;[437] CONST SPR_TAN						= $0003
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",437
                                	;[438] CONST SPR_DARKGREEN					= $0004
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",438
                                	;[439] CONST SPR_GREEN						= $0005
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",439
                                	;[440] CONST SPR_YELLOW					= $0006
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",440
                                	;[441] CONST SPR_WHITE						= $0007
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",441
                                	;[442] CONST SPR_GREY						= $1000
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",442
                                	;[443] CONST SPR_CYAN						= $1001
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",443
                                	;[444] CONST SPR_ORANGE					= $1002
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",444
                                	;[445] CONST SPR_BROWN						= $1003
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",445
                                	;[446] CONST SPR_PINK						= $1004
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",446
                                	;[447] CONST SPR_LIGHTBLUE					= $1005
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",447
                                	;[448] CONST SPR_YELLOWGREEN				= $1006
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",448
                                	;[449] CONST SPR_PURPLE					= $1007
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",449
                                	;[450] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",450
                                	;[451] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",451
                                	;[452] REM GRAM numbers.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",452
                                	;[453] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",453
                                	;[454] REM Note: For use in the sprite command's parameter A.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",454
                                	;[455] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",455
                                	;[456] CONST SPR00							= $0800
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",456
                                	;[457] CONST SPR01							= $0808
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",457
                                	;[458] CONST SPR02							= $0810
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",458
                                	;[459] CONST SPR03							= $0818
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",459
                                	;[460] CONST SPR04							= $0820
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",460
                                	;[461] CONST SPR05							= $0828
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",461
                                	;[462] CONST SPR06							= $0830
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",462
                                	;[463] CONST SPR07							= $0838
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",463
                                	;[464] CONST SPR08							= $0840
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",464
                                	;[465] CONST SPR09							= $0848
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",465
                                	;[466] CONST SPR10							= $0850
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",466
                                	;[467] CONST SPR11							= $0858
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",467
                                	;[468] CONST SPR12							= $0860
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",468
                                	;[469] CONST SPR13							= $0868
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",469
                                	;[470] CONST SPR14							= $0870
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",470
                                	;[471] CONST SPR15							= $0878
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",471
                                	;[472] CONST SPR16							= $0880
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",472
                                	;[473] CONST SPR17							= $0888
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",473
                                	;[474] CONST SPR18							= $0890
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",474
                                	;[475] CONST SPR19							= $0898
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",475
                                	;[476] CONST SPR20							= $08A0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",476
                                	;[477] CONST SPR21							= $08A8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",477
                                	;[478] CONST SPR22							= $08B0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",478
                                	;[479] CONST SPR23							= $08B8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",479
                                	;[480] CONST SPR24							= $08C0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",480
                                	;[481] CONST SPR25							= $08C8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",481
                                	;[482] CONST SPR26							= $08D0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",482
                                	;[483] CONST SPR27							= $08D8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",483
                                	;[484] CONST SPR28							= $08E0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",484
                                	;[485] CONST SPR29							= $08E8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",485
                                	;[486] CONST SPR30							= $08F0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",486
                                	;[487] CONST SPR31							= $08F8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",487
                                	;[488] CONST SPR32							= $0900
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",488
                                	;[489] CONST SPR33							= $0908
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",489
                                	;[490] CONST SPR34							= $0910
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",490
                                	;[491] CONST SPR35							= $0918
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",491
                                	;[492] CONST SPR36							= $0920
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",492
                                	;[493] CONST SPR37							= $0928
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",493
                                	;[494] CONST SPR38							= $0930
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",494
                                	;[495] CONST SPR39							= $0938
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",495
                                	;[496] CONST SPR40							= $0940
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",496
                                	;[497] CONST SPR41							= $0948
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",497
                                	;[498] CONST SPR42							= $0950
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",498
                                	;[499] CONST SPR43							= $0958
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",499
                                	;[500] CONST SPR44							= $0960
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",500
                                	;[501] CONST SPR45							= $0968
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",501
                                	;[502] CONST SPR46							= $0970
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",502
                                	;[503] CONST SPR47							= $0978
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",503
                                	;[504] CONST SPR48							= $0980
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",504
                                	;[505] CONST SPR49							= $0988
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",505
                                	;[506] CONST SPR50							= $0990
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",506
                                	;[507] CONST SPR51							= $0998
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",507
                                	;[508] CONST SPR52							= $09A0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",508
                                	;[509] CONST SPR53							= $09A8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",509
                                	;[510] CONST SPR54							= $09B0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",510
                                	;[511] CONST SPR55							= $09B8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",511
                                	;[512] CONST SPR56							= $09C0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",512
                                	;[513] CONST SPR57							= $09C8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",513
                                	;[514] CONST SPR58							= $09D0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",514
                                	;[515] CONST SPR59							= $09D8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",515
                                	;[516] CONST SPR60							= $09E0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",516
                                	;[517] CONST SPR61							= $09E8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",517
                                	;[518] CONST SPR62							= $09F0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",518
                                	;[519] CONST SPR63							= $09F8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",519
                                	;[520] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",520
                                	;[521] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",521
                                	;[522] REM Sprite collision.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",522
                                	;[523] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",523
                                	;[524] REM Notes:
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",524
                                	;[525] REM - For use with variables COL0, COL1, COL2, COL3, COL4, COL5, COL6 and COL7.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",525
                                	;[526] REM - More than one collision can occur simultaneously.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",526
                                	;[527] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",527
                                	;[528] CONST HIT_SPRITE0					= $0001		' Sprite collided with sprite 0.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",528
                                	;[529] CONST HIT_SPRITE1					= $0002		' Sprite collided with sprite 1.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",529
                                	;[530] CONST HIT_SPRITE2					= $0004		' Sprite collided with sprite 2.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",530
                                	;[531] CONST HIT_SPRITE3					= $0008		' Sprite collided with sprite 3.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",531
                                	;[532] CONST HIT_SPRITE4					= $0010		' Sprite collided with sprite 4.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",532
                                	;[533] CONST HIT_SPRITE5					= $0020		' Sprite collided with sprite 5.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",533
                                	;[534] CONST HIT_SPRITE6					= $0040		' Sprite collided with sprite 6.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",534
                                	;[535] CONST HIT_SPRITE7					= $0080		' Sprite collided with sprite 7.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",535
                                	;[536] CONST HIT_BACKGROUND				= $0100		' Sprite collided with a background pixel.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",536
                                	;[537] CONST HIT_BORDER					= $0200		' Sprite collided with the top/bottom/left/right border.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",537
                                	;[538] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",538
                                	;[539] REM /////////////////////////////////////////////////////////////////////////
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",539
                                	;[540] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",540
                                	;[541] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",541
                                	;[542] REM DISC - Compass.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",542
                                	;[543] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",543
                                	;[544] REM   NW         N         NE
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",544
                                	;[545] REM     \   NNW  |  NNE   /
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",545
                                	;[546] REM       \      |      /
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",546
                                	;[547] REM         \    |    /
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",547
                                	;[548] REM    WNW    \  |  /    ENE
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",548
                                	;[549] REM             \|/
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",549
                                	;[550] REM  W ----------+---------- E
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",550
                                	;[552] REM             /|REM    WSW    /  |  \    ESE
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",552
                                	;[556] REM         /    |    REM       /      |      REM     /   SSW  |  SSE   REM   SW         S         SE
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",556
                                	;[557] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",557
                                	;[558] REM Notes:
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",558
                                	;[559] REM - North points upwards on the hand controller.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",559
                                	;[560] REM - Directions are listed in a clockwise manner.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",560
                                	;[561] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",561
                                	;[562] CONST DISC_NORTH					= $0004
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",562
                                	;[563] CONST DISC_NORTH_NORTH_EAST 		= $0014
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",563
                                	;[564] CONST DISC_NORTH_EAST				= $0016
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",564
                                	;[565] CONST DISC_EAST_NORTH_EAST			= $0006
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",565
                                	;[566] CONST DISC_EAST						= $0002
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",566
                                	;[567] CONST DISC_EAST_SOUTH_EAST			= $0012
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",567
                                	;[568] CONST DISC_SOUTH_EAST				= $0013
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",568
                                	;[569] CONST DISC_SOUTH_SOUTH_EAST			= $0003
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",569
                                	;[570] CONST DISC_SOUTH					= $0001
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",570
                                	;[571] CONST DISC_SOUTH_SOUTH_WEST			= $0011
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",571
                                	;[572] CONST DISC_SOUTH_WEST				= $0019
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",572
                                	;[573] CONST DISC_WEST_SOUTH_WEST			= $0009
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",573
                                	;[574] CONST DISC_WEST						= $0008
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",574
                                	;[575] CONST DISC_WEST_NORTH_WEST			= $0018
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",575
                                	;[576] CONST DISC_NORTH_WEST				= $001C
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",576
                                	;[577] CONST DISC_NORTH_NORTH_WEST			= $000C
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",577
                                	;[578] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",578
                                	;[579] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",579
                                	;[580] REM DISC - Compass abbreviated versions.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",580
                                	;[581] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",581
                                	;[582] CONST DISC_N						= $0004
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",582
                                	;[583] CONST DISC_NNE						= $0014
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",583
                                	;[584] CONST DISC_NE						= $0016
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",584
                                	;[585] CONST DISC_ENE						= $0006
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",585
                                	;[586] CONST DISC_E						= $0002
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",586
                                	;[587] CONST DISC_ESE						= $0012
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",587
                                	;[588] CONST DISC_SE						= $0013
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",588
                                	;[589] CONST DISC_SSE						= $0003
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",589
                                	;[590] CONST DISC_S						= $0001
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",590
                                	;[591] CONST DISC_SSW						= $0011
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",591
                                	;[592] CONST DISC_SW						= $0019
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",592
                                	;[593] CONST DISC_WSW						= $0009
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",593
                                	;[594] CONST DISC_W						= $0008
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",594
                                	;[595] CONST DISC_WNW						= $0018
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",595
                                	;[596] CONST DISC_NW						= $001C
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",596
                                	;[597] CONST DISC_NNW						= $000C
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",597
                                	;[598] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",598
                                	;[599] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",599
                                	;[600] REM DISC - Directions.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",600
                                	;[601] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",601
                                	;[602] CONST DISC_UP						= $0004
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",602
                                	;[603] CONST DISC_UP_RIGHT					= $0016		' Up and right diagonal.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",603
                                	;[604] CONST DISC_RIGHT					= $0002
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",604
                                	;[605] CONST DISC_DOWN_RIGHT				= $0013		' Down  and right diagonal.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",605
                                	;[606] CONST DISC_DOWN						= $0001
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",606
                                	;[607] CONST DISC_DOWN_LEFT				= $0019		' Down and left diagonal.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",607
                                	;[608] CONST DISC_LEFT						= $0008
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",608
                                	;[609] CONST DISC_UP_LEFT					= $001C		' Up and left diagonal.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",609
                                	;[610] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",610
                                	;[611] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",611
                                	;[612] REM DISK - Mask.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",612
                                	;[613] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",613
                                	;[614] CONST DISK_MASK						= $001F
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",614
                                	;[615] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",615
                                	;[616] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",616
                                	;[617] REM Controller - Keypad.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",617
                                	;[618] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",618
                                	;[619] CONST KEYPAD_0						= 72
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",619
                                	;[620] CONST KEYPAD_1						= 129
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",620
                                	;[621] CONST KEYPAD_2						= 65
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",621
                                	;[622] CONST KEYPAD_3						= 33
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",622
                                	;[623] CONST KEYPAD_4						= 130
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",623
                                	;[624] CONST KEYPAD_5						= 66
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",624
                                	;[625] CONST KEYPAD_6						= 34
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",625
                                	;[626] CONST KEYPAD_7						= 132
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",626
                                	;[627] CONST KEYPAD_8						= 68
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",627
                                	;[628] CONST KEYPAD_9						= 36
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",628
                                	;[629] CONST KEYPAD_CLEAR					= 136
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",629
                                	;[630] CONST KEYPAD_ENTER					= 40
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",630
                                	;[631] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",631
                                	;[632] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",632
                                	;[633] REM Controller - Pause buttons (1+9 or 3+7 held down simultaneously).
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",633
                                	;[634] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",634
                                	;[635] REM Notes:
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",635
                                	;[636] REM - Key codes for 3+7 and 1+9 are the same (165).
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",636
                                	;[637] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",637
                                	;[638] CONST KEYPAD_PAUSE					= (KEYPAD_1 XOR KEYPAD_9)
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",638
                                	;[639] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",639
                                	;[640] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",640
                                	;[641] REM Controller - Side buttons.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",641
                                	;[642] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",642
                                	;[643] CONST BUTTON_TOP_LEFT				= $A0		' Top left and top right are the same button.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",643
                                	;[644] CONST BUTTON_TOP_RIGHT				= $A0		' Note: Bit 6 is low.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",644
                                	;[645] CONST BUTTON_BOTTOM_LEFT			= $60		' Note: Bit 7 is low.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",645
                                	;[646] CONST BUTTON_BOTTOM_RIGHT			= $C0		' Note: Bit 5 is low
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",646
                                	;[647] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",647
                                	;[648] REM Abbreviated versions.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",648
                                	;[649] CONST BUTTON_1						= $A0		' Top left or top right.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",649
                                	;[650] CONST BUTTON_2						= $60		' Bottom left.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",650
                                	;[651] CONST BUTTON_3						= $C0		' Bottom right.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",651
                                	;[652] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",652
                                	;[653] REM Mask.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",653
                                	;[654] CONST BUTTON_MASK					= $E0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",654
                                	;[655] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",655
                                	;[656] REM /////////////////////////////////////////////////////////////////////////
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",656
                                	;[657] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",657
                                	;[658] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",658
                                	;[659] REM Programmable Sound Generator (PSG)
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",659
                                	;[660] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",660
                                	;[661] REM Notes:
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",661
                                	;[662] REM - For use with the SOUND command
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",662
                                	;[663] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",663
                                	;[664] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",664
                                	;[665] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",665
                                	;[666] REM Internal sound hardware.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",666
                                	;[667] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",667
                                	;[668] CONST PSG_CHANNELA					= 0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",668
                                	;[669] CONST PSG_CHANNELB					= 1
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",669
                                	;[670] CONST PSG_CHANNELC					= 2
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",670
                                	;[671] CONST PSG_ENVELOPE					= 3
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",671
                                	;[672] CONST PSG_MIXER						= 4
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",672
                                	;[673] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",673
                                	;[674] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",674
                                	;[675] REM ECS sound hardware.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",675
                                	;[676] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",676
                                	;[677] CONST PSG_ECS_CHANNELA				= 5
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",677
                                	;[678] CONST PSG_ECS_CHANNELB				= 6
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",678
                                	;[679] CONST PSG_ECS_CHANNELC				= 7
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",679
                                	;[680] CONST PSG_ECS_ENVELOPE				= 8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",680
                                	;[681] CONST PSG_ECS_MIXER					= 9
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",681
                                	;[682] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",682
                                	;[683] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",683
                                	;[684] REM PSG - Volume control.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",684
                                	;[685] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",685
                                	;[686] REM Notes:
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",686
                                	;[687] REM - For use in the volume field of the SOUND command.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",687
                                	;[688] REM - Internal channels: PSG_CHANNELA, PSG_CHANNELB, PSG_CHANNELC
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",688
                                	;[689] REM - ECS channels: PSG_ECS_CHANNELA, PSG_ECS_CHANNELB, PSG_ECS_CHANNELC
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",689
                                	;[690] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",690
                                	;[691] CONST PSG_VOLUME_MAX				= 15	' Maximum channel volume.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",691
                                	;[692] CONST PSG_ENVELOPE_ENABLE			= 48	' Channel volume is controlled by envelope generator.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",692
                                	;[693] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",693
                                	;[694] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",694
                                	;[695] REM PSG - Mixer control.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",695
                                	;[696] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",696
                                	;[697] REM Notes:
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",697
                                	;[698] REM - Internal channel: PSG_MIXER
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",698
                                	;[699] REM - ECS channel: PSG_ECS_MIXER
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",699
                                	;[700] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",700
                                	;[701] CONST PSG_TONE_CHANNELA_DISABLE		= $01	' Disable channel A tone.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",701
                                	;[702] CONST PSG_TONE_CHANNELB_DISABLE		= $02	' Disable channel B tone.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",702
                                	;[703] CONST PSG_TONE_CHANNELC_DISABLE		= $04	' Disable channel C tone.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",703
                                	;[704] CONST PSG_NOISE_CHANNELA_DISABLE	= $08	' Disable channel A noise.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",704
                                	;[705] CONST PSG_NOISE_CHANNELB_DISABLE	= $10	' Disable channel B noise.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",705
                                	;[706] CONST PSG_NOISE_CHANNELC_DISABLE	= $20	' Disable channel C noise.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",706
                                	;[707] CONST PSG_MIXER_DEFAULT				= $38 	' All notes enabled. all noise disabled.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",707
                                	;[708] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",708
                                	;[709] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",709
                                	;[710] REM PSG - Envelope control.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",710
                                	;[711] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",711
                                	;[712] REM Notes:
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",712
                                	;[713] REM - Internal channel: PSG_ENVELOPE
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",713
                                	;[714] REM - ECS channel: PSG_ECS_ENVELOPE
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",714
                                	;[715] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",715
                                	;[716] CONST PSG_ENVELOPE_HOLD								= $01
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",716
                                	;[717] CONST PSG_ENVELOPE_ALTERNATE						= $02
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",717
                                	;[718] CONST PSG_ENVELOPE_ATTACK							= $04
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",718
                                	;[719] CONST PSG_ENVELOPE_CONTINUE							= $08
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",719
                                	;[720] CONST PSG_ENVELOPE_SINGLE_SHOT_RAMP_DOWN_AND_OFF	= $00 '\______
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",720
                                	;[721] CONST PSG_ENVELOPE_SINGLE_SHOT_RAMP_UP_AND_OFF		= $04 '/______
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",721
                                	;[724] CONST PSG_ENVELOPE_CYCLE_RAMP_DOWN_SAWTOOTH			= $08 '\\\\\\CONST PSG_ENVELOPE_CYCLE_RAMP_DOWN_TRIANGLE			= $0A '\/\/\/CONST PSG_ENVELOPE_SINGLE_SHOT_RAMP_DOWN_AND_MAX	= $0B '\^^^^^^
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",724
                                	;[725] CONST PSG_ENVELOPE_CYCLE_RAMP_UP_SAWTOOTH			= $0C '///////
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",725
                                	;[726] CONST PSG_ENVELOPE_SINGLE_SHOT_RAMP_UP_AND_MAX		= $0D '/^^^^^^
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",726
                                	;[727] CONST PSG_ENVELOPE_CYCLE_RAMP_UP_TRIANGLE			= $0E '/\/\/\/
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",727
                                	;[728] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",728
                                	;[729] REM /////////////////////////////////////////////////////////////////////////
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",729
                                	;[730] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",730
                                	;[731] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",731
                                	;[732] REM Useful functions.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",732
                                	;[733] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",733
                                	;[734] DEF FN screenpos(aColumn, aRow)				=               (((aRow)*BACKGROUND_COLUMNS)+(aColumn))
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",734
                                	;[735] DEF FN screenaddr(aColumn, aRow)			= (BACKTAB_ADDR+(((aRow)*BACKGROUND_COLUMNS)+(aColumn)))
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",735
                                	;[736] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",736
                                	;[737] DEF FN setspritex(aSpriteNo,anXPosition)	= #mobshadow(aSpriteNo  )=(#mobshadow(aSpriteNo  ) and $ff00)+anXPosition
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",737
                                	;[738] DEF FN setspritey(aSpriteNo,aYPosition)		= #mobshadow(aSpriteNo+8)=(#mobshadow(aSpriteNo+8) and $ff80)+aYPosition
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",738
                                	;[739] DEF FN resetsprite(aSpriteNo)				= sprite aSpriteNo, 0, 0, 0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",739
                                	;[740] DEF FN togglespritevisible(aSpriteNo)		= #mobshadow(aSpriteNo   )=#mobshadow(aSpriteNo)    xor VISIBLE
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",740
                                	;[741] DEF FN togglespritehit(aSpriteNo)			= #mobshadow(aSpriteNo   )=#mobshadow(aSpriteNo)    xor HIT
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",741
                                	;[742] DEF FN togglespritebehind(aSpriteNo)		= #mobshadow(aSpriteNo+16)=#mobshadow(aSpriteNo+16) xor BEHIND
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",742
                                	;[743] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",743
                                	;[744] REM /////////////////////////////////////////////////////////////////////////
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",744
                                	;[745] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",745
                                	;[746] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",746
                                	;[747] REM END
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",747
                                	;[748] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",748
                                	;ENDFILE
                                	;FILE C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS
                                	;[19] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",19
                                	;[20] CONST CARD_WIDTH = 8		' Width of a background card, in pixels
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",20
                                	;[21] CONST CARD_HEIGHT = 8		' Height of a background card, in pixels
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",21
                                	;[22] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",22
                                	;[23] dim objectX(3), objectY(3), object(3) 'objectX keeps track of which lanes the object is using the card location, objectY keeps track of the y position for animation, object keeps track of the object in each lane
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",23
                                	;[24] dim #objectColor(4)
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",24
                                	;[25] ' 0 = nothing
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",25
                                	;[26] ' 1 = rock
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",26
                                	;[27] ' 2 = coin
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",27
                                	;[28] ' 3 = apple (extra live)
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",28
                                	;[29] ' 4 - 6 = power up
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",29
                                	;[30] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",30
                                	;[31] #objectColor(0) = SPR_GREEN '^^^^ colors for object ^^^^
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",31
5084   02B8 0005                	MVII #5,R0
5086   0240 030B                	MVO R0,Q6
                                	;[32] #objectColor(1) = SPR_GREY
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",32
5088   02B8 1000                	MVII #4096,R0
508A   0240 030C                	MVO R0,Q6+1
                                	;[33] #objectColor(2) = SPR_YELLOW
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",33
508C   02B8 0006                	MVII #6,R0
508E   0240 030D                	MVO R0,Q6+2
                                	;[34] #objectColor(3) = SPR_RED
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",34
5090   02B8 0002                	MVII #2,R0
5092   0240 030E                	MVO R0,Q6+3
                                	;[35] #objectColor(4) = SPR_BLUE
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",35
5094   02B8 0001                	MVII #1,R0
5096   0240 030F                	MVO R0,Q6+4
                                	;[36] #objectColor(5) = SPR_BLACK
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",36
5098   01C0                     	CLRR R0
5099   0240 0310                	MVO R0,Q6+5
                                	;[37] #objectColor(6) = SPR_GREEN
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",37
509B   02B8 0005                	MVII #5,R0
509D   0240 0311                	MVO R0,Q6+6
                                	;[38] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",38
                                	;[39] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",39
                                	;[40] objectX(0) = 4 'range 0 - 19
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",40
509F   02B8 0004                	MVII #4,R0
50A1   0240 0121                	MVO R0,Q3
                                	;[41] objectX(1) = 7
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",41
50A3   02B8 0007                	MVII #7,R0
50A5   0240 0122                	MVO R0,Q3+1
                                	;[42] objectX(2) = 9
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",42
50A7   02B8 0009                	MVII #9,R0
50A9   0240 0123                	MVO R0,Q3+2
                                	;[43] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",43
                                	;[44] for a = 0 to 2
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",44
50AB   01C0                     	CLRR R0
50AC   0240 010C                	MVO R0,V1
0x50AE                          T1:
                                	;[45]     objectY(a) = random(3)
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",45
50AE   02B9 0003                	MVII #3,R1
50B0   0004 0160 03DD           	CALL _next_random
50B3   0004 0164 0309           	CALL qs_mpy8
50B6   0040                     	SWAP R0
50B7   03B8 00FF                	ANDI #255,R0
50B9   02BB 0124                	MVII #Q4,R3
50BB   02C3 010C                	ADD V1,R3
50BD   0258                     	MVO@ R0,R3
                                	;[46] 	object(a) = 2
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",46
50BE   02B8 0002                	MVII #2,R0
50C0   02FB FFFA                	ADDI #(Q5-Q4) AND $FFFF,R3
50C2   0258                     	MVO@ R0,R3
                                	;[47] next a
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",47
50C3   0280 010C                	MVI V1,R0
50C5   0008                     	INCR R0
50C6   0240 010C                	MVO R0,V1
50C8   0378 0002                	CMPI #2,R0
50CA   0226 001D                	BLE T1
                                	;[48] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",48
                                	;[49] playerX = random(3)
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",49
50CC   02B9 0003                	MVII #3,R1
50CE   0004 0160 03DD           	CALL _next_random
50D1   0004 0164 0309           	CALL qs_mpy8
50D4   0040                     	SWAP R0
50D5   03B8 00FF                	ANDI #255,R0
50D7   0240 0118                	MVO R0,V2
                                	;[50] #playerColor = SPR_RED 'color of character
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",50
50D9   02B8 0002                	MVII #2,R0
50DB   0240 0309                	MVO R0,V3
                                	;[51] playerDX = 1 'rate of frame change
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",51
50DD   02B8 0001                	MVII #1,R0
50DF   0240 0116                	MVO R0,V4
                                	;[52] playerY = 10 'player y  position
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",52
50E1   02B8 000A                	MVII #10,R0
50E3   0240 0119                	MVO R0,V5
                                	;[53] playerF = 2	'player first frame
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",53
50E5   02B8 0002                	MVII #2,R0
50E7   0240 0117                	MVO R0,V6
                                	;[54] invisible = 0 'activation of power ups
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",54
50E9   01C0                     	CLRR R0
50EA   0240 0112                	MVO R0,V7
                                	;[55] bonus_exp = 0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",55
50EC   0240 010D                	MVO R0,V8
                                	;[56] bonus_lives = 0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",56
50EE   0034                     	NOP
50EF   0240 010E                	MVO R0,V9
                                	;[57] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",57
                                	;[58] chance = 0 'used to determinate which object to show
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",58
50F1   0240 010F                	MVO R0,V10
                                	;[59] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",59
                                	;[60] 'Level ajustament
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",60
                                	;[61] dificulty = 1 'level's dificulty
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",61
50F3   02B8 0001                	MVII #1,R0
50F5   0240 0110                	MVO R0,V11
                                	;[62] #maximunScore = 100 'level's score to pass it
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",62
50F7   02B8 0064                	MVII #100,R0
50F9   0240 0308                	MVO R0,V12
                                	;[63] dim percentage(4) 'keep track of the likelihood of an object appearing
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",63
                                	;[64] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",64
                                	;[65] const highestDifficulty = 7 'highest dificulty possible
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",65
                                	;[66] scene = 0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",66
50FB   01C0                     	CLRR R0
50FC   0240 011B                	MVO R0,V13
                                	;[67] jump = 0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",67
50FE   0240 0113                	MVO R0,V14
                                	;[68] #score = 0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",68
5100   0034                     	NOP
5101   0240 030A                	MVO R0,V15
                                	;[69] heartrate = 0 'animation for heart
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",69
5103   0240 0111                	MVO R0,V16
                                	;[70] lives = 3
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",70
5105   02B8 0003                	MVII #3,R0
5107   0240 0115                	MVO R0,V17
                                	;[71] level = 1
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",71
5109   02B8 0001                	MVII #1,R0
510B   0240 0114                	MVO R0,V18
                                	;[72] univclock=0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",72
510D   01C0                     	CLRR R0
510E   0240 011D                	MVO R0,V19
                                	;[73] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",73
                                	;[74] street_lineY = 0 'road lines tracking
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",74
5110   0240 011C                	MVO R0,V20
                                	;[75] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",75
                                	;[76] 'MODE   SCREEN_COLOR_STACK, STACK_GREEN, STACK_BLACK, STACK_GREEN, STACK_BLACK
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",76
                                	;[77] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",77
                                	;[78] wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",78
5112   0004 0160 02FA           	CALL _wait
                                	;[79] DEFINE 0,16,screen_bitmaps_0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",79
5115   01C0                     	CLRR R0
5116   0240 0105                	MVO R0,_gram_target
5118   02B8 0010                	MVII #16,R0
511A   0240 0106                	MVO R0,_gram_total
511C   02B8 611A                	MVII #Q8,R0
511E   0240 033C                	MVO R0,_gram_bitmap
                                	;[80] wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",80
5120   0004 0160 02FA           	CALL _wait
                                	;[81] DEFINE 16,16,screen_bitmaps_1
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",81
5123   02B8 0010                	MVII #16,R0
5125   0240 0105                	MVO R0,_gram_target
5127   0240 0106                	MVO R0,_gram_total
5129   02B8 615A                	MVII #Q9,R0
512B   0240 033C                	MVO R0,_gram_bitmap
                                	;[82] wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",82
512D   0004 0160 02FA           	CALL _wait
                                	;[83] DEFINE 32,16,screen_bitmaps_2
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",83
5130   02B8 0020                	MVII #32,R0
5132   0240 0105                	MVO R0,_gram_target
5134   02B8 0010                	MVII #16,R0
5136   0240 0106                	MVO R0,_gram_total
5138   02B8 619A                	MVII #Q10,R0
513A   0240 033C                	MVO R0,_gram_bitmap
                                	;[84] wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",84
513C   0004 0160 02FA           	CALL _wait
                                	;[85] DEFINE 48,4,screen_bitmaps_3
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",85
513F   02B8 0030                	MVII #48,R0
5141   0240 0105                	MVO R0,_gram_target
5143   02B8 0004                	MVII #4,R0
5145   0240 0106                	MVO R0,_gram_total
5147   02B8 61DA                	MVII #Q11,R0
5149   0240 033C                	MVO R0,_gram_bitmap
                                	;[86] wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",86
514B   0004 0160 02FA           	CALL _wait
                                	;[87] define 52,5, player
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",87
514E   02B8 0034                	MVII #52,R0
5150   0240 0105                	MVO R0,_gram_target
5152   02B8 0005                	MVII #5,R0
5154   0240 0106                	MVO R0,_gram_total
5156   02B8 60E2                	MVII #Q12,R0
5158   0240 033C                	MVO R0,_gram_bitmap
                                	;[88] wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",88
515A   0004 0160 02FA           	CALL _wait
                                	;[89] define 57,2, tiles
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",89
515D   02B8 0039                	MVII #57,R0
515F   0240 0105                	MVO R0,_gram_target
5161   02B8 0002                	MVII #2,R0
5163   0240 0106                	MVO R0,_gram_total
5165   02B8 60F6                	MVII #Q13,R0
5167   0240 033C                	MVO R0,_gram_bitmap
                                	;[90] wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",90
5169   0004 0160 02FA           	CALL _wait
                                	;[91] define 59,3, street
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",91
516C   02B8 003B                	MVII #59,R0
516E   0240 0105                	MVO R0,_gram_target
5170   02B8 0003                	MVII #3,R0
5172   0240 0106                	MVO R0,_gram_total
5174   02B8 60FE                	MVII #Q14,R0
5176   0240 033C                	MVO R0,_gram_bitmap
                                	;[92] wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",92
5178   0004 0160 02FA           	CALL _wait
                                	;[93] define 62,1, nothing
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",93
517B   02B8 003E                	MVII #62,R0
517D   0240 0105                	MVO R0,_gram_target
517F   02B8 0001                	MVII #1,R0
5181   0240 0106                	MVO R0,_gram_total
5183   02B8 610E                	MVII #Q15,R0
5185   0240 033C                	MVO R0,_gram_bitmap
                                	;[94] wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",94
5187   0004 0160 02FA           	CALL _wait
                                	;[95] define 63,1, rock
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",95
518A   02B8 003F                	MVII #63,R0
518C   0240 0105                	MVO R0,_gram_target
518E   02B8 0001                	MVII #1,R0
5190   0240 0106                	MVO R0,_gram_total
5192   02B8 6112                	MVII #Q16,R0
5194   0240 033C                	MVO R0,_gram_bitmap
                                	;[96] wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",96
5196   0004 0160 02FA           	CALL _wait
                                	;[97] define 64,1, coin
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",97
5199   02B8 0040                	MVII #64,R0
519B   0240 0105                	MVO R0,_gram_target
519D   02B8 0001                	MVII #1,R0
519F   0240 0106                	MVO R0,_gram_total
51A1   02B8 6116                	MVII #Q17,R0
51A3   0240 033C                	MVO R0,_gram_bitmap
                                	;[98] wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",98
51A5   0004 0160 02FA           	CALL _wait
                                	;[99] define 65,1, apple
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",99
51A8   02B8 0041                	MVII #65,R0
51AA   0240 0105                	MVO R0,_gram_target
51AC   02B8 0001                	MVII #1,R0
51AE   0240 0106                	MVO R0,_gram_total
51B0   02B8 610A                	MVII #Q18,R0
51B2   0240 033C                	MVO R0,_gram_bitmap
                                	;[100] wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",100
51B4   0004 0160 02FA           	CALL _wait
                                	;[101] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",101
                                	;[102] DEF FN SpritePosX(aColumn, anOffset) = ((aColumn + 1) * CARD_WIDTH ) + anOffset 'allows for the sprite to be used in a similar way to print at
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",102
                                	;[103] DEF FN SpritePosY(aRow, anOffset) = ((aRow    + 1) * CARD_HEIGHT) + anOffset
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",103
                                	;[104] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",104
                                	;[105] cls
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",105
51B7   0004 0150 0014           	CALL CLRSCR
                                	;[106] main:
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",106
                                	; MAIN
0x51BA                          Q19:	;[107] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",107
                                	;[108] 	IF scene = 0 THEN GOSUB scene1 'intro
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",108
51BA   0280 011B                	MVI V13,R0
51BC   0080                     	TSTR R0
51BD   020C 0003                	BNE T2
51BF   0004 0150 01E6           	CALL Q20
0x51C2                          T2:
                                	;[109] 	IF scene = 1 THEN GOSUB scene2 'game
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",109
51C2   0280 011B                	MVI V13,R0
51C4   0378 0001                	CMPI #1,R0
51C6   020C 0003                	BNE T3
51C8   0004 0150 0383           	CALL Q21
0x51CB                          T3:
                                	;[110] 	IF scene = 2 THEN GOSUB scene3 'end
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",110
51CB   0280 011B                	MVI V13,R0
51CD   0378 0002                	CMPI #2,R0
51CF   020C 0003                	BNE T4
51D1   0004 0150 03D1           	CALL Q22
0x51D4                          T4:
                                	;[111] 	IF scene = 3 THEN GOSUB scene4 'pause
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",111
51D4   0280 011B                	MVI V13,R0
51D6   0378 0003                	CMPI #3,R0
51D8   020C 0003                	BNE T5
51DA   0004 0154 01D6           	CALL Q23
0x51DD                          T5:
                                	;[112] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",112
                                	;[113] 	univclock = (univclock + 1) % 128 'used for animation and control over how offen something show up
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",113
51DD   0280 011D                	MVI V19,R0
51DF   0008                     	INCR R0
51E0   03B8 007F                	ANDI #127,R0
51E2   0240 011D                	MVO R0,V19
                                	;[114] goto main
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",114
51E4   0220 002B                	B Q19
                                	;[115] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",115
                                	;[116] scene1: procedure 'Introduction
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",116
                                	; SCENE1
0x51E6                          Q20:	PROC
51E6   0275                     	BEGIN
                                	;[117] 	wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",117
51E7   0004 0160 02FA           	CALL _wait
                                	;[118] 	print at SCREENPOS(1, 0) color CS_WHITE,"- RunnerZ"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",118
51EA   02B8 0201                	MVII #513,R0
51EC   0240 033E                	MVO R0,_screen
51EE   02B8 0007                	MVII #7,R0
51F0   0240 033F                	MVO R0,_color
51F2   0284 033E                	MVI _screen,R4
51F4   02B8 0068                	MVII #104,R0
51F6   03C0 033F                	XOR _color,R0
51F8   0260                     	MVO@ R0,R4
51F9   03F8 0068                	XORI #104,R0
51FB   0260                     	MVO@ R0,R4
51FC   03F8 0190                	XORI #400,R0
51FE   0260                     	MVO@ R0,R4
51FF   03F8 0338                	XORI #824,R0
5201   0260                     	MVO@ R0,R4
5202   03F8 00D8                	XORI #216,R0
5204   0260                     	MVO@ R0,R4
5205   0260                     	MVO@ R0,R4
5206   03F8 0058                	XORI #88,R0
5208   0260                     	MVO@ R0,R4
5209   03F8 00B8                	XORI #184,R0
520B   0260                     	MVO@ R0,R4
520C   03F8 0340                	XORI #832,R0
520E   0260                     	MVO@ R0,R4
520F   0244 033E                	MVO R4,_screen
                                	;[119] 	print at SCREENPOS(1, 1) color CS_WHITE,"- v1.0"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",119
5211   02B8 0215                	MVII #533,R0
5213   0240 033E                	MVO R0,_screen
5215   02B8 0007                	MVII #7,R0
5217   0240 033F                	MVO R0,_color
5219   0284 033E                	MVI _screen,R4
521B   02B8 0068                	MVII #104,R0
521D   03C0 033F                	XOR _color,R0
521F   0260                     	MVO@ R0,R4
5220   03F8 0068                	XORI #104,R0
5222   0260                     	MVO@ R0,R4
5223   03F8 02B0                	XORI #688,R0
5225   0260                     	MVO@ R0,R4
5226   03F8 0238                	XORI #568,R0
5228   0260                     	MVO@ R0,R4
5229   03F8 00F8                	XORI #248,R0
522B   0260                     	MVO@ R0,R4
522C   03F8 00F0                	XORI #240,R0
522E   0260                     	MVO@ R0,R4
522F   0244 033E                	MVO R4,_screen
                                	;[120] 	print at SCREENPOS(1, 2) color CS_WHITE,"- Made by: Josue"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",120
5231   02B8 0229                	MVII #553,R0
5233   0240 033E                	MVO R0,_screen
5235   02B8 0007                	MVII #7,R0
5237   0240 033F                	MVO R0,_color
5239   0284 033E                	MVI _screen,R4
523B   02B8 0068                	MVII #104,R0
523D   03C0 033F                	XOR _color,R0
523F   0260                     	MVO@ R0,R4
5240   03F8 0068                	XORI #104,R0
5242   0260                     	MVO@ R0,R4
5243   03F8 0168                	XORI #360,R0
5245   0260                     	MVO@ R0,R4
5246   03F8 0360                	XORI #864,R0
5248   0260                     	MVO@ R0,R4
5249   03F8 0028                	XORI #40,R0
524B   0260                     	MVO@ R0,R4
524C   03F8 0008                	XORI #8,R0
524E   0260                     	MVO@ R0,R4
524F   03F8 0228                	XORI #552,R0
5251   0260                     	MVO@ R0,R4
5252   03F8 0210                	XORI #528,R0
5254   0260                     	MVO@ R0,R4
5255   03F8 00D8                	XORI #216,R0
5257   0260                     	MVO@ R0,R4
5258   03F8 0218                	XORI #536,R0
525A   0260                     	MVO@ R0,R4
525B   03F8 00D0                	XORI #208,R0
525D   0260                     	MVO@ R0,R4
525E   03F8 0150                	XORI #336,R0
5260   0260                     	MVO@ R0,R4
5261   03F8 0328                	XORI #808,R0
5263   0260                     	MVO@ R0,R4
5264   03F8 00E0                	XORI #224,R0
5266   0260                     	MVO@ R0,R4
5267   03F8 0030                	XORI #48,R0
5269   0260                     	MVO@ R0,R4
526A   03F8 0080                	XORI #128,R0
526C   0260                     	MVO@ R0,R4
526D   0244 033E                	MVO R4,_screen
                                	;[121] 	print at SCREENPOS(1, 3) color CS_WHITE,"- Github: JosueCom"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",121
526F   02B8 023D                	MVII #573,R0
5271   0240 033E                	MVO R0,_screen
5273   02B8 0007                	MVII #7,R0
5275   0240 033F                	MVO R0,_color
5277   0284 033E                	MVI _screen,R4
5279   02B8 0068                	MVII #104,R0
527B   03C0 033F                	XOR _color,R0
527D   0260                     	MVO@ R0,R4
527E   03F8 0068                	XORI #104,R0
5280   0260                     	MVO@ R0,R4
5281   03F8 0138                	XORI #312,R0
5283   0260                     	MVO@ R0,R4
5284   03F8 0370                	XORI #880,R0
5286   0260                     	MVO@ R0,R4
5287   03F8 00E8                	XORI #232,R0
5289   0260                     	MVO@ R0,R4
528A   03F8 00E0                	XORI #224,R0
528C   0260                     	MVO@ R0,R4
528D   03F8 00E8                	XORI #232,R0
528F   0260                     	MVO@ R0,R4
5290   03F8 00B8                	XORI #184,R0
5292   0260                     	MVO@ R0,R4
5293   03F8 02C0                	XORI #704,R0
5295   0260                     	MVO@ R0,R4
5296   03F8 00D0                	XORI #208,R0
5298   0260                     	MVO@ R0,R4
5299   03F8 0150                	XORI #336,R0
529B   0260                     	MVO@ R0,R4
529C   03F8 0328                	XORI #808,R0
529E   0260                     	MVO@ R0,R4
529F   03F8 00E0                	XORI #224,R0
52A1   0260                     	MVO@ R0,R4
52A2   03F8 0030                	XORI #48,R0
52A4   0260                     	MVO@ R0,R4
52A5   03F8 0080                	XORI #128,R0
52A7   0260                     	MVO@ R0,R4
52A8   03F8 0330                	XORI #816,R0
52AA   0260                     	MVO@ R0,R4
52AB   03F8 0360                	XORI #864,R0
52AD   0260                     	MVO@ R0,R4
52AE   03F8 0010                	XORI #16,R0
52B0   0260                     	MVO@ R0,R4
52B1   0244 033E                	MVO R4,_screen
                                	;[122] 	print at SCREENPOS(0, 10) color CS_WHITE, "'Right' to continue"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",122
52B3   02B8 02C8                	MVII #712,R0
52B5   0240 033E                	MVO R0,_screen
52B7   02B8 0007                	MVII #7,R0
52B9   0240 033F                	MVO R0,_color
52BB   0284 033E                	MVI _screen,R4
52BD   02B8 0038                	MVII #56,R0
52BF   03C0 033F                	XOR _color,R0
52C1   0260                     	MVO@ R0,R4
52C2   03F8 01A8                	XORI #424,R0
52C4   0260                     	MVO@ R0,R4
52C5   03F8 03D8                	XORI #984,R0
52C7   0260                     	MVO@ R0,R4
52C8   03F8 0070                	XORI #112,R0
52CA   0260                     	MVO@ R0,R4
52CB   03F8 0078                	XORI #120,R0
52CD   0260                     	MVO@ R0,R4
52CE   03F8 00E0                	XORI #224,R0
52D0   0260                     	MVO@ R0,R4
52D1   03F8 0298                	XORI #664,R0
52D3   0260                     	MVO@ R0,R4
52D4   03F8 0038                	XORI #56,R0
52D6   0260                     	MVO@ R0,R4
52D7   03F8 02A0                	XORI #672,R0
52D9   0260                     	MVO@ R0,R4
52DA   03F8 00D8                	XORI #216,R0
52DC   0260                     	MVO@ R0,R4
52DD   03F8 0278                	XORI #632,R0
52DF   0260                     	MVO@ R0,R4
52E0   03F8 0218                	XORI #536,R0
52E2   0260                     	MVO@ R0,R4
52E3   03F8 0060                	XORI #96,R0
52E5   0260                     	MVO@ R0,R4
52E6   03F8 0008                	XORI #8,R0
52E8   0260                     	MVO@ R0,R4
52E9   03F8 00D0                	XORI #208,R0
52EB   0260                     	MVO@ R0,R4
52EC   03F8 00E8                	XORI #232,R0
52EE   0260                     	MVO@ R0,R4
52EF   03F8 0038                	XORI #56,R0
52F1   0260                     	MVO@ R0,R4
52F2   03F8 00D8                	XORI #216,R0
52F4   0260                     	MVO@ R0,R4
52F5   03F8 0080                	XORI #128,R0
52F7   0260                     	MVO@ R0,R4
52F8   0244 033E                	MVO R4,_screen
                                	;[123] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",123
                                	;[124] 	if univclock%8 = 0 then heartrate = (heartrate + 1) % 2 : playerF = playerF + playerDX : if playerF >= 4 OR playerF <= 0 then playerDX = playerDX * -1 'frame to show during animation
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",124
52FA   0280 011D                	MVI V19,R0
52FC   03B8 0007                	ANDI #7,R0
52FE   020C 003B                	BNE T6
5300   0280 0111                	MVI V16,R0
5302   0008                     	INCR R0
5303   03B8 0001                	ANDI #1,R0
5305   0240 0111                	MVO R0,V16
5307   0280 0117                	MVI V6,R0
5309   02C0 0116                	ADD V4,R0
530B   0240 0117                	MVO R0,V6
530D   0280 0117                	MVI V6,R0
530F   0378 0004                	CMPI #4,R0
5311   02B8 FFFF                	MVII #-1,R0
5313   020D 0001                	BGE $+3
5315   0008                     	INCR R0
5316   0281 0117                	MVI V6,R1
5318   0379 0000                	CMPI #0,R1
531A   02B9 FFFF                	MVII #-1,R1
531C   0206 0001                	BLE $+3
531E   0009                     	INCR R1
531F   0019                     	COMR R1
5320   0188                     	ANDR R1,R0
5321   0019                     	COMR R1
5322   01C8                     	XORR R1,R0
5323   0204 0016                	BEQ T7
5325   0280 0116                	MVI V4,R0
5327   02BD FFFF                	MVII #65535,R5
5329   01E4                     	CLRR R4
532A   0006                     	CLRC
532B   0070                     	RRC R0,1
532C   0204 0007                	BEQ T9
0x532E                          T8:
532E   0209 0001                	BNC $+3
5330   00EC                     	ADDR R5,R4
5331   00ED                     	ADDR R5,R5
5332   0078                     	SARC R0,1
5333   022C 0006                	BNE T8
0x5335                          T9:
5335   0209 0001                	BNC $+3
5337   00EC                     	ADDR R5,R4
5338   00A0                     	MOVR R4,R0
5339   0240 0116                	MVO R0,V4
0x533B                          T7:
0x533B                          T6:
                                	;[125] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",125
                                	;[126] 	SPRITE 0, SpritePosX(9, 0) + VISIBLE + ZOOMX2, SpritePosY(5, 0) + VISIBLE + ZOOMY2, SPR52 + (8)*playerF + SPR_RED 'player animation
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",126
533B   02B8 0650                	MVII #1616,R0
533D   0240 0340                	MVO R0,_mobs
533F   02B8 0330                	MVII #816,R0
5341   0240 0348                	MVO R0,_mobs+8
5343   0280 0117                	MVI V6,R0
5345   004C                     	SLL R0,2
5346   00C0                     	ADDR R0,R0
5347   02F8 09A2                	ADDI #2466,R0
5349   0240 0350                	MVO R0,_mobs+16
                                	;[127] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",127
                                	;[128] 	if heartrate then print at SCREENPOS(19, 11) color CS_WHITE,">" else print at SCREENPOS(19, 11) color CS_WHITE," " ' right arrow animation
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",128
534B   0280 0111                	MVI V16,R0
534D   0080                     	TSTR R0
534E   0204 0013                	BEQ T10
5350   02B8 02EF                	MVII #751,R0
5352   0240 033E                	MVO R0,_screen
5354   02B8 0007                	MVII #7,R0
5356   0240 033F                	MVO R0,_color
5358   0284 033E                	MVI _screen,R4
535A   02B8 00F0                	MVII #240,R0
535C   03C0 033F                	XOR _color,R0
535E   0260                     	MVO@ R0,R4
535F   0244 033E                	MVO R4,_screen
5361   0200 000D                	B T11
0x5363                          T10:
5363   02B8 02EF                	MVII #751,R0
5365   0240 033E                	MVO R0,_screen
5367   02B8 0007                	MVII #7,R0
5369   0240 033F                	MVO R0,_color
536B   0284 033E                	MVI _screen,R4
536D   0260                     	MVO@ R0,R4
536E   0244 033E                	MVO R4,_screen
0x5370                          T11:
                                	;[129] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",129
                                	;[130] 	IF cont1.right THEN scene = 1: mode 1 : gosub levelupAnimation 'go to game once pressed
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",130
5370   0280 01FF                	MVI 511,R0
5372   0018                     	COMR R0
5373   03B8 0002                	ANDI #2,R0
5375   0204 000B                	BEQ T12
5377   02B8 0001                	MVII #1,R0
5379   0240 011B                	MVO R0,V13
537B   02B8 0003                	MVII #3,R0
537D   0240 0109                	MVO R0,_mode_select
537F   0004 0158 0357           	CALL Q25
0x5382                          T12:
                                	;[131] 	return
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",131
5382   02B7                     	RETURN
                                	;[132] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",132
                                	;[133] end
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",133
                                	ENDP
                                	;[134] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",134
                                	;[135] scene2: procedure
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",135
                                	; SCENE2
0x5383                          Q21:	PROC
5383   0275                     	BEGIN
                                	;[136] 	SCREEN screen_cards 'draw background
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",136
5384   02BB 61DE                	MVII #Q27,R3
5386   02BA 0200                	MVII #512,R2
5388   02B9 0014                	MVII #20,R1
538A   02B8 000C                	MVII #12,R0
538C   0004 0160 02E8           	CALL CPYBLK
                                	;[137] 	gosub determinelevel 'determinate properties of the current level
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",137
538F   0004 015C 0252           	CALL Q28
                                	;[138] 	gosub background 'draw extra things in the background such as score and lives
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",138
5392   0004 0154 03AD           	CALL Q29
                                	;[139] 	gosub drawObjects 'draw object and determinate their properties and behavior
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",139
5395   0004 0158 000F           	CALL Q30
                                	;[140] 	gosub drawPlayer  'draw player and determinate his behavior
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",140
5398   0004 0158 00BE           	CALL Q31
                                	;[141] 	'IF FRAME AND 1 THEN GOSUB move_player
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",141
                                	;[142] 	'IF FRAME AND 1 THEN GOSUB enemy
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",142
                                	;[143] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",143
                                	;[144] 	if lives <= 0 then gosub clearAll : gosub clearPower : scene = 2 'if their is not more lives go to the end
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",144
539B   0280 0115                	MVI V17,R0
539D   0378 0000                	CMPI #0,R0
539F   020E 000A                	BGT T13
53A1   0004 015C 03B5           	CALL Q32
53A4   0004 015C 03F6           	CALL Q33
53A7   02B8 0002                	MVII #2,R0
53A9   0240 011B                	MVO R0,V13
0x53AB                          T13:
                                	;[145] 	if lives > 99 then lives = 10 : invisible = 100 'if lives if greater than what the screen can show give it 10 lives and the power up invisible for a long period
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",145
53AB   0280 0115                	MVI V17,R0
53AD   0378 0063                	CMPI #99,R0
53AF   0206 0008                	BLE T14
53B1   02B8 000A                	MVII #10,R0
53B3   0240 0115                	MVO R0,V17
53B5   02B8 0064                	MVII #100,R0
53B7   0240 0112                	MVO R0,V7
0x53B9                          T14:
                                	;[146] 	if #score >= #maximunScore then level = level + 1 : gosub clearPower : #score = 0 : gosub levelupAnimation 'if score obtained, move to the next level
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",146
53B9   0280 030A                	MVI V15,R0
53BB   0340 0308                	CMP V12,R0
53BD   0205 000E                	BLT T15
53BF   0280 0114                	MVI V18,R0
53C1   0008                     	INCR R0
53C2   0240 0114                	MVO R0,V18
53C4   0004 015C 03F6           	CALL Q33
53C7   01C0                     	CLRR R0
53C8   0240 030A                	MVO R0,V15
53CA   0004 0158 0357           	CALL Q25
0x53CD                          T15:
                                	;[147] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",147
                                	;[148] 	wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",148
53CD   0004 0160 02FA           	CALL _wait
                                	;[149] 	return
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",149
53D0   02B7                     	RETURN
                                	;[150] end
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",150
                                	ENDP
                                	;[151] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",151
                                	;[152] scene3: procedure 'End scene
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",152
                                	; SCENE3
0x53D1                          Q22:	PROC
53D1   0275                     	BEGIN
                                	;[153] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",153
                                	;[154] 	MODE   SCREEN_COLOR_STACK, STACK_BLACK, STACK_BLACK, STACK_GREEN, STACK_BLACK
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",154
53D2   02B8 5000                	MVII #20480,R0
53D4   0240 033F                	MVO R0,_color
53D6   02B8 0002                	MVII #2,R0
53D8   0240 0109                	MVO R0,_mode_select
                                	;[155] 	wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",155
53DA   0004 0160 02FA           	CALL _wait
                                	;[156] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",156
                                	;[157] 	print at SCREENPOS(2, 2) color CS_BLUE,"Made by: Josue"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",157
53DD   02B8 022A                	MVII #554,R0
53DF   0240 033E                	MVO R0,_screen
53E1   02B8 0001                	MVII #1,R0
53E3   0240 033F                	MVO R0,_color
53E5   0284 033E                	MVI _screen,R4
53E7   02B8 0168                	MVII #360,R0
53E9   03C0 033F                	XOR _color,R0
53EB   0260                     	MVO@ R0,R4
53EC   03F8 0360                	XORI #864,R0
53EE   0260                     	MVO@ R0,R4
53EF   03F8 0028                	XORI #40,R0
53F1   0260                     	MVO@ R0,R4
53F2   03F8 0008                	XORI #8,R0
53F4   0260                     	MVO@ R0,R4
53F5   03F8 0228                	XORI #552,R0
53F7   0260                     	MVO@ R0,R4
53F8   03F8 0210                	XORI #528,R0
53FA   0260                     	MVO@ R0,R4
53FB   03F8 00D8                	XORI #216,R0
53FD   0260                     	MVO@ R0,R4
53FE   03F8 0218                	XORI #536,R0
5400   0260                     	MVO@ R0,R4
5401   03F8 00D0                	XORI #208,R0
5403   0260                     	MVO@ R0,R4
5404   03F8 0150                	XORI #336,R0
5406   0260                     	MVO@ R0,R4
5407   03F8 0328                	XORI #808,R0
5409   0260                     	MVO@ R0,R4
540A   03F8 00E0                	XORI #224,R0
540C   0260                     	MVO@ R0,R4
540D   03F8 0030                	XORI #48,R0
540F   0260                     	MVO@ R0,R4
5410   03F8 0080                	XORI #128,R0
5412   0260                     	MVO@ R0,R4
5413   0244 033E                	MVO R4,_screen
                                	;[158] 	print at SCREENPOS(2, 3) color CS_WHITE,"Press 'Right' To:"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",158
5415   02B8 023E                	MVII #574,R0
5417   0240 033E                	MVO R0,_screen
5419   02B8 0007                	MVII #7,R0
541B   0240 033F                	MVO R0,_color
541D   0284 033E                	MVI _screen,R4
541F   02B8 0180                	MVII #384,R0
5421   03C0 033F                	XOR _color,R0
5423   0260                     	MVO@ R0,R4
5424   03F8 0310                	XORI #784,R0
5426   0260                     	MVO@ R0,R4
5427   03F8 00B8                	XORI #184,R0
5429   0260                     	MVO@ R0,R4
542A   03F8 00B0                	XORI #176,R0
542C   0260                     	MVO@ R0,R4
542D   0260                     	MVO@ R0,R4
542E   03F8 0298                	XORI #664,R0
5430   0260                     	MVO@ R0,R4
5431   03F8 0038                	XORI #56,R0
5433   0260                     	MVO@ R0,R4
5434   03F8 01A8                	XORI #424,R0
5436   0260                     	MVO@ R0,R4
5437   03F8 03D8                	XORI #984,R0
5439   0260                     	MVO@ R0,R4
543A   03F8 0070                	XORI #112,R0
543C   0260                     	MVO@ R0,R4
543D   03F8 0078                	XORI #120,R0
543F   0260                     	MVO@ R0,R4
5440   03F8 00E0                	XORI #224,R0
5442   0260                     	MVO@ R0,R4
5443   03F8 0298                	XORI #664,R0
5445   0260                     	MVO@ R0,R4
5446   03F8 0038                	XORI #56,R0
5448   0260                     	MVO@ R0,R4
5449   03F8 01A0                	XORI #416,R0
544B   0260                     	MVO@ R0,R4
544C   03F8 03D8                	XORI #984,R0
544E   0260                     	MVO@ R0,R4
544F   03F8 02A8                	XORI #680,R0
5451   0260                     	MVO@ R0,R4
5452   0244 033E                	MVO R4,_screen
                                	;[159] 	print at SCREENPOS(2, 4) color CS_WHITE,"> Play Again"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",159
5454   02B8 0252                	MVII #594,R0
5456   0240 033E                	MVO R0,_screen
5458   02B8 0007                	MVII #7,R0
545A   0240 033F                	MVO R0,_color
545C   0284 033E                	MVI _screen,R4
545E   02B8 00F0                	MVII #240,R0
5460   03C0 033F                	XOR _color,R0
5462   0260                     	MVO@ R0,R4
5463   03F8 00F0                	XORI #240,R0
5465   0260                     	MVO@ R0,R4
5466   03F8 0180                	XORI #384,R0
5468   0260                     	MVO@ R0,R4
5469   03F8 03E0                	XORI #992,R0
546B   0260                     	MVO@ R0,R4
546C   03F8 0068                	XORI #104,R0
546E   0260                     	MVO@ R0,R4
546F   03F8 00C0                	XORI #192,R0
5471   0260                     	MVO@ R0,R4
5472   03F8 02C8                	XORI #712,R0
5474   0260                     	MVO@ R0,R4
5475   03F8 0108                	XORI #264,R0
5477   0260                     	MVO@ R0,R4
5478   03F8 0330                	XORI #816,R0
547A   0260                     	MVO@ R0,R4
547B   03F8 0030                	XORI #48,R0
547D   0260                     	MVO@ R0,R4
547E   03F8 0040                	XORI #64,R0
5480   0260                     	MVO@ R0,R4
5481   03F8 0038                	XORI #56,R0
5483   0260                     	MVO@ R0,R4
5484   0244 033E                	MVO R4,_screen
                                	;[160] 	print at SCREENPOS(2, 5) color CS_WHITE,"Press 'Left' To:"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",160
5486   02B8 0266                	MVII #614,R0
5488   0240 033E                	MVO R0,_screen
548A   02B8 0007                	MVII #7,R0
548C   0240 033F                	MVO R0,_color
548E   0284 033E                	MVI _screen,R4
5490   02B8 0180                	MVII #384,R0
5492   03C0 033F                	XOR _color,R0
5494   0260                     	MVO@ R0,R4
5495   03F8 0310                	XORI #784,R0
5497   0260                     	MVO@ R0,R4
5498   03F8 00B8                	XORI #184,R0
549A   0260                     	MVO@ R0,R4
549B   03F8 00B0                	XORI #176,R0
549D   0260                     	MVO@ R0,R4
549E   0260                     	MVO@ R0,R4
549F   03F8 0298                	XORI #664,R0
54A1   0260                     	MVO@ R0,R4
54A2   03F8 0038                	XORI #56,R0
54A4   0260                     	MVO@ R0,R4
54A5   03F8 0158                	XORI #344,R0
54A7   0260                     	MVO@ R0,R4
54A8   03F8 0348                	XORI #840,R0
54AA   0260                     	MVO@ R0,R4
54AB   03F8 0018                	XORI #24,R0
54AD   0260                     	MVO@ R0,R4
54AE   03F8 0090                	XORI #144,R0
54B0   0260                     	MVO@ R0,R4
54B1   03F8 0298                	XORI #664,R0
54B3   0260                     	MVO@ R0,R4
54B4   03F8 0038                	XORI #56,R0
54B6   0260                     	MVO@ R0,R4
54B7   03F8 01A0                	XORI #416,R0
54B9   0260                     	MVO@ R0,R4
54BA   03F8 03D8                	XORI #984,R0
54BC   0260                     	MVO@ R0,R4
54BD   03F8 02A8                	XORI #680,R0
54BF   0260                     	MVO@ R0,R4
54C0   0244 033E                	MVO R4,_screen
                                	;[161] 	print at SCREENPOS(2, 6) color CS_WHITE,"> Quit"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",161
54C2   02B8 027A                	MVII #634,R0
54C4   0240 033E                	MVO R0,_screen
54C6   02B8 0007                	MVII #7,R0
54C8   0240 033F                	MVO R0,_color
54CA   0284 033E                	MVI _screen,R4
54CC   02B8 00F0                	MVII #240,R0
54CE   03C0 033F                	XOR _color,R0
54D0   0260                     	MVO@ R0,R4
54D1   03F8 00F0                	XORI #240,R0
54D3   0260                     	MVO@ R0,R4
54D4   03F8 0188                	XORI #392,R0
54D6   0260                     	MVO@ R0,R4
54D7   03F8 0320                	XORI #800,R0
54D9   0260                     	MVO@ R0,R4
54DA   03F8 00E0                	XORI #224,R0
54DC   0260                     	MVO@ R0,R4
54DD   03F8 00E8                	XORI #232,R0
54DF   0260                     	MVO@ R0,R4
54E0   0244 033E                	MVO R4,_screen
                                	;[162] 	if univclock%15 = 0 then heartrate = (heartrate + 1) % 2 : playerF = playerF + playerDX : if playerF >= 4 OR playerF <= 0 then playerDX = playerDX * -1
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",162
54E2   0280 011D                	MVI V19,R0
0x54E4                          T17:
54E4   0338 000F                	SUBI #15,R0
54E6   0221 0003                	BC T17
54E8   02F8 000F                	ADDI #15,R0
54EA   020C 003B                	BNE T16
54EC   0280 0111                	MVI V16,R0
54EE   0008                     	INCR R0
54EF   03B8 0001                	ANDI #1,R0
54F1   0240 0111                	MVO R0,V16
54F3   0280 0117                	MVI V6,R0
54F5   02C0 0116                	ADD V4,R0
54F7   0240 0117                	MVO R0,V6
54F9   0280 0117                	MVI V6,R0
54FB   0378 0004                	CMPI #4,R0
54FD   02B8 FFFF                	MVII #-1,R0
54FF   020D 0001                	BGE $+3
5501   0008                     	INCR R0
5502   0281 0117                	MVI V6,R1
5504   0379 0000                	CMPI #0,R1
5506   02B9 FFFF                	MVII #-1,R1
5508   0206 0001                	BLE $+3
550A   0009                     	INCR R1
550B   0019                     	COMR R1
550C   0188                     	ANDR R1,R0
550D   0019                     	COMR R1
550E   01C8                     	XORR R1,R0
550F   0204 0016                	BEQ T18
5511   0280 0116                	MVI V4,R0
5513   02BD FFFF                	MVII #65535,R5
5515   01E4                     	CLRR R4
5516   0006                     	CLRC
5517   0070                     	RRC R0,1
5518   0204 0007                	BEQ T20
0x551A                          T19:
551A   0209 0001                	BNC $+3
551C   00EC                     	ADDR R5,R4
551D   00ED                     	ADDR R5,R5
551E   0078                     	SARC R0,1
551F   022C 0006                	BNE T19
0x5521                          T20:
5521   0209 0001                	BNC $+3
5523   00EC                     	ADDR R5,R4
5524   00A0                     	MOVR R4,R0
5525   0240 0116                	MVO R0,V4
0x5527                          T18:
0x5527                          T16:
                                	;[163] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",163
                                	;[164] 	SPRITE 0, SpritePosX(9, 0) + VISIBLE + ZOOMX2, SpritePosY(7, 0) + VISIBLE + ZOOMY2, SPR52 + (8)*playerF + SPR_RED 'player animation
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",164
5527   02B8 0650                	MVII #1616,R0
5529   0240 0340                	MVO R0,_mobs
552B   02B8 0340                	MVII #832,R0
552D   0240 0348                	MVO R0,_mobs+8
552F   0280 0117                	MVI V6,R0
5531   004C                     	SLL R0,2
5532   00C0                     	ADDR R0,R0
5533   02F8 09A2                	ADDI #2466,R0
5535   0240 0350                	MVO R0,_mobs+16
                                	;[165] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",165
                                	;[166] 	'play again or end the game
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",166
                                	;[167] 	if heartrate then print at SCREENPOS(19, 11) color CS_WHITE,">" else print at SCREENPOS(19, 11) color CS_WHITE," "
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",167
5537   0280 0111                	MVI V16,R0
5539   0080                     	TSTR R0
553A   0204 0013                	BEQ T21
553C   02B8 02EF                	MVII #751,R0
553E   0240 033E                	MVO R0,_screen
5540   02B8 0007                	MVII #7,R0
5542   0240 033F                	MVO R0,_color
5544   0284 033E                	MVI _screen,R4
5546   02B8 00F0                	MVII #240,R0
5548   03C0 033F                	XOR _color,R0
554A   0260                     	MVO@ R0,R4
554B   0244 033E                	MVO R4,_screen
554D   0200 000D                	B T22
0x554F                          T21:
554F   02B8 02EF                	MVII #751,R0
5551   0240 033E                	MVO R0,_screen
5553   02B8 0007                	MVII #7,R0
5555   0240 033F                	MVO R0,_color
5557   0284 033E                	MVI _screen,R4
5559   0260                     	MVO@ R0,R4
555A   0244 033E                	MVO R4,_screen
0x555C                          T22:
                                	;[168] 	if heartrate then print at SCREENPOS(0, 11) color CS_WHITE,"<" else print at SCREENPOS(0, 11) color CS_WHITE," "
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",168
555C   0280 0111                	MVI V16,R0
555E   0080                     	TSTR R0
555F   0204 0013                	BEQ T23
5561   02B8 02DC                	MVII #732,R0
5563   0240 033E                	MVO R0,_screen
5565   02B8 0007                	MVII #7,R0
5567   0240 033F                	MVO R0,_color
5569   0284 033E                	MVI _screen,R4
556B   02B8 00E0                	MVII #224,R0
556D   03C0 033F                	XOR _color,R0
556F   0260                     	MVO@ R0,R4
5570   0244 033E                	MVO R4,_screen
5572   0200 000D                	B T24
0x5574                          T23:
5574   02B8 02DC                	MVII #732,R0
5576   0240 033E                	MVO R0,_screen
5578   02B8 0007                	MVII #7,R0
557A   0240 033F                	MVO R0,_color
557C   0284 033E                	MVI _screen,R4
557E   0260                     	MVO@ R0,R4
557F   0244 033E                	MVO R4,_screen
0x5581                          T24:
                                	;[169] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",169
                                	;[170] 	wait 'allow for time for the player to not miss press the button
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",170
5581   0004 0160 02FA           	CALL _wait
                                	;[171] 	wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",171
5584   0004 0160 02FA           	CALL _wait
                                	;[172] 	wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",172
5587   0004 0160 02FA           	CALL _wait
                                	;[173] 	wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",173
558A   0004 0160 02FA           	CALL _wait
                                	;[174] 	wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",174
558D   0004 0160 02FA           	CALL _wait
                                	;[175] 	wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",175
5590   0004 0160 02FA           	CALL _wait
                                	;[176] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",176
                                	;[177] 	'reset everything with the right and game to the left
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",177
                                	;[178] 	if cont1.right then gosub clearAll : #score = 0 : lives = 3 : scene = 0 : level = 1 : wait : wait : wait : wait : wait : wait : wait : wait : wait : wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",178
5593   0280 01FF                	MVI 511,R0
5595   0018                     	COMR R0
5596   03B8 0002                	ANDI #2,R0
5598   0204 002F                	BEQ T25
559A   0004 015C 03B5           	CALL Q32
559D   01C0                     	CLRR R0
559E   0240 030A                	MVO R0,V15
55A0   02B8 0003                	MVII #3,R0
55A2   0240 0115                	MVO R0,V17
55A4   01C0                     	CLRR R0
55A5   0240 011B                	MVO R0,V13
55A7   02B8 0001                	MVII #1,R0
55A9   0240 0114                	MVO R0,V18
55AB   0004 0160 02FA           	CALL _wait
55AE   0004 0160 02FA           	CALL _wait
55B1   0004 0160 02FA           	CALL _wait
55B4   0004 0160 02FA           	CALL _wait
55B7   0004 0160 02FA           	CALL _wait
55BA   0004 0160 02FA           	CALL _wait
55BD   0004 0160 02FA           	CALL _wait
55C0   0004 0160 02FA           	CALL _wait
55C3   0004 0160 02FA           	CALL _wait
55C6   0004 0160 02FA           	CALL _wait
0x55C9                          T25:
                                	;[179] 	if cont1.left then gosub clearAll :goto end
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",179
55C9   0280 01FF                	MVI 511,R0
55CB   0018                     	COMR R0
55CC   03B8 0008                	ANDI #8,R0
55CE   0204 0005                	BEQ T26
55D0   0004 015C 03B5           	CALL Q32
55D3   0200 0AE1                	B Q35
0x55D5                          T26:
                                	;[180] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",180
                                	;[181] end
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",181
55D5   02B7                     	RETURN
                                	ENDP
                                	;[182] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",182
                                	;[183] scene4: procedure
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",183
                                	; SCENE4
0x55D6                          Q23:	PROC
55D6   0275                     	BEGIN
                                	;[184] 	MODE   SCREEN_COLOR_STACK, STACK_BLACK, STACK_BLACK, STACK_GREEN, STACK_BLACK 'allows print at makes background black
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",184
55D7   02B8 5000                	MVII #20480,R0
55D9   0240 033F                	MVO R0,_color
55DB   02B8 0002                	MVII #2,R0
55DD   0240 0109                	MVO R0,_mode_select
                                	;[185] 	wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",185
55DF   0004 0160 02FA           	CALL _wait
                                	;[186] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",186
                                	;[187] 	print at SCREENPOS(4, 2) color CS_RED,"PAUSED"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",187
55E2   02B8 022C                	MVII #556,R0
55E4   0240 033E                	MVO R0,_screen
55E6   02B8 0002                	MVII #2,R0
55E8   0240 033F                	MVO R0,_color
55EA   0284 033E                	MVI _screen,R4
55EC   02B8 0180                	MVII #384,R0
55EE   03C0 033F                	XOR _color,R0
55F0   0260                     	MVO@ R0,R4
55F1   03F8 0088                	XORI #136,R0
55F3   0260                     	MVO@ R0,R4
55F4   03F8 00A0                	XORI #160,R0
55F6   0260                     	MVO@ R0,R4
55F7   03F8 0030                	XORI #48,R0
55F9   0260                     	MVO@ R0,R4
55FA   03F8 00B0                	XORI #176,R0
55FC   0260                     	MVO@ R0,R4
55FD   03F8 0008                	XORI #8,R0
55FF   0260                     	MVO@ R0,R4
5600   0244 033E                	MVO R4,_screen
                                	;[188] 	print at SCREENPOS(2, 3) color CS_WHITE,"Press 'Right' To:"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",188
5602   02B8 023E                	MVII #574,R0
5604   0240 033E                	MVO R0,_screen
5606   02B8 0007                	MVII #7,R0
5608   0240 033F                	MVO R0,_color
560A   0284 033E                	MVI _screen,R4
560C   02B8 0180                	MVII #384,R0
560E   03C0 033F                	XOR _color,R0
5610   0260                     	MVO@ R0,R4
5611   03F8 0310                	XORI #784,R0
5613   0260                     	MVO@ R0,R4
5614   03F8 00B8                	XORI #184,R0
5616   0260                     	MVO@ R0,R4
5617   03F8 00B0                	XORI #176,R0
5619   0260                     	MVO@ R0,R4
561A   0260                     	MVO@ R0,R4
561B   03F8 0298                	XORI #664,R0
561D   0260                     	MVO@ R0,R4
561E   03F8 0038                	XORI #56,R0
5620   0260                     	MVO@ R0,R4
5621   03F8 01A8                	XORI #424,R0
5623   0260                     	MVO@ R0,R4
5624   03F8 03D8                	XORI #984,R0
5626   0260                     	MVO@ R0,R4
5627   03F8 0070                	XORI #112,R0
5629   0260                     	MVO@ R0,R4
562A   03F8 0078                	XORI #120,R0
562C   0260                     	MVO@ R0,R4
562D   03F8 00E0                	XORI #224,R0
562F   0260                     	MVO@ R0,R4
5630   03F8 0298                	XORI #664,R0
5632   0260                     	MVO@ R0,R4
5633   03F8 0038                	XORI #56,R0
5635   0260                     	MVO@ R0,R4
5636   03F8 01A0                	XORI #416,R0
5638   0260                     	MVO@ R0,R4
5639   03F8 03D8                	XORI #984,R0
563B   0260                     	MVO@ R0,R4
563C   03F8 02A8                	XORI #680,R0
563E   0260                     	MVO@ R0,R4
563F   0244 033E                	MVO R4,_screen
                                	;[189] 	print at SCREENPOS(2, 4) color CS_WHITE,"> Continue"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",189
5641   02B8 0252                	MVII #594,R0
5643   0240 033E                	MVO R0,_screen
5645   02B8 0007                	MVII #7,R0
5647   0240 033F                	MVO R0,_color
5649   0284 033E                	MVI _screen,R4
564B   02B8 00F0                	MVII #240,R0
564D   03C0 033F                	XOR _color,R0
564F   0260                     	MVO@ R0,R4
5650   03F8 00F0                	XORI #240,R0
5652   0260                     	MVO@ R0,R4
5653   03F8 0118                	XORI #280,R0
5655   0260                     	MVO@ R0,R4
5656   03F8 0360                	XORI #864,R0
5658   0260                     	MVO@ R0,R4
5659   03F8 0008                	XORI #8,R0
565B   0260                     	MVO@ R0,R4
565C   03F8 00D0                	XORI #208,R0
565E   0260                     	MVO@ R0,R4
565F   03F8 00E8                	XORI #232,R0
5661   0260                     	MVO@ R0,R4
5662   03F8 0038                	XORI #56,R0
5664   0260                     	MVO@ R0,R4
5665   03F8 00D8                	XORI #216,R0
5667   0260                     	MVO@ R0,R4
5668   03F8 0080                	XORI #128,R0
566A   0260                     	MVO@ R0,R4
566B   0244 033E                	MVO R4,_screen
                                	;[190] 	print at SCREENPOS(2, 5) color CS_WHITE,"Press 'Left' To:"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",190
566D   02B8 0266                	MVII #614,R0
566F   0240 033E                	MVO R0,_screen
5671   02B8 0007                	MVII #7,R0
5673   0240 033F                	MVO R0,_color
5675   0284 033E                	MVI _screen,R4
5677   02B8 0180                	MVII #384,R0
5679   03C0 033F                	XOR _color,R0
567B   0260                     	MVO@ R0,R4
567C   03F8 0310                	XORI #784,R0
567E   0260                     	MVO@ R0,R4
567F   03F8 00B8                	XORI #184,R0
5681   0260                     	MVO@ R0,R4
5682   03F8 00B0                	XORI #176,R0
5684   0260                     	MVO@ R0,R4
5685   0260                     	MVO@ R0,R4
5686   03F8 0298                	XORI #664,R0
5688   0260                     	MVO@ R0,R4
5689   03F8 0038                	XORI #56,R0
568B   0260                     	MVO@ R0,R4
568C   03F8 0158                	XORI #344,R0
568E   0260                     	MVO@ R0,R4
568F   03F8 0348                	XORI #840,R0
5691   0260                     	MVO@ R0,R4
5692   03F8 0018                	XORI #24,R0
5694   0260                     	MVO@ R0,R4
5695   03F8 0090                	XORI #144,R0
5697   0260                     	MVO@ R0,R4
5698   03F8 0298                	XORI #664,R0
569A   0260                     	MVO@ R0,R4
569B   03F8 0038                	XORI #56,R0
569D   0260                     	MVO@ R0,R4
569E   03F8 01A0                	XORI #416,R0
56A0   0260                     	MVO@ R0,R4
56A1   03F8 03D8                	XORI #984,R0
56A3   0260                     	MVO@ R0,R4
56A4   03F8 02A8                	XORI #680,R0
56A6   0260                     	MVO@ R0,R4
56A7   0244 033E                	MVO R4,_screen
                                	;[191] 	print at SCREENPOS(2, 6) color CS_WHITE,"> Quit"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",191
56A9   02B8 027A                	MVII #634,R0
56AB   0240 033E                	MVO R0,_screen
56AD   02B8 0007                	MVII #7,R0
56AF   0240 033F                	MVO R0,_color
56B1   0284 033E                	MVI _screen,R4
56B3   02B8 00F0                	MVII #240,R0
56B5   03C0 033F                	XOR _color,R0
56B7   0260                     	MVO@ R0,R4
56B8   03F8 00F0                	XORI #240,R0
56BA   0260                     	MVO@ R0,R4
56BB   03F8 0188                	XORI #392,R0
56BD   0260                     	MVO@ R0,R4
56BE   03F8 0320                	XORI #800,R0
56C0   0260                     	MVO@ R0,R4
56C1   03F8 00E0                	XORI #224,R0
56C3   0260                     	MVO@ R0,R4
56C4   03F8 00E8                	XORI #232,R0
56C6   0260                     	MVO@ R0,R4
56C7   0244 033E                	MVO R4,_screen
                                	;[192] 	if univclock%15 = 0 then heartrate = (heartrate + 1) % 2 : playerF = playerF + playerDX : if playerF >= 4 OR playerF <= 0 then playerDX = playerDX * -1
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",192
56C9   0280 011D                	MVI V19,R0
0x56CB                          T28:
56CB   0338 000F                	SUBI #15,R0
56CD   0221 0003                	BC T28
56CF   02F8 000F                	ADDI #15,R0
56D1   020C 003B                	BNE T27
56D3   0280 0111                	MVI V16,R0
56D5   0008                     	INCR R0
56D6   03B8 0001                	ANDI #1,R0
56D8   0240 0111                	MVO R0,V16
56DA   0280 0117                	MVI V6,R0
56DC   02C0 0116                	ADD V4,R0
56DE   0240 0117                	MVO R0,V6
56E0   0280 0117                	MVI V6,R0
56E2   0378 0004                	CMPI #4,R0
56E4   02B8 FFFF                	MVII #-1,R0
56E6   020D 0001                	BGE $+3
56E8   0008                     	INCR R0
56E9   0281 0117                	MVI V6,R1
56EB   0379 0000                	CMPI #0,R1
56ED   02B9 FFFF                	MVII #-1,R1
56EF   0206 0001                	BLE $+3
56F1   0009                     	INCR R1
56F2   0019                     	COMR R1
56F3   0188                     	ANDR R1,R0
56F4   0019                     	COMR R1
56F5   01C8                     	XORR R1,R0
56F6   0204 0016                	BEQ T29
56F8   0280 0116                	MVI V4,R0
56FA   02BD FFFF                	MVII #65535,R5
56FC   01E4                     	CLRR R4
56FD   0006                     	CLRC
56FE   0070                     	RRC R0,1
56FF   0204 0007                	BEQ T31
0x5701                          T30:
5701   0209 0001                	BNC $+3
5703   00EC                     	ADDR R5,R4
5704   00ED                     	ADDR R5,R5
5705   0078                     	SARC R0,1
5706   022C 0006                	BNE T30
0x5708                          T31:
5708   0209 0001                	BNC $+3
570A   00EC                     	ADDR R5,R4
570B   00A0                     	MOVR R4,R0
570C   0240 0116                	MVO R0,V4
0x570E                          T29:
0x570E                          T27:
                                	;[193] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",193
                                	;[194] 	SPRITE 0, SpritePosX(9, 0) + VISIBLE + ZOOMX2, SpritePosY(7, 0) + VISIBLE + ZOOMY2, SPR52 + (8)*playerF + SPR_RED 'player animation
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",194
570E   02B8 0650                	MVII #1616,R0
5710   0240 0340                	MVO R0,_mobs
5712   02B8 0340                	MVII #832,R0
5714   0240 0348                	MVO R0,_mobs+8
5716   0280 0117                	MVI V6,R0
5718   004C                     	SLL R0,2
5719   00C0                     	ADDR R0,R0
571A   02F8 09A2                	ADDI #2466,R0
571C   0240 0350                	MVO R0,_mobs+16
                                	;[195] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",195
                                	;[196] 	'right arrow animation
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",196
                                	;[197] 	if heartrate then print at SCREENPOS(19, 11) color CS_WHITE,">" else print at SCREENPOS(19, 11) color CS_WHITE," "
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",197
571E   0280 0111                	MVI V16,R0
5720   0080                     	TSTR R0
5721   0204 0013                	BEQ T32
5723   02B8 02EF                	MVII #751,R0
5725   0240 033E                	MVO R0,_screen
5727   02B8 0007                	MVII #7,R0
5729   0240 033F                	MVO R0,_color
572B   0284 033E                	MVI _screen,R4
572D   02B8 00F0                	MVII #240,R0
572F   03C0 033F                	XOR _color,R0
5731   0260                     	MVO@ R0,R4
5732   0244 033E                	MVO R4,_screen
5734   0200 000D                	B T33
0x5736                          T32:
5736   02B8 02EF                	MVII #751,R0
5738   0240 033E                	MVO R0,_screen
573A   02B8 0007                	MVII #7,R0
573C   0240 033F                	MVO R0,_color
573E   0284 033E                	MVI _screen,R4
5740   0260                     	MVO@ R0,R4
5741   0244 033E                	MVO R4,_screen
0x5743                          T33:
                                	;[198] 	if heartrate then print at SCREENPOS(0, 11) color CS_WHITE,"<" else print at SCREENPOS(0, 11) color CS_WHITE," "
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",198
5743   0280 0111                	MVI V16,R0
5745   0080                     	TSTR R0
5746   0204 0013                	BEQ T34
5748   02B8 02DC                	MVII #732,R0
574A   0240 033E                	MVO R0,_screen
574C   02B8 0007                	MVII #7,R0
574E   0240 033F                	MVO R0,_color
5750   0284 033E                	MVI _screen,R4
5752   02B8 00E0                	MVII #224,R0
5754   03C0 033F                	XOR _color,R0
5756   0260                     	MVO@ R0,R4
5757   0244 033E                	MVO R4,_screen
5759   0200 000D                	B T35
0x575B                          T34:
575B   02B8 02DC                	MVII #732,R0
575D   0240 033E                	MVO R0,_screen
575F   02B8 0007                	MVII #7,R0
5761   0240 033F                	MVO R0,_color
5763   0284 033E                	MVI _screen,R4
5765   0260                     	MVO@ R0,R4
5766   0244 033E                	MVO R4,_screen
0x5768                          T35:
                                	;[199] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",199
                                	;[200] 	if cont1.left then gosub clearAll : #score = 0 : lives = 3 : scene = 0 : level = 1 : univclock = 0 : wait : wait : wait : wait : wait : wait : wait : wait : wait : wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",200
5768   0280 01FF                	MVI 511,R0
576A   0018                     	COMR R0
576B   03B8 0008                	ANDI #8,R0
576D   0204 0032                	BEQ T36
576F   0004 015C 03B5           	CALL Q32
5772   01C0                     	CLRR R0
5773   0240 030A                	MVO R0,V15
5775   02B8 0003                	MVII #3,R0
5777   0240 0115                	MVO R0,V17
5779   01C0                     	CLRR R0
577A   0240 011B                	MVO R0,V13
577C   02B8 0001                	MVII #1,R0
577E   0240 0114                	MVO R0,V18
5780   01C0                     	CLRR R0
5781   0240 011D                	MVO R0,V19
5783   0004 0160 02FA           	CALL _wait
5786   0004 0160 02FA           	CALL _wait
5789   0004 0160 02FA           	CALL _wait
578C   0004 0160 02FA           	CALL _wait
578F   0004 0160 02FA           	CALL _wait
5792   0004 0160 02FA           	CALL _wait
5795   0004 0160 02FA           	CALL _wait
5798   0004 0160 02FA           	CALL _wait
579B   0004 0160 02FA           	CALL _wait
579E   0004 0160 02FA           	CALL _wait
0x57A1                          T36:
                                	;[201] 	if cont1.right then scene = 1
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",201
57A1   0280 01FF                	MVI 511,R0
57A3   0018                     	COMR R0
57A4   03B8 0002                	ANDI #2,R0
57A6   0204 0004                	BEQ T37
57A8   02B8 0001                	MVII #1,R0
57AA   0240 011B                	MVO R0,V13
0x57AC                          T37:
                                	;[202] end
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",202
57AC   02B7                     	RETURN
                                	ENDP
                                	;[203] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",203
                                	;[204] background: procedure 'draw and writes extra details to background such as score and lives 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",204
                                	; BACKGROUND
0x57AD                          Q29:	PROC
57AD   0275                     	BEGIN
                                	;[205] 	if (univclock % 4) = 0 then street_lineY = (street_lineY + 1) % 7
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",205
57AE   0280 011D                	MVI V19,R0
57B0   03B8 0003                	ANDI #3,R0
57B2   020C 000B                	BNE T38
57B4   0280 011C                	MVI V20,R0
57B6   0008                     	INCR R0
0x57B7                          T39:
57B7   0338 0007                	SUBI #7,R0
57B9   0221 0003                	BC T39
57BB   02F8 0007                	ADDI #7,R0
57BD   0240 011C                	MVO R0,V20
0x57BF                          T38:
                                	;[206] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",206
                                	;[207] 	SPRITE 5, SpritePosX(4 - street_lineY/2, 0) + VISIBLE, SpritePosY(5 + street_lineY, 0) + ZOOMY2, SPR59 + SPR_GREY 'draw lines in lanes
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",207
57BF   02B8 0004                	MVII #4,R0
57C1   0281 011C                	MVI V20,R1
57C3   0061                     	SLR R1,1
57C4   0108                     	SUBR R1,R0
57C5   0008                     	INCR R0
57C6   004C                     	SLL R0,2
57C7   00C0                     	ADDR R0,R0
57C8   02F8 0200                	ADDI #512,R0
57CA   0240 0345                	MVO R0,_mobs+5
57CC   0280 011C                	MVI V20,R0
57CE   02F8 0006                	ADDI #6,R0
57D0   004C                     	SLL R0,2
57D1   00C0                     	ADDR R0,R0
57D2   02F8 0100                	ADDI #256,R0
57D4   0240 034D                	MVO R0,_mobs+13
57D6   02B8 19D8                	MVII #6616,R0
57D8   0240 0355                	MVO R0,_mobs+21
                                	;[208] 	SPRITE 6, SpritePosX(7, 0) + VISIBLE, SpritePosY(5 + street_lineY, 0) + ZOOMY2, SPR60 + SPR_GREY
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",208
57DA   02B8 0240                	MVII #576,R0
57DC   0240 0346                	MVO R0,_mobs+6
57DE   0280 011C                	MVI V20,R0
57E0   02F8 0006                	ADDI #6,R0
57E2   004C                     	SLL R0,2
57E3   00C0                     	ADDR R0,R0
57E4   02F8 0100                	ADDI #256,R0
57E6   0240 034E                	MVO R0,_mobs+14
57E8   02B8 19E0                	MVII #6624,R0
57EA   0240 0356                	MVO R0,_mobs+22
                                	;[209] 	SPRITE 7, SpritePosX(9 + street_lineY/2, 0) + VISIBLE, SpritePosY(5 + street_lineY, 0) + ZOOMY2, SPR61 + SPR_GREY
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",209
57EC   0280 011C                	MVI V20,R0
57EE   0060                     	SLR R0,1
57EF   02F8 000A                	ADDI #10,R0
57F1   004C                     	SLL R0,2
57F2   00C0                     	ADDR R0,R0
57F3   02F8 0200                	ADDI #512,R0
57F5   0240 0347                	MVO R0,_mobs+7
57F7   0280 011C                	MVI V20,R0
57F9   02F8 0006                	ADDI #6,R0
57FB   004C                     	SLL R0,2
57FC   00C0                     	ADDR R0,R0
57FD   02F8 0100                	ADDI #256,R0
57FF   0240 034F                	MVO R0,_mobs+15
5801   02B8 19E8                	MVII #6632,R0
5803   0240 0357                	MVO R0,_mobs+23
                                	;[210] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",210
                                	;[211] 	gosub writescore 'write score
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",211
5805   0004 015C 00FD           	CALL Q38
                                	;[212] 	gosub drawheart  'draw heart and nothing of lives
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",212
5808   0004 015C 01C7           	CALL Q39
                                	;[213] 	gosub writelevel 'write the current level
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",213
580B   0004 015C 0237           	CALL Q40
                                	;[214] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",214
                                	;[215] 	return
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",215
580E   02B7                     	RETURN
                                	;[216] end
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",216
                                	ENDP
                                	;[217] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",217
                                	;[218] drawObjects: procedure
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",218
                                	; DRAWOBJECTS
0x580F                          Q30:	PROC
580F   0275                     	BEGIN
                                	;[219] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",219
                                	;[220] 	for a = 0 to 2
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",220
5810   01C0                     	CLRR R0
5811   0240 010C                	MVO R0,V1
0x5813                          T40:
                                	;[221] 		if (univclock % (highestDifficulty-dificulty)) = 0 then 'objects move at different rate depending on the dificulty
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",221
5813   0280 011D                	MVI V19,R0
5815   02B9 0007                	MVII #7,R1
5817   0301 0110                	SUB V11,R1
5819   0204 0004                	BEQ T42
0x581B                          T43:
581B   0108                     	SUBR R1,R0
581C   0221 0002                	BC T43
581E   00C8                     	ADDR R1,R0
0x581F                          T42:
581F   0080                     	TSTR R0
5820   020C 0017                	BNE T41
                                	;[222] 			objectY(a) = (objectY(a) + 1) % 8
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",222
5822   02BB 0124                	MVII #Q4,R3
5824   02C3 010C                	ADD V1,R3
5826   0298                     	MVI@ R3,R0
5827   0008                     	INCR R0
5828   03B8 0007                	ANDI #7,R0
582A   0258                     	MVO@ R0,R3
                                	;[223] 			if objectY(a) = 0 then gosub chooseObject : object(a) = chance
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",223
582B   0298                     	MVI@ R3,R0
582C   0080                     	TSTR R0
582D   020C 000A                	BNE T44
582F   0004 015C 0163           	CALL Q42
5832   0280 010F                	MVI V10,R0
5834   02BB 011E                	MVII #Q5,R3
5836   02C3 010C                	ADD V1,R3
5838   0258                     	MVO@ R0,R3
0x5839                          T44:
                                	;[224] 		end if
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",224
0x5839                          T41:
                                	;[225] 		
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",225
                                	;[226] 	next a
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",226
5839   0280 010C                	MVI V1,R0
583B   0008                     	INCR R0
583C   0240 010C                	MVO R0,V1
583E   0378 0002                	CMPI #2,R0
5840   0226 002E                	BLE T40
                                	;[227] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",227
                                	;[228] 	objectX(0) = 4 - objectY(0)/2
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",228
5842   02B8 0004                	MVII #4,R0
5844   0281 0124                	MVI Q4,R1
5846   0061                     	SLR R1,1
5847   0108                     	SUBR R1,R0
5848   0240 0121                	MVO R0,Q3
                                	;[229] 	objectX(2) = 9 + objectY(2)/2
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",229
584A   0280 0126                	MVI Q4+2,R0
584C   0060                     	SLR R0,1
584D   02F8 0009                	ADDI #9,R0
584F   0240 0123                	MVO R0,Q3+2
                                	;[230] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",230
                                	;[231] 	for a = 1 to 3
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",231
5851   02B8 0001                	MVII #1,R0
5853   0240 010C                	MVO R0,V1
0x5855                          T45:
                                	;[232] 		if object(a - 1) >= 4 then 'if statement to see if power up has appear; draw different color for power ups
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",232
5855   02BB 011D                	MVII #Q5-1,R3
5857   02C3 010C                	ADD V1,R3
5859   0298                     	MVI@ R3,R0
585A   0378 0004                	CMPI #4,R0
585C   0205 002C                	BLT T46
                                	;[233] 			SPRITE a, SpritePosX(objectX(a - 1), 0) + VISIBLE, SpritePosY(4 + objectY(a - 1), 0) + ZOOMY2, SPR62 + (object(a - 1) - 3)* 8 + #objectColor(object(a - 1))
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",233
585E   02B8 0340                	MVII #Q1,R0
5860   02C0 010C                	ADD V1,R0
5862   0084                     	MOVR R0,R4
5863   02FB 0003                	ADDI #(Q3-Q5) AND $FFFF,R3
5865   0298                     	MVI@ R3,R0
5866   0008                     	INCR R0
5867   004C                     	SLL R0,2
5868   00C0                     	ADDR R0,R0
5869   02F8 0200                	ADDI #512,R0
586B   0260                     	MVO@ R0,R4
586C   02FB 0003                	ADDI #(Q4-Q3) AND $FFFF,R3
586E   0298                     	MVI@ R3,R0
586F   02F8 0005                	ADDI #5,R0
5871   004C                     	SLL R0,2
5872   00C0                     	ADDR R0,R0
5873   02F8 0100                	ADDI #256,R0
5875   02FC 0007                	ADDI #7,R4
5877   0260                     	MVO@ R0,R4
5878   02FB FFFA                	ADDI #(Q5-Q4) AND $FFFF,R3
587A   0298                     	MVI@ R3,R0
587B   0338 0003                	SUBI #3,R0
587D   004C                     	SLL R0,2
587E   00C0                     	ADDR R0,R0
587F   02F8 09F0                	ADDI #2544,R0
5881   02B9 030B                	MVII #Q6,R1
5883   02D9                     	ADD@ R3,R1
5884   02C8                     	ADD@ R1,R0
5885   02FC 0007                	ADDI #7,R4
5887   0260                     	MVO@ R0,R4
                                	;[234] 			'if object(a - 1) = 4 then print to SCREENPOS(12 + object(a - 4), 9) color #objectColor(object(a - 1)), "\319"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",234
                                	;[235] 			'if object(a - 1) = 5 then print to SCREENPOS(12 + object(a - 4), 9) color #objectColor(object(a - 1)), "\320"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",235
                                	;[236] 			'if object(a - 1) = 6 then print to SCREENPOS(12 + object(a - 4), 9) color #objectColor(object(a - 1)), "\321"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",236
                                	;[237] 		else 'if there is not power ups
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",237
5888   0200 002A                	B T47
0x588A                          T46:
                                	;[238] 			SPRITE a, SpritePosX(objectX(a - 1), 0) + VISIBLE, SpritePosY(4 + objectY(a - 1), 0) + ZOOMY2, SPR62 + object(a - 1) * 8 + #objectColor(object(a - 1))
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",238
588A   02B8 0340                	MVII #Q1,R0
588C   02C0 010C                	ADD V1,R0
588E   0084                     	MOVR R0,R4
588F   02BB 0120                	MVII #Q3-1,R3
5891   02C3 010C                	ADD V1,R3
5893   0298                     	MVI@ R3,R0
5894   0008                     	INCR R0
5895   004C                     	SLL R0,2
5896   00C0                     	ADDR R0,R0
5897   02F8 0200                	ADDI #512,R0
5899   0260                     	MVO@ R0,R4
589A   02FB 0003                	ADDI #(Q4-Q3) AND $FFFF,R3
589C   0298                     	MVI@ R3,R0
589D   02F8 0005                	ADDI #5,R0
589F   004C                     	SLL R0,2
58A0   00C0                     	ADDR R0,R0
58A1   02F8 0100                	ADDI #256,R0
58A3   02FC 0007                	ADDI #7,R4
58A5   0260                     	MVO@ R0,R4
58A6   02FB FFFA                	ADDI #(Q5-Q4) AND $FFFF,R3
58A8   0298                     	MVI@ R3,R0
58A9   004C                     	SLL R0,2
58AA   00C0                     	ADDR R0,R0
58AB   02F8 09F0                	ADDI #2544,R0
58AD   02B9 030B                	MVII #Q6,R1
58AF   02D9                     	ADD@ R3,R1
58B0   02C8                     	ADD@ R1,R0
58B1   02FC 0007                	ADDI #7,R4
58B3   0260                     	MVO@ R0,R4
                                	;[239] 		end if
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",239
0x58B4                          T47:
                                	;[240] 	next a
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",240
58B4   0280 010C                	MVI V1,R0
58B6   0008                     	INCR R0
58B7   0240 010C                	MVO R0,V1
58B9   0378 0003                	CMPI #3,R0
58BB   0226 0067                	BLE T45
                                	;[241] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",241
                                	;[242] 	return
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",242
58BD   02B7                     	RETURN
                                	;[243] end
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",243
                                	ENDP
                                	;[244] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",244
                                	;[245] drawPlayer: procedure 'collision with the player and player's behavior
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",245
                                	; DRAWPLAYER
0x58BE                          Q31:	PROC
58BE   0275                     	BEGIN
                                	;[246] 	if cont1.left AND univclock%5 = 0 then playerX = playerX - 1 'various commands: move right, move left, jump, pause
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",246
58BF   0280 01FF                	MVI 511,R0
58C1   0018                     	COMR R0
58C2   03B8 0008                	ANDI #8,R0
58C4   0281 011D                	MVI V19,R1
0x58C6                          T49:
58C6   0339 0005                	SUBI #5,R1
58C8   0221 0003                	BC T49
58CA   02F9 0005                	ADDI #5,R1
58CC   02B9 FFFF                	MVII #-1,R1
58CE   0204 0001                	BEQ $+3
58D0   0009                     	INCR R1
58D1   0188                     	ANDR R1,R0
58D2   0204 0005                	BEQ T48
58D4   0280 0118                	MVI V2,R0
58D6   0010                     	DECR R0
58D7   0240 0118                	MVO R0,V2
0x58D9                          T48:
                                	;[247] 	if cont1.right AND univclock%5 = 0 then playerX = playerX + 1
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",247
58D9   0280 01FF                	MVI 511,R0
58DB   0018                     	COMR R0
58DC   03B8 0002                	ANDI #2,R0
58DE   0281 011D                	MVI V19,R1
0x58E0                          T51:
58E0   0339 0005                	SUBI #5,R1
58E2   0221 0003                	BC T51
58E4   02F9 0005                	ADDI #5,R1
58E6   02B9 FFFF                	MVII #-1,R1
58E8   0204 0001                	BEQ $+3
58EA   0009                     	INCR R1
58EB   0188                     	ANDR R1,R0
58EC   0204 0005                	BEQ T50
58EE   0280 0118                	MVI V2,R0
58F0   0008                     	INCR R0
58F1   0240 0118                	MVO R0,V2
0x58F3                          T50:
                                	;[248] 	if cont1.up AND univclock%5 = 0 AND playerY = 10 then jump = 5
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",248
58F3   0280 01FF                	MVI 511,R0
58F5   0018                     	COMR R0
58F6   03B8 0004                	ANDI #4,R0
58F8   0281 011D                	MVI V19,R1
0x58FA                          T53:
58FA   0339 0005                	SUBI #5,R1
58FC   0221 0003                	BC T53
58FE   02F9 0005                	ADDI #5,R1
5900   02B9 FFFF                	MVII #-1,R1
5902   0204 0001                	BEQ $+3
5904   0009                     	INCR R1
5905   0188                     	ANDR R1,R0
5906   0281 0119                	MVI V5,R1
5908   0379 000A                	CMPI #10,R1
590A   02B9 FFFF                	MVII #-1,R1
590C   0204 0001                	BEQ $+3
590E   0009                     	INCR R1
590F   0188                     	ANDR R1,R0
5910   0204 0004                	BEQ T52
5912   02B8 0005                	MVII #5,R0
5914   0240 0113                	MVO R0,V14
0x5916                          T52:
                                	;[249] 	if cont1.B0 AND univclock%5 = 0 then scene = 3
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",249
5916   0280 01FF                	MVI 511,R0
5918   0018                     	COMR R0
5919   03B8 00E0                	ANDI #224,R0
591B   0378 00A0                	CMPI #160,R0
591D   02B8 FFFF                	MVII #-1,R0
591F   0204 0001                	BEQ $+3
5921   0008                     	INCR R0
5922   0281 011D                	MVI V19,R1
0x5924                          T55:
5924   0339 0005                	SUBI #5,R1
5926   0221 0003                	BC T55
5928   02F9 0005                	ADDI #5,R1
592A   02B9 FFFF                	MVII #-1,R1
592C   0204 0001                	BEQ $+3
592E   0009                     	INCR R1
592F   0188                     	ANDR R1,R0
5930   0204 0004                	BEQ T54
5932   02B8 0003                	MVII #3,R0
5934   0240 011B                	MVO R0,V13
0x5936                          T54:
                                	;[250] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",250
                                	;[251] 	playerX = playerX % 3 'keep player within the three lanes: 0 = lane 1, 1 = lane 2, 2 = lane 3
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",251
5936   0280 0118                	MVI V2,R0
0x5938                          T56:
5938   0338 0003                	SUBI #3,R0
593A   0221 0003                	BC T56
593C   02F8 0003                	ADDI #3,R0
593E   0240 0118                	MVO R0,V2
                                	;[252] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",252
                                	;[253] 	if univclock%(highestDifficulty-dificulty) = 0 AND jump > 0 then playerY = 10 - jump + 2: jump = jump - 1 : playerF = 3 'check to see if condition for power ups and jump have been met
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",253
5940   0280 011D                	MVI V19,R0
5942   02B9 0007                	MVII #7,R1
5944   0301 0110                	SUB V11,R1
5946   0204 0004                	BEQ T58
0x5948                          T59:
5948   0108                     	SUBR R1,R0
5949   0221 0002                	BC T59
594B   00C8                     	ADDR R1,R0
0x594C                          T58:
594C   0080                     	TSTR R0
594D   02B8 FFFF                	MVII #-1,R0
594F   0204 0001                	BEQ $+3
5951   0008                     	INCR R0
5952   0281 0113                	MVI V14,R1
5954   0379 0000                	CMPI #0,R1
5956   02B9 FFFF                	MVII #-1,R1
5958   020E 0001                	BGT $+3
595A   0009                     	INCR R1
595B   0188                     	ANDR R1,R0
595C   0204 0011                	BEQ T57
595E   02B8 000A                	MVII #10,R0
5960   0300 0113                	SUB V14,R0
5962   02F8 0002                	ADDI #2,R0
5964   0240 0119                	MVO R0,V5
5966   0280 0113                	MVI V14,R0
5968   0010                     	DECR R0
5969   0240 0113                	MVO R0,V14
596B   02B8 0003                	MVII #3,R0
596D   0240 0117                	MVO R0,V6
0x596F                          T57:
                                	;[254] 	if univclock%(highestDifficulty-dificulty) = 0 AND invisible > 0 then playerY = 8: invisible = invisible - 1 : playerF = 3
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",254
596F   0280 011D                	MVI V19,R0
5971   02B9 0007                	MVII #7,R1
5973   0301 0110                	SUB V11,R1
5975   0204 0004                	BEQ T61
0x5977                          T62:
5977   0108                     	SUBR R1,R0
5978   0221 0002                	BC T62
597A   00C8                     	ADDR R1,R0
0x597B                          T61:
597B   0080                     	TSTR R0
597C   02B8 FFFF                	MVII #-1,R0
597E   0204 0001                	BEQ $+3
5980   0008                     	INCR R0
5981   0281 0112                	MVI V7,R1
5983   0379 0000                	CMPI #0,R1
5985   02B9 FFFF                	MVII #-1,R1
5987   020E 0001                	BGT $+3
5989   0009                     	INCR R1
598A   0188                     	ANDR R1,R0
598B   0204 000D                	BEQ T60
598D   02B8 0008                	MVII #8,R0
598F   0240 0119                	MVO R0,V5
5991   0280 0112                	MVI V7,R0
5993   0010                     	DECR R0
5994   0240 0112                	MVO R0,V7
5996   02B8 0003                	MVII #3,R0
5998   0240 0117                	MVO R0,V6
0x599A                          T60:
                                	;[255] 	if univclock%(highestDifficulty-dificulty) = 0 AND bonus_lives > 0 then gosub add_lives : bonus_lives = bonus_lives - 1
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",255
599A   0280 011D                	MVI V19,R0
599C   02B9 0007                	MVII #7,R1
599E   0301 0110                	SUB V11,R1
59A0   0204 0004                	BEQ T64
0x59A2                          T65:
59A2   0108                     	SUBR R1,R0
59A3   0221 0002                	BC T65
59A5   00C8                     	ADDR R1,R0
0x59A6                          T64:
59A6   0080                     	TSTR R0
59A7   02B8 FFFF                	MVII #-1,R0
59A9   0204 0001                	BEQ $+3
59AB   0008                     	INCR R0
59AC   0281 010E                	MVI V9,R1
59AE   0379 0000                	CMPI #0,R1
59B0   02B9 FFFF                	MVII #-1,R1
59B2   020E 0001                	BGT $+3
59B4   0009                     	INCR R1
59B5   0188                     	ANDR R1,R0
59B6   0204 0008                	BEQ T63
59B8   0004 0160 0074           	CALL Q44
59BB   0280 010E                	MVI V9,R0
59BD   0010                     	DECR R0
59BE   0240 010E                	MVO R0,V9
0x59C0                          T63:
                                	;[256] 	if univclock%(highestDifficulty-dificulty) = 0 AND bonus_exp > 0 then gosub add_points : bonus_exp = bonus_exp - 1
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",256
59C0   0280 011D                	MVI V19,R0
59C2   02B9 0007                	MVII #7,R1
59C4   0301 0110                	SUB V11,R1
59C6   0204 0004                	BEQ T67
0x59C8                          T68:
59C8   0108                     	SUBR R1,R0
59C9   0221 0002                	BC T68
59CB   00C8                     	ADDR R1,R0
0x59CC                          T67:
59CC   0080                     	TSTR R0
59CD   02B8 FFFF                	MVII #-1,R0
59CF   0204 0001                	BEQ $+3
59D1   0008                     	INCR R0
59D2   0281 010D                	MVI V8,R1
59D4   0379 0000                	CMPI #0,R1
59D6   02B9 FFFF                	MVII #-1,R1
59D8   020E 0001                	BGT $+3
59DA   0009                     	INCR R1
59DB   0188                     	ANDR R1,R0
59DC   0204 0008                	BEQ T66
59DE   0004 0160 000A           	CALL Q45
59E1   0280 010D                	MVI V8,R0
59E3   0010                     	DECR R0
59E4   0240 010D                	MVO R0,V8
0x59E6                          T66:
                                	;[257] 	if univclock%(highestDifficulty-dificulty) = 0 AND jump = 0 AND invisible = 0 then playerY = 10: playerF = playerF + playerDX : if playerF >= 4 OR playerF <= 0 then playerDX = playerDX * -1
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",257
59E6   0280 011D                	MVI V19,R0
59E8   02B9 0007                	MVII #7,R1
59EA   0301 0110                	SUB V11,R1
59EC   0204 0004                	BEQ T70
0x59EE                          T71:
59EE   0108                     	SUBR R1,R0
59EF   0221 0002                	BC T71
59F1   00C8                     	ADDR R1,R0
0x59F2                          T70:
59F2   0080                     	TSTR R0
59F3   02B8 FFFF                	MVII #-1,R0
59F5   0204 0001                	BEQ $+3
59F7   0008                     	INCR R0
59F8   0281 0113                	MVI V14,R1
59FA   0089                     	TSTR R1
59FB   02B9 FFFF                	MVII #-1,R1
59FD   0204 0001                	BEQ $+3
59FF   0009                     	INCR R1
5A00   0188                     	ANDR R1,R0
5A01   0281 0112                	MVI V7,R1
5A03   0089                     	TSTR R1
5A04   02B9 FFFF                	MVII #-1,R1
5A06   0204 0001                	BEQ $+3
5A08   0009                     	INCR R1
5A09   0188                     	ANDR R1,R0
5A0A   0204 0038                	BEQ T69
5A0C   02B8 000A                	MVII #10,R0
5A0E   0240 0119                	MVO R0,V5
5A10   0280 0117                	MVI V6,R0
5A12   02C0 0116                	ADD V4,R0
5A14   0240 0117                	MVO R0,V6
5A16   0280 0117                	MVI V6,R0
5A18   0378 0004                	CMPI #4,R0
5A1A   02B8 FFFF                	MVII #-1,R0
5A1C   020D 0001                	BGE $+3
5A1E   0008                     	INCR R0
5A1F   0281 0117                	MVI V6,R1
5A21   0379 0000                	CMPI #0,R1
5A23   02B9 FFFF                	MVII #-1,R1
5A25   0206 0001                	BLE $+3
5A27   0009                     	INCR R1
5A28   0019                     	COMR R1
5A29   0188                     	ANDR R1,R0
5A2A   0019                     	COMR R1
5A2B   01C8                     	XORR R1,R0
5A2C   0204 0016                	BEQ T72
5A2E   0280 0116                	MVI V4,R0
5A30   02BD FFFF                	MVII #65535,R5
5A32   01E4                     	CLRR R4
5A33   0006                     	CLRC
5A34   0070                     	RRC R0,1
5A35   0204 0007                	BEQ T74
0x5A37                          T73:
5A37   0209 0001                	BNC $+3
5A39   00EC                     	ADDR R5,R4
5A3A   00ED                     	ADDR R5,R5
5A3B   0078                     	SARC R0,1
5A3C   022C 0006                	BNE T73
0x5A3E                          T74:
5A3E   0209 0001                	BNC $+3
5A40   00EC                     	ADDR R5,R4
5A41   00A0                     	MOVR R4,R0
5A42   0240 0116                	MVO R0,V4
0x5A44                          T72:
0x5A44                          T69:
                                	;[258] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",258
                                	;[259] 	if invisible > 0 then 'different color based on the power up
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",259
5A44   0280 0112                	MVI V7,R0
5A46   0378 0000                	CMPI #0,R0
5A48   0206 0006                	BLE T75
                                	;[260] 		#playerColor = SPR_BLUE
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",260
5A4A   02B8 0001                	MVII #1,R0
5A4C   0240 0309                	MVO R0,V3
                                	;[261] 	elseif bonus_lives > 0 then
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",261
5A4E   0200 001B                	B T76
0x5A50                          T75:
5A50   0280 010E                	MVI V9,R0
5A52   0378 0000                	CMPI #0,R0
5A54   0206 0006                	BLE T77
                                	;[262] 		#playerColor = SPR_GREEN
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",262
5A56   02B8 0005                	MVII #5,R0
5A58   0240 0309                	MVO R0,V3
                                	;[263] 	elseif bonus_exp > 0 then
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",263
5A5A   0200 000F                	B T76
0x5A5C                          T77:
5A5C   0280 010D                	MVI V8,R0
5A5E   0378 0000                	CMPI #0,R0
5A60   0206 0005                	BLE T78
                                	;[264] 		#playerColor = SPR_BLACK
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",264
5A62   01C0                     	CLRR R0
5A63   0240 0309                	MVO R0,V3
                                	;[265] 	else 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",265
5A65   0200 0004                	B T76
0x5A67                          T78:
                                	;[266] 		#playerColor = SPR_RED
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",266
5A67   02B8 0002                	MVII #2,R0
5A69   0240 0309                	MVO R0,V3
                                	;[267] 	end if
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",267
0x5A6B                          T76:
                                	;[268] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",268
                                	;[269] 	SPRITE 0, SpritePosX(2 + 4 * playerX, 0) + VISIBLE + ZOOMX2, SpritePosY(playerY, 0) + VISIBLE + ZOOMY2, SPR52 + (8)*playerF + #playerColor 'draw player
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",269
5A6B   0280 0118                	MVI V2,R0
5A6D   004C                     	SLL R0,2
5A6E   02F8 0003                	ADDI #3,R0
5A70   004C                     	SLL R0,2
5A71   00C0                     	ADDR R0,R0
5A72   02F8 0600                	ADDI #1536,R0
5A74   0240 0340                	MVO R0,_mobs
5A76   0280 0119                	MVI V5,R0
5A78   0008                     	INCR R0
5A79   004C                     	SLL R0,2
5A7A   00C0                     	ADDR R0,R0
5A7B   02F8 0300                	ADDI #768,R0
5A7D   0240 0348                	MVO R0,_mobs+8
5A7F   0280 0117                	MVI V6,R0
5A81   004C                     	SLL R0,2
5A82   00C0                     	ADDR R0,R0
5A83   02F8 09A0                	ADDI #2464,R0
5A85   02C0 0309                	ADD V3,R0
5A87   0240 0350                	MVO R0,_mobs+16
                                	;[270] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",270
                                	;[271] 	for a = 0 to 2 'check all three lanes for collision
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",271
5A89   01C0                     	CLRR R0
5A8A   0240 010C                	MVO R0,V1
0x5A8C                          T79:
                                	;[272] 		if (univclock%(highestDifficulty-dificulty) = 0 AND 4 + objectY(a) = playerY AND objectX(playerX) = objectX(a) AND jump = 0)then 'detects collision with objects
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",272
5A8C   0280 011D                	MVI V19,R0
5A8E   02B9 0007                	MVII #7,R1
5A90   0301 0110                	SUB V11,R1
5A92   0204 0004                	BEQ T81
0x5A94                          T82:
5A94   0108                     	SUBR R1,R0
5A95   0221 0002                	BC T82
5A97   00C8                     	ADDR R1,R0
0x5A98                          T81:
5A98   0080                     	TSTR R0
5A99   02B8 FFFF                	MVII #-1,R0
5A9B   0204 0001                	BEQ $+3
5A9D   0008                     	INCR R0
5A9E   02BB 0124                	MVII #Q4,R3
5AA0   02C3 010C                	ADD V1,R3
5AA2   0299                     	MVI@ R3,R1
5AA3   02F9 0004                	ADDI #4,R1
5AA5   0341 0119                	CMP V5,R1
5AA7   02B9 FFFF                	MVII #-1,R1
5AA9   0204 0001                	BEQ $+3
5AAB   0009                     	INCR R1
5AAC   0188                     	ANDR R1,R0
5AAD   02BB 0121                	MVII #Q3,R3
5AAF   02C3 0118                	ADD V2,R3
5AB1   0299                     	MVI@ R3,R1
5AB2   02BB 0121                	MVII #Q3,R3
5AB4   02C3 010C                	ADD V1,R3
5AB6   0359                     	CMP@ R3,R1
5AB7   02B9 FFFF                	MVII #-1,R1
5AB9   0204 0001                	BEQ $+3
5ABB   0009                     	INCR R1
5ABC   0188                     	ANDR R1,R0
5ABD   0281 0113                	MVI V14,R1
5ABF   0089                     	TSTR R1
5AC0   02B9 FFFF                	MVII #-1,R1
5AC2   0204 0001                	BEQ $+3
5AC4   0009                     	INCR R1
5AC5   0188                     	ANDR R1,R0
5AC6   0204 0085                	BEQ T80
                                	;[273] 			if object(a) = 1 AND invisible = 0 then lives = lives - 1 : gosub lose_points  'different behavior for various objects
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",273
5AC8   02FB FFFD                	ADDI #(Q5-Q3) AND $FFFF,R3
5ACA   0298                     	MVI@ R3,R0
5ACB   0378 0001                	CMPI #1,R0
5ACD   02B8 FFFF                	MVII #-1,R0
5ACF   0204 0001                	BEQ $+3
5AD1   0008                     	INCR R0
5AD2   0281 0112                	MVI V7,R1
5AD4   0089                     	TSTR R1
5AD5   02B9 FFFF                	MVII #-1,R1
5AD7   0204 0001                	BEQ $+3
5AD9   0009                     	INCR R1
5ADA   0188                     	ANDR R1,R0
5ADB   0204 0008                	BEQ T83
5ADD   0280 0115                	MVI V17,R0
5ADF   0010                     	DECR R0
5AE0   0240 0115                	MVO R0,V17
5AE2   0004 0160 003F           	CALL Q46
0x5AE5                          T83:
                                	;[274] 			if object(a) = 2 then gosub add_points : gosub writescore
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",274
5AE5   02BB 011E                	MVII #Q5,R3
5AE7   02C3 010C                	ADD V1,R3
5AE9   0298                     	MVI@ R3,R0
5AEA   0378 0002                	CMPI #2,R0
5AEC   020C 0006                	BNE T84
5AEE   0004 0160 000A           	CALL Q45
5AF1   0004 015C 00FD           	CALL Q38
0x5AF4                          T84:
                                	;[275] 			if object(a) = 3 then gosub add_points : #score = #score + 1 : lives = lives + 1 : gosub writescore : gosub drawheart
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",275
5AF4   02BB 011E                	MVII #Q5,R3
5AF6   02C3 010C                	ADD V1,R3
5AF8   0298                     	MVI@ R3,R0
5AF9   0378 0003                	CMPI #3,R0
5AFB   020C 0013                	BNE T85
5AFD   0004 0160 000A           	CALL Q45
5B00   0280 030A                	MVI V15,R0
5B02   0008                     	INCR R0
5B03   0240 030A                	MVO R0,V15
5B05   0280 0115                	MVI V17,R0
5B07   0008                     	INCR R0
5B08   0240 0115                	MVO R0,V17
5B0A   0004 015C 00FD           	CALL Q38
5B0D   0004 015C 01C7           	CALL Q39
0x5B10                          T85:
                                	;[276] 			if object(a) = 4 then invisible = 35 : power = 4 : gosub powerupAnimation
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",276
5B10   02BB 011E                	MVII #Q5,R3
5B12   02C3 010C                	ADD V1,R3
5B14   0298                     	MVI@ R3,R0
5B15   0378 0004                	CMPI #4,R0
5B17   020C 000B                	BNE T86
5B19   02B8 0023                	MVII #35,R0
5B1B   0240 0112                	MVO R0,V7
5B1D   02B8 0004                	MVII #4,R0
5B1F   0240 011A                	MVO R0,V21
5B21   0004 0158 03FE           	CALL Q47
0x5B24                          T86:
                                	;[277] 			if object(a) = 5 then bonus_exp = 5 : power = 5 : gosub powerupAnimation
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",277
5B24   02BB 011E                	MVII #Q5,R3
5B26   02C3 010C                	ADD V1,R3
5B28   0298                     	MVI@ R3,R0
5B29   0378 0005                	CMPI #5,R0
5B2B   020C 0009                	BNE T87
5B2D   02B8 0005                	MVII #5,R0
5B2F   0240 010D                	MVO R0,V8
5B31   0240 011A                	MVO R0,V21
5B33   0004 0158 03FE           	CALL Q47
0x5B36                          T87:
                                	;[278] 			if object(a) = 6 then gosub add_points : bonus_lives = 5 : power = 6 : gosub powerupAnimation
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",278
5B36   02BB 011E                	MVII #Q5,R3
5B38   02C3 010C                	ADD V1,R3
5B3A   0298                     	MVI@ R3,R0
5B3B   0378 0006                	CMPI #6,R0
5B3D   020C 000E                	BNE T88
5B3F   0004 0160 000A           	CALL Q45
5B42   02B8 0005                	MVII #5,R0
5B44   0240 010E                	MVO R0,V9
5B46   02B8 0006                	MVII #6,R0
5B48   0240 011A                	MVO R0,V21
5B4A   0004 0158 03FE           	CALL Q47
0x5B4D                          T88:
                                	;[279] 		end if
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",279
0x5B4D                          T80:
                                	;[280] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",280
                                	;[281] 	next a
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",281
5B4D   0280 010C                	MVI V1,R0
5B4F   0008                     	INCR R0
5B50   0240 010C                	MVO R0,V1
5B52   0378 0002                	CMPI #2,R0
5B54   0226 00C9                	BLE T79
                                	;[282] 	return
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",282
5B56   02B7                     	RETURN
                                	;[283] end
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",283
                                	ENDP
                                	;[284] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",284
                                	;[285] levelupAnimation: procedure 'animation when there is increase in level
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",285
                                	; LEVELUPANIMATION
0x5B57                          Q25:	PROC
5B57   0275                     	BEGIN
                                	;[286] 	wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",286
5B58   0004 0160 02FA           	CALL _wait
                                	;[287] 	gosub clearAll
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",287
5B5B   0004 015C 03B5           	CALL Q32
                                	;[288] 	for a = 0 to 75
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",288
5B5E   01C0                     	CLRR R0
5B5F   0240 010C                	MVO R0,V1
0x5B61                          T89:
                                	;[289] 		if a%3 = 0 then heartrate = (heartrate + 1) % 2 : playerF = playerF + playerDX : if playerF >= 4 OR playerF <= 0 then playerDX = playerDX * -1 'chance player frame
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",289
5B61   0280 010C                	MVI V1,R0
0x5B63                          T91:
5B63   0338 0003                	SUBI #3,R0
5B65   0221 0003                	BC T91
5B67   02F8 0003                	ADDI #3,R0
5B69   020C 003B                	BNE T90
5B6B   0280 0111                	MVI V16,R0
5B6D   0008                     	INCR R0
5B6E   03B8 0001                	ANDI #1,R0
5B70   0240 0111                	MVO R0,V16
5B72   0280 0117                	MVI V6,R0
5B74   02C0 0116                	ADD V4,R0
5B76   0240 0117                	MVO R0,V6
5B78   0280 0117                	MVI V6,R0
5B7A   0378 0004                	CMPI #4,R0
5B7C   02B8 FFFF                	MVII #-1,R0
5B7E   020D 0001                	BGE $+3
5B80   0008                     	INCR R0
5B81   0281 0117                	MVI V6,R1
5B83   0379 0000                	CMPI #0,R1
5B85   02B9 FFFF                	MVII #-1,R1
5B87   0206 0001                	BLE $+3
5B89   0009                     	INCR R1
5B8A   0019                     	COMR R1
5B8B   0188                     	ANDR R1,R0
5B8C   0019                     	COMR R1
5B8D   01C8                     	XORR R1,R0
5B8E   0204 0016                	BEQ T92
5B90   0280 0116                	MVI V4,R0
5B92   02BD FFFF                	MVII #65535,R5
5B94   01E4                     	CLRR R4
5B95   0006                     	CLRC
5B96   0070                     	RRC R0,1
5B97   0204 0007                	BEQ T94
0x5B99                          T93:
5B99   0209 0001                	BNC $+3
5B9B   00EC                     	ADDR R5,R4
5B9C   00ED                     	ADDR R5,R5
5B9D   0078                     	SARC R0,1
5B9E   022C 0006                	BNE T93
0x5BA0                          T94:
5BA0   0209 0001                	BNC $+3
5BA2   00EC                     	ADDR R5,R4
5BA3   00A0                     	MOVR R4,R0
5BA4   0240 0116                	MVO R0,V4
0x5BA6                          T92:
0x5BA6                          T90:
                                	;[290] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",290
                                	;[291] 		SPRITE 0, SpritePosX(9, 0) + VISIBLE + ZOOMX2, SpritePosY(3, 0) + VISIBLE + ZOOMY2, SPR52 + (8)*playerF + SPR_RED 'paint player red
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",291
5BA6   02B8 0650                	MVII #1616,R0
5BA8   0240 0340                	MVO R0,_mobs
5BAA   02B8 0320                	MVII #800,R0
5BAC   0240 0348                	MVO R0,_mobs+8
5BAE   0280 0117                	MVI V6,R0
5BB0   004C                     	SLL R0,2
5BB1   00C0                     	ADDR R0,R0
5BB2   02F8 09A2                	ADDI #2466,R0
5BB4   0240 0350                	MVO R0,_mobs+16
                                	;[292] 		
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",292
                                	;[293] 		print at (SCREENPOS(7, 5)) color CS_RED, (level%10+16)*8+6 'print which level we are going to
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",293
5BB6   02B8 026B                	MVII #619,R0
5BB8   0240 033E                	MVO R0,_screen
5BBA   02B8 0002                	MVII #2,R0
5BBC   0240 033F                	MVO R0,_color
5BBE   0280 0114                	MVI V18,R0
0x5BC0                          T95:
5BC0   0338 000A                	SUBI #10,R0
5BC2   0221 0003                	BC T95
5BC4   02F8 001A                	ADDI #26,R0
5BC6   004C                     	SLL R0,2
5BC7   00C0                     	ADDR R0,R0
5BC8   02F8 0006                	ADDI #6,R0
5BCA   0284 033E                	MVI _screen,R4
5BCC   0260                     	MVO@ R0,R4
5BCD   0244 033E                	MVO R4,_screen
                                	;[294] 		print at (SCREENPOS(12, 5)) color CS_RED, (level%10+16)*8+6
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",294
5BCF   02B8 0270                	MVII #624,R0
5BD1   0240 033E                	MVO R0,_screen
5BD3   02B8 0002                	MVII #2,R0
5BD5   0240 033F                	MVO R0,_color
5BD7   0280 0114                	MVI V18,R0
0x5BD9                          T96:
5BD9   0338 000A                	SUBI #10,R0
5BDB   0221 0003                	BC T96
5BDD   02F8 001A                	ADDI #26,R0
5BDF   004C                     	SLL R0,2
5BE0   00C0                     	ADDR R0,R0
5BE1   02F8 0006                	ADDI #6,R0
5BE3   0284 033E                	MVI _screen,R4
5BE5   0260                     	MVO@ R0,R4
5BE6   0244 033E                	MVO R4,_screen
                                	;[295] 		wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",295
5BE8   0004 0160 02FA           	CALL _wait
                                	;[296] 		wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",296
5BEB   0004 0160 02FA           	CALL _wait
                                	;[297] 		wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",297
5BEE   0004 0160 02FA           	CALL _wait
                                	;[298] 	next a
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",298
5BF1   0280 010C                	MVI V1,R0
5BF3   0008                     	INCR R0
5BF4   0240 010C                	MVO R0,V1
5BF6   0378 004B                	CMPI #75,R0
5BF8   0226 0098                	BLE T89
                                	;[299] 	gosub clearAll
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",299
5BFA   0004 015C 03B5           	CALL Q32
                                	;[300] end
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",300
5BFD   02B7                     	RETURN
                                	ENDP
                                	;[301] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",301
                                	;[302] powerupAnimation: procedure 'animation when there is a power up
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",302
                                	; POWERUPANIMATION
0x5BFE                          Q47:	PROC
5BFE   0275                     	BEGIN
                                	;[303] 	wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",303
5BFF   0004 0160 02FA           	CALL _wait
                                	;[304] 	gosub clearAll
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",304
5C02   0004 015C 03B5           	CALL Q32
                                	;[305] 	MODE SCREEN_COLOR_STACK, STACK_BLACK, STACK_BLACK, STACK_GREEN, STACK_BLACK 'need in order to use print at
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",305
5C05   02B8 5000                	MVII #20480,R0
5C07   0240 033F                	MVO R0,_color
5C09   02B8 0002                	MVII #2,R0
5C0B   0240 0109                	MVO R0,_mode_select
                                	;[306] 	wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",306
5C0D   0004 0160 02FA           	CALL _wait
                                	;[307] 	for a = 0 to 75
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",307
5C10   01C0                     	CLRR R0
5C11   0240 010C                	MVO R0,V1
0x5C13                          T97:
                                	;[308] 		if a%3 = 0 then heartrate = (heartrate + 1) % 2 : playerF = playerF + playerDX : if playerF >= 4 OR playerF <= 0 then playerDX = playerDX * -1 'chance player frame
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",308
5C13   0280 010C                	MVI V1,R0
0x5C15                          T99:
5C15   0338 0003                	SUBI #3,R0
5C17   0221 0003                	BC T99
5C19   02F8 0003                	ADDI #3,R0
5C1B   020C 003B                	BNE T98
5C1D   0280 0111                	MVI V16,R0
5C1F   0008                     	INCR R0
5C20   03B8 0001                	ANDI #1,R0
5C22   0240 0111                	MVO R0,V16
5C24   0280 0117                	MVI V6,R0
5C26   02C0 0116                	ADD V4,R0
5C28   0240 0117                	MVO R0,V6
5C2A   0280 0117                	MVI V6,R0
5C2C   0378 0004                	CMPI #4,R0
5C2E   02B8 FFFF                	MVII #-1,R0
5C30   020D 0001                	BGE $+3
5C32   0008                     	INCR R0
5C33   0281 0117                	MVI V6,R1
5C35   0379 0000                	CMPI #0,R1
5C37   02B9 FFFF                	MVII #-1,R1
5C39   0206 0001                	BLE $+3
5C3B   0009                     	INCR R1
5C3C   0019                     	COMR R1
5C3D   0188                     	ANDR R1,R0
5C3E   0019                     	COMR R1
5C3F   01C8                     	XORR R1,R0
5C40   0204 0016                	BEQ T100
5C42   0280 0116                	MVI V4,R0
5C44   02BD FFFF                	MVII #65535,R5
5C46   01E4                     	CLRR R4
5C47   0006                     	CLRC
5C48   0070                     	RRC R0,1
5C49   0204 0007                	BEQ T102
0x5C4B                          T101:
5C4B   0209 0001                	BNC $+3
5C4D   00EC                     	ADDR R5,R4
5C4E   00ED                     	ADDR R5,R5
5C4F   0078                     	SARC R0,1
5C50   022C 0006                	BNE T101
0x5C52                          T102:
5C52   0209 0001                	BNC $+3
5C54   00EC                     	ADDR R5,R4
5C55   00A0                     	MOVR R4,R0
5C56   0240 0116                	MVO R0,V4
0x5C58                          T100:
0x5C58                          T98:
                                	;[309] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",309
                                	;[310] 		SPRITE 0, SpritePosX(9, 0) + VISIBLE + ZOOMX2, SpritePosY(3, 0) + VISIBLE + ZOOMY2, SPR52 + (8)*playerF + SPR_BLUE 'paint player blue
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",310
5C58   02B8 0650                	MVII #1616,R0
5C5A   0240 0340                	MVO R0,_mobs
5C5C   02B8 0320                	MVII #800,R0
5C5E   0240 0348                	MVO R0,_mobs+8
5C60   0280 0117                	MVI V6,R0
5C62   004C                     	SLL R0,2
5C63   00C0                     	ADDR R0,R0
5C64   02F8 09A1                	ADDI #2465,R0
5C66   0240 0350                	MVO R0,_mobs+16
                                	;[311] 		
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",311
                                	;[312] 		if power = 4 then print at (SCREENPOS(7, 5)) color CS_BLUE, "\319" : print at (SCREENPOS(12, 5)) color CS_BLUE, "\319" 'print which power we obtained
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",312
5C68   0280 011A                	MVI V21,R0
5C6A   0378 0004                	CMPI #4,R0
5C6C   020C 0022                	BNE T103
5C6E   02B8 026B                	MVII #619,R0
5C70   0240 033E                	MVO R0,_screen
5C72   02B8 0001                	MVII #1,R0
5C74   0240 033F                	MVO R0,_color
5C76   0284 033E                	MVI _screen,R4
5C78   02B8 09F8                	MVII #2552,R0
5C7A   03C0 033F                	XOR _color,R0
5C7C   0260                     	MVO@ R0,R4
5C7D   0244 033E                	MVO R4,_screen
5C7F   02B8 0270                	MVII #624,R0
5C81   0240 033E                	MVO R0,_screen
5C83   02B8 0001                	MVII #1,R0
5C85   0240 033F                	MVO R0,_color
5C87   0284 033E                	MVI _screen,R4
5C89   02B8 09F8                	MVII #2552,R0
5C8B   03C0 033F                	XOR _color,R0
5C8D   0260                     	MVO@ R0,R4
5C8E   0244 033E                	MVO R4,_screen
0x5C90                          T103:
                                	;[313] 		if power = 5 then print at (SCREENPOS(7, 5)) color CS_WHITE, "\320" : print at (SCREENPOS(12, 5)) color CS_WHITE, "\320"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",313
5C90   0280 011A                	MVI V21,R0
5C92   0378 0005                	CMPI #5,R0
5C94   020C 0022                	BNE T104
5C96   02B8 026B                	MVII #619,R0
5C98   0240 033E                	MVO R0,_screen
5C9A   02B8 0007                	MVII #7,R0
5C9C   0240 033F                	MVO R0,_color
5C9E   0284 033E                	MVI _screen,R4
5CA0   02B8 0A00                	MVII #2560,R0
5CA2   03C0 033F                	XOR _color,R0
5CA4   0260                     	MVO@ R0,R4
5CA5   0244 033E                	MVO R4,_screen
5CA7   02B8 0270                	MVII #624,R0
5CA9   0240 033E                	MVO R0,_screen
5CAB   02B8 0007                	MVII #7,R0
5CAD   0240 033F                	MVO R0,_color
5CAF   0284 033E                	MVI _screen,R4
5CB1   02B8 0A00                	MVII #2560,R0
5CB3   03C0 033F                	XOR _color,R0
5CB5   0260                     	MVO@ R0,R4
5CB6   0244 033E                	MVO R4,_screen
0x5CB8                          T104:
                                	;[314] 		if power = 6 then print at (SCREENPOS(7, 5)) color CS_GREEN, "\321" : print at (SCREENPOS(12, 5)) color CS_GREEN, "\321"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",314
5CB8   0280 011A                	MVI V21,R0
5CBA   0378 0006                	CMPI #6,R0
5CBC   020C 0022                	BNE T105
5CBE   02B8 026B                	MVII #619,R0
5CC0   0240 033E                	MVO R0,_screen
5CC2   02B8 0005                	MVII #5,R0
5CC4   0240 033F                	MVO R0,_color
5CC6   0284 033E                	MVI _screen,R4
5CC8   02B8 0A08                	MVII #2568,R0
5CCA   03C0 033F                	XOR _color,R0
5CCC   0260                     	MVO@ R0,R4
5CCD   0244 033E                	MVO R4,_screen
5CCF   02B8 0270                	MVII #624,R0
5CD1   0240 033E                	MVO R0,_screen
5CD3   02B8 0005                	MVII #5,R0
5CD5   0240 033F                	MVO R0,_color
5CD7   0284 033E                	MVI _screen,R4
5CD9   02B8 0A08                	MVII #2568,R0
5CDB   03C0 033F                	XOR _color,R0
5CDD   0260                     	MVO@ R0,R4
5CDE   0244 033E                	MVO R4,_screen
0x5CE0                          T105:
                                	;[315] 		
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",315
                                	;[316] 		wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",316
5CE0   0004 0160 02FA           	CALL _wait
                                	;[317] 		wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",317
5CE3   0004 0160 02FA           	CALL _wait
                                	;[318] 		wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",318
5CE6   0004 0160 02FA           	CALL _wait
                                	;[319] 	next a
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",319
5CE9   0280 010C                	MVI V1,R0
5CEB   0008                     	INCR R0
5CEC   0240 010C                	MVO R0,V1
5CEE   0378 004B                	CMPI #75,R0
5CF0   0226 00DE                	BLE T97
                                	;[320] 	gosub clearAll
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",320
5CF2   0004 015C 03B5           	CALL Q32
                                	;[321] 	mode 1 'need for SCREEN command
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",321
5CF5   02B8 0003                	MVII #3,R0
5CF7   0240 0109                	MVO R0,_mode_select
                                	;[322] 	wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",322
5CF9   0004 0160 02FA           	CALL _wait
                                	;[323] end
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",323
5CFC   02B7                     	RETURN
                                	ENDP
                                	;[324] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",324
                                	;[325] writescore: procedure 'print the current score
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",325
                                	; WRITESCORE
0x5CFD                          Q38:	PROC
5CFD   0275                     	BEGIN
                                	;[326] 	if #score < 0 then #score = 0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",326
5CFE   0280 030A                	MVI V15,R0
5D00   0378 0000                	CMPI #0,R0
5D02   020D 0003                	BGE T106
5D04   01C0                     	CLRR R0
5D05   0240 030A                	MVO R0,V15
0x5D07                          T106:
                                	;[327] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",327
                                	;[328] 	print at (SCREENPOS(16, 2)) color CS_RED, (#score/100%10+16)*8+6 'first digit
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",328
5D07   02B8 0238                	MVII #568,R0
5D09   0240 033E                	MVO R0,_screen
5D0B   02B8 0002                	MVII #2,R0
5D0D   0240 033F                	MVO R0,_color
5D0F   0280 030A                	MVI V15,R0
5D11   02BC FFFF                	MVII #-1,R4
0x5D13                          T107:
5D13   000C                     	INCR R4
5D14   0338 0064                	SUBI #100,R0
5D16   0221 0004                	BC T107
5D18   00A0                     	MOVR R4,R0
0x5D19                          T108:
5D19   0338 000A                	SUBI #10,R0
5D1B   0221 0003                	BC T108
5D1D   02F8 001A                	ADDI #26,R0
5D1F   004C                     	SLL R0,2
5D20   00C0                     	ADDR R0,R0
5D21   02F8 0006                	ADDI #6,R0
5D23   0284 033E                	MVI _screen,R4
5D25   0260                     	MVO@ R0,R4
5D26   0244 033E                	MVO R4,_screen
                                	;[329] 	print at (SCREENPOS(17, 2)) color CS_RED,(#score/10%10+16)*8+6	 'second digit
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",329
5D28   02B8 0239                	MVII #569,R0
5D2A   0240 033E                	MVO R0,_screen
5D2C   02B8 0002                	MVII #2,R0
5D2E   0240 033F                	MVO R0,_color
5D30   0280 030A                	MVI V15,R0
5D32   02BC FFFF                	MVII #-1,R4
0x5D34                          T109:
5D34   000C                     	INCR R4
5D35   0338 000A                	SUBI #10,R0
5D37   0221 0004                	BC T109
5D39   00A0                     	MOVR R4,R0
0x5D3A                          T110:
5D3A   0338 000A                	SUBI #10,R0
5D3C   0221 0003                	BC T110
5D3E   02F8 001A                	ADDI #26,R0
5D40   004C                     	SLL R0,2
5D41   00C0                     	ADDR R0,R0
5D42   02F8 0006                	ADDI #6,R0
5D44   0284 033E                	MVI _screen,R4
5D46   0260                     	MVO@ R0,R4
5D47   0244 033E                	MVO R4,_screen
                                	;[330] 	print at (SCREENPOS(18, 2)) color CS_RED,(#score%10+16)*8+6		 'third digit
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",330
5D49   02B8 023A                	MVII #570,R0
5D4B   0240 033E                	MVO R0,_screen
5D4D   02B8 0002                	MVII #2,R0
5D4F   0240 033F                	MVO R0,_color
5D51   0280 030A                	MVI V15,R0
0x5D53                          T111:
5D53   0338 000A                	SUBI #10,R0
5D55   0221 0003                	BC T111
5D57   02F8 001A                	ADDI #26,R0
5D59   004C                     	SLL R0,2
5D5A   00C0                     	ADDR R0,R0
5D5B   02F8 0006                	ADDI #6,R0
5D5D   0284 033E                	MVI _screen,R4
5D5F   0260                     	MVO@ R0,R4
5D60   0244 033E                	MVO R4,_screen
                                	;[331] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",331
                                	;[332] 	return
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",332
5D62   02B7                     	RETURN
                                	;[333] end
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",333
                                	ENDP
                                	;[334] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",334
                                	;[335] chooseObject: procedure 'pick object to put on the list that will appear in the game
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",335
                                	; CHOOSEOBJECT
0x5D63                          Q42:	PROC
5D63   0275                     	BEGIN
                                	;[336] 	chance = RANDOM(256) 'percentage is based of 256, not 100
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",336
5D64   0004 0160 03DD           	CALL _next_random
5D67   03B8 00FF                	ANDI #255,R0
5D69   0240 010F                	MVO R0,V10
                                	;[337] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",337
                                	;[338] 	if chance < percentage(0) then 'nothing chances
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",338
5D6B   0280 010F                	MVI V10,R0
5D6D   0281 0127                	MVI Q7,R1
5D6F   0148                     	CMPR R1,R0
5D70   020D 0005                	BGE T112
                                	;[339] 		chance = 0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",339
5D72   01C0                     	CLRR R0
5D73   0240 010F                	MVO R0,V10
                                	;[340] 	elseif chance < percentage(1) then 'rock chances
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",340
5D75   0200 0036                	B T113
0x5D77                          T112:
5D77   0280 010F                	MVI V10,R0
5D79   0281 0128                	MVI Q7+1,R1
5D7B   0148                     	CMPR R1,R0
5D7C   020D 0006                	BGE T114
                                	;[341] 		chance = 1
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",341
5D7E   02B8 0001                	MVII #1,R0
5D80   0240 010F                	MVO R0,V10
                                	;[342] 	elseif chance < percentage(2) then 'coin chances
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",342
5D82   0200 0029                	B T113
0x5D84                          T114:
5D84   0280 010F                	MVI V10,R0
5D86   0281 0129                	MVI Q7+2,R1
5D88   0148                     	CMPR R1,R0
5D89   020D 0006                	BGE T115
                                	;[343] 		chance = 2
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",343
5D8B   02B8 0002                	MVII #2,R0
5D8D   0240 010F                	MVO R0,V10
                                	;[344] 	elseif chance < percentage(3) then 'apple chances
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",344
5D8F   0200 001C                	B T113
0x5D91                          T115:
5D91   0280 010F                	MVI V10,R0
5D93   0281 012A                	MVI Q7+3,R1
5D95   0148                     	CMPR R1,R0
5D96   020D 0006                	BGE T116
                                	;[345] 		chance = 3
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",345
5D98   02B8 0003                	MVII #3,R0
5D9A   0240 010F                	MVO R0,V10
                                	;[346] 	else 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",346
5D9C   0200 000F                	B T113
0x5D9E                          T116:
                                	;[347] 		chance = RANDOM(3) + 4 'Powerup
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",347
5D9E   02B9 0003                	MVII #3,R1
5DA0   0004 0160 03DD           	CALL _next_random
5DA3   0004 0164 0309           	CALL qs_mpy8
5DA6   0040                     	SWAP R0
5DA7   03B8 00FF                	ANDI #255,R0
5DA9   02F8 0004                	ADDI #4,R0
5DAB   0240 010F                	MVO R0,V10
                                	;[348] 	end if
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",348
0x5DAD                          T113:
                                	;[349] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",349
                                	;[350] 	if invisible > 0 AND a = 1 then chance = 2 'if invisible is activated, make the middle lane all gold
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",350
5DAD   0280 0112                	MVI V7,R0
5DAF   0378 0000                	CMPI #0,R0
5DB1   02B8 FFFF                	MVII #-1,R0
5DB3   020E 0001                	BGT $+3
5DB5   0008                     	INCR R0
5DB6   0281 010C                	MVI V1,R1
5DB8   0379 0001                	CMPI #1,R1
5DBA   02B9 FFFF                	MVII #-1,R1
5DBC   0204 0001                	BEQ $+3
5DBE   0009                     	INCR R1
5DBF   0188                     	ANDR R1,R0
5DC0   0204 0004                	BEQ T117
5DC2   02B8 0002                	MVII #2,R0
5DC4   0240 010F                	MVO R0,V10
0x5DC6                          T117:
                                	;[351] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",351
                                	;[352] 	return
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",352
5DC6   02B7                     	RETURN
                                	;[353] end
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",353
                                	ENDP
                                	;[354] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",354
                                	;[355] drawheart: procedure 'writes the number lives left and the heart animation
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",355
                                	; DRAWHEART
0x5DC7                          Q39:	PROC
5DC7   0275                     	BEGIN
                                	;[356] 	if univclock%7 = 0 then heartrate = (heartrate + 1) % 2
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",356
5DC8   0280 011D                	MVI V19,R0
0x5DCA                          T119:
5DCA   0338 0007                	SUBI #7,R0
5DCC   0221 0003                	BC T119
5DCE   02F8 0007                	ADDI #7,R0
5DD0   020C 0007                	BNE T118
5DD2   0280 0111                	MVI V16,R0
5DD4   0008                     	INCR R0
5DD5   03B8 0001                	ANDI #1,R0
5DD7   0240 0111                	MVO R0,V16
0x5DD9                          T118:
                                	;[357] 	if heartrate then SPRITE 4, SpritePosX(16, 0) + VISIBLE, SpritePosY(5, 0) + ZOOMY2, SPR57 + #playerColor else SPRITE 4, SpritePosX(16, 0) + VISIBLE, SpritePosY(5, 0) + ZOOMY2, SPR58 + #playerColor
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",357
5DD9   0280 0111                	MVI V16,R0
5DDB   0080                     	TSTR R0
5DDC   0204 0010                	BEQ T120
5DDE   02B8 0288                	MVII #648,R0
5DE0   0240 0344                	MVO R0,_mobs+4
5DE2   02B8 0130                	MVII #304,R0
5DE4   0240 034C                	MVO R0,_mobs+12
5DE6   02B8 09C8                	MVII #2504,R0
5DE8   02C0 0309                	ADD V3,R0
5DEA   0240 0354                	MVO R0,_mobs+20
5DEC   0200 000E                	B T121
0x5DEE                          T120:
5DEE   02B8 0288                	MVII #648,R0
5DF0   0240 0344                	MVO R0,_mobs+4
5DF2   02B8 0130                	MVII #304,R0
5DF4   0240 034C                	MVO R0,_mobs+12
5DF6   02B8 09D0                	MVII #2512,R0
5DF8   02C0 0309                	ADD V3,R0
5DFA   0240 0354                	MVO R0,_mobs+20
0x5DFC                          T121:
                                	;[358] 	print at (SCREENPOS(17, 5)) color CS_RED,(lives/10%10+16)*8+6
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",358
5DFC   02B8 0275                	MVII #629,R0
5DFE   0240 033E                	MVO R0,_screen
5E00   02B8 0002                	MVII #2,R0
5E02   0240 033F                	MVO R0,_color
5E04   0280 0115                	MVI V17,R0
5E06   02BC FFFF                	MVII #-1,R4
0x5E08                          T122:
5E08   000C                     	INCR R4
5E09   0338 000A                	SUBI #10,R0
5E0B   0221 0004                	BC T122
5E0D   00A0                     	MOVR R4,R0
0x5E0E                          T123:
5E0E   0338 000A                	SUBI #10,R0
5E10   0221 0003                	BC T123
5E12   02F8 001A                	ADDI #26,R0
5E14   004C                     	SLL R0,2
5E15   00C0                     	ADDR R0,R0
5E16   02F8 0006                	ADDI #6,R0
5E18   0284 033E                	MVI _screen,R4
5E1A   0260                     	MVO@ R0,R4
5E1B   0244 033E                	MVO R4,_screen
                                	;[359] 	print at (SCREENPOS(18, 5)) color CS_RED,(lives%10+16)*8+6
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",359
5E1D   02B8 0276                	MVII #630,R0
5E1F   0240 033E                	MVO R0,_screen
5E21   02B8 0002                	MVII #2,R0
5E23   0240 033F                	MVO R0,_color
5E25   0280 0115                	MVI V17,R0
0x5E27                          T124:
5E27   0338 000A                	SUBI #10,R0
5E29   0221 0003                	BC T124
5E2B   02F8 001A                	ADDI #26,R0
5E2D   004C                     	SLL R0,2
5E2E   00C0                     	ADDR R0,R0
5E2F   02F8 0006                	ADDI #6,R0
5E31   0284 033E                	MVI _screen,R4
5E33   0260                     	MVO@ R0,R4
5E34   0244 033E                	MVO R4,_screen
                                	;[360] 	return
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",360
5E36   02B7                     	RETURN
                                	;[361] end
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",361
                                	ENDP
                                	;[362] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",362
                                	;[363] writelevel: procedure 'writes the level at the bottom of the screen
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",363
                                	; WRITELEVEL
0x5E37                          Q40:	PROC
5E37   0275                     	BEGIN
                                	;[364] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",364
                                	;[365] 	print at (SCREENPOS(17, 8)) color CS_RED, (level%10+16)*8+6
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",365
5E38   02B8 02B1                	MVII #689,R0
5E3A   0240 033E                	MVO R0,_screen
5E3C   02B8 0002                	MVII #2,R0
5E3E   0240 033F                	MVO R0,_color
5E40   0280 0114                	MVI V18,R0
0x5E42                          T125:
5E42   0338 000A                	SUBI #10,R0
5E44   0221 0003                	BC T125
5E46   02F8 001A                	ADDI #26,R0
5E48   004C                     	SLL R0,2
5E49   00C0                     	ADDR R0,R0
5E4A   02F8 0006                	ADDI #6,R0
5E4C   0284 033E                	MVI _screen,R4
5E4E   0260                     	MVO@ R0,R4
5E4F   0244 033E                	MVO R4,_screen
                                	;[366] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",366
                                	;[367] 	return
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",367
5E51   02B7                     	RETURN
                                	;[368] end
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",368
                                	ENDP
                                	;[369] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",369
                                	;[370] determinelevel: procedure 'percentage is out of 256; likelihood of an object appearing go to line 25-28 to see what each percentage if for from the index
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",370
                                	; DETERMINELEVEL
0x5E52                          Q28:	PROC
5E52   0275                     	BEGIN
                                	;[371] 	if(level = 1) then 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",371
5E53   0280 0114                	MVI V18,R0
5E55   0378 0001                	CMPI #1,R0
5E57   020C 0020                	BNE T126
                                	;[372] 		dificulty=1 'rate of object showing up
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",372
5E59   02B8 0001                	MVII #1,R0
5E5B   0240 0110                	MVO R0,V11
                                	;[373] 		#maximunScore = 100 'score needed to pass level
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",373
5E5D   02B8 0064                	MVII #100,R0
5E5F   0240 0308                	MVO R0,V12
                                	;[374] 		percentage(0) = 51
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",374
5E61   02B8 0033                	MVII #51,R0
5E63   0240 0127                	MVO R0,Q7
                                	;[375] 		percentage(1) = percentage(0) + 51
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",375
5E65   0280 0127                	MVI Q7,R0
5E67   02F8 0033                	ADDI #51,R0
5E69   0240 0128                	MVO R0,Q7+1
                                	;[376] 		percentage(2) = percentage(1) + 122
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",376
5E6B   0280 0128                	MVI Q7+1,R0
5E6D   02F8 007A                	ADDI #122,R0
5E6F   0240 0129                	MVO R0,Q7+2
                                	;[377] 		percentage(3) = percentage(2) + 25
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",377
5E71   0280 0129                	MVI Q7+2,R0
5E73   02F8 0019                	ADDI #25,R0
5E75   0240 012A                	MVO R0,Q7+3
                                	;[378] 	elseif(level = 2) then 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",378
5E77   0200 013B                	B T127
0x5E79                          T126:
5E79   0280 0114                	MVI V18,R0
5E7B   0378 0002                	CMPI #2,R0
5E7D   020C 0020                	BNE T128
                                	;[379] 		dificulty=1
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",379
5E7F   02B8 0001                	MVII #1,R0
5E81   0240 0110                	MVO R0,V11
                                	;[380] 		#maximunScore = 110
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",380
5E83   02B8 006E                	MVII #110,R0
5E85   0240 0308                	MVO R0,V12
                                	;[381] 		percentage(0) = 64
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",381
5E87   02B8 0040                	MVII #64,R0
5E89   0240 0127                	MVO R0,Q7
                                	;[382] 		percentage(1) = percentage(0) + 64
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",382
5E8B   0280 0127                	MVI Q7,R0
5E8D   02F8 0040                	ADDI #64,R0
5E8F   0240 0128                	MVO R0,Q7+1
                                	;[383] 		percentage(2) = percentage(1) + 97
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",383
5E91   0280 0128                	MVI Q7+1,R0
5E93   02F8 0061                	ADDI #97,R0
5E95   0240 0129                	MVO R0,Q7+2
                                	;[384] 		percentage(3) = percentage(2) + 25
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",384
5E97   0280 0129                	MVI Q7+2,R0
5E99   02F8 0019                	ADDI #25,R0
5E9B   0240 012A                	MVO R0,Q7+3
                                	;[385] 	elseif(level = 3) then 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",385
5E9D   0200 0115                	B T127
0x5E9F                          T128:
5E9F   0280 0114                	MVI V18,R0
5EA1   0378 0003                	CMPI #3,R0
5EA3   020C 0020                	BNE T129
                                	;[386] 		dificulty=2
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",386
5EA5   02B8 0002                	MVII #2,R0
5EA7   0240 0110                	MVO R0,V11
                                	;[387] 		#maximunScore = 130
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",387
5EA9   02B8 0082                	MVII #130,R0
5EAB   0240 0308                	MVO R0,V12
                                	;[388] 		percentage(0) = 97
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",388
5EAD   02B8 0061                	MVII #97,R0
5EAF   0240 0127                	MVO R0,Q7
                                	;[389] 		percentage(1) = percentage(0) + 58
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",389
5EB1   0280 0127                	MVI Q7,R0
5EB3   02F8 003A                	ADDI #58,R0
5EB5   0240 0128                	MVO R0,Q7+1
                                	;[390] 		percentage(2) = percentage(1) + 58
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",390
5EB7   0280 0128                	MVI Q7+1,R0
5EB9   02F8 003A                	ADDI #58,R0
5EBB   0240 0129                	MVO R0,Q7+2
                                	;[391] 		percentage(3) = percentage(2) + 25
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",391
5EBD   0280 0129                	MVI Q7+2,R0
5EBF   02F8 0019                	ADDI #25,R0
5EC1   0240 012A                	MVO R0,Q7+3
                                	;[392] 	elseif(level = 4) then 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",392
5EC3   0200 00EF                	B T127
0x5EC5                          T129:
5EC5   0280 0114                	MVI V18,R0
5EC7   0378 0004                	CMPI #4,R0
5EC9   020C 0020                	BNE T130
                                	;[393] 		dificulty=2
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",393
5ECB   02B8 0002                	MVII #2,R0
5ECD   0240 0110                	MVO R0,V11
                                	;[394] 		#maximunScore = 150
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",394
5ECF   02B8 0096                	MVII #150,R0
5ED1   0240 0308                	MVO R0,V12
                                	;[395] 		percentage(0) = 120
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",395
5ED3   02B8 0078                	MVII #120,R0
5ED5   0240 0127                	MVO R0,Q7
                                	;[396] 		percentage(1) = percentage(0) + 58
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",396
5ED7   0280 0127                	MVI Q7,R0
5ED9   02F8 003A                	ADDI #58,R0
5EDB   0240 0128                	MVO R0,Q7+1
                                	;[397] 		percentage(2) = percentage(1) + 58
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",397
5EDD   0280 0128                	MVI Q7+1,R0
5EDF   02F8 003A                	ADDI #58,R0
5EE1   0240 0129                	MVO R0,Q7+2
                                	;[398] 		percentage(3) = percentage(2) + 17
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",398
5EE3   0280 0129                	MVI Q7+2,R0
5EE5   02F8 0011                	ADDI #17,R0
5EE7   0240 012A                	MVO R0,Q7+3
                                	;[399] 	elseif(level = 5) then 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",399
5EE9   0200 00C9                	B T127
0x5EEB                          T130:
5EEB   0280 0114                	MVI V18,R0
5EED   0378 0005                	CMPI #5,R0
5EEF   020C 0020                	BNE T131
                                	;[400] 		dificulty=3
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",400
5EF1   02B8 0003                	MVII #3,R0
5EF3   0240 0110                	MVO R0,V11
                                	;[401] 		#maximunScore = 250
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",401
5EF5   02B8 00FA                	MVII #250,R0
5EF7   0240 0308                	MVO R0,V12
                                	;[402] 		percentage(0) = 120
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",402
5EF9   02B8 0078                	MVII #120,R0
5EFB   0240 0127                	MVO R0,Q7
                                	;[403] 		percentage(1) = percentage(0) + 66
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",403
5EFD   0280 0127                	MVI Q7,R0
5EFF   02F8 0042                	ADDI #66,R0
5F01   0240 0128                	MVO R0,Q7+1
                                	;[404] 		percentage(2) = percentage(1) + 51
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",404
5F03   0280 0128                	MVI Q7+1,R0
5F05   02F8 0033                	ADDI #51,R0
5F07   0240 0129                	MVO R0,Q7+2
                                	;[405] 		percentage(3) = percentage(2) + 17
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",405
5F09   0280 0129                	MVI Q7+2,R0
5F0B   02F8 0011                	ADDI #17,R0
5F0D   0240 012A                	MVO R0,Q7+3
                                	;[406] 	elseif(level = 6) then 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",406
5F0F   0200 00A3                	B T127
0x5F11                          T131:
5F11   0280 0114                	MVI V18,R0
5F13   0378 0006                	CMPI #6,R0
5F15   020C 0020                	BNE T132
                                	;[407] 		dificulty=3
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",407
5F17   02B8 0003                	MVII #3,R0
5F19   0240 0110                	MVO R0,V11
                                	;[408] 		#maximunScore = 500
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",408
5F1B   02B8 01F4                	MVII #500,R0
5F1D   0240 0308                	MVO R0,V12
                                	;[409] 		percentage(0) = 128
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",409
5F1F   02B8 0080                	MVII #128,R0
5F21   0240 0127                	MVO R0,Q7
                                	;[410] 		percentage(1) = percentage(0) + 76
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",410
5F23   0280 0127                	MVI Q7,R0
5F25   02F8 004C                	ADDI #76,R0
5F27   0240 0128                	MVO R0,Q7+1
                                	;[411] 		percentage(2) = percentage(1) + 51
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",411
5F29   0280 0128                	MVI Q7+1,R0
5F2B   02F8 0033                	ADDI #51,R0
5F2D   0240 0129                	MVO R0,Q7+2
                                	;[412] 		percentage(3) = percentage(2) + 17
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",412
5F2F   0280 0129                	MVI Q7+2,R0
5F31   02F8 0011                	ADDI #17,R0
5F33   0240 012A                	MVO R0,Q7+3
                                	;[413] 	elseif(level = 7) then 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",413
5F35   0200 007D                	B T127
0x5F37                          T132:
5F37   0280 0114                	MVI V18,R0
5F39   0378 0007                	CMPI #7,R0
5F3B   020C 0020                	BNE T133
                                	;[414] 		dificulty=4
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",414
5F3D   02B8 0004                	MVII #4,R0
5F3F   0240 0110                	MVO R0,V11
                                	;[415] 		#maximunScore = 650
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",415
5F41   02B8 028A                	MVII #650,R0
5F43   0240 0308                	MVO R0,V12
                                	;[416] 		percentage(0) = 117
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",416
5F45   02B8 0075                	MVII #117,R0
5F47   0240 0127                	MVO R0,Q7
                                	;[417] 		percentage(1) = percentage(0) + 58
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",417
5F49   0280 0127                	MVI Q7,R0
5F4B   02F8 003A                	ADDI #58,R0
5F4D   0240 0128                	MVO R0,Q7+1
                                	;[418] 		percentage(2) = percentage(1) + 58
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",418
5F4F   0280 0128                	MVI Q7+1,R0
5F51   02F8 003A                	ADDI #58,R0
5F53   0240 0129                	MVO R0,Q7+2
                                	;[419] 		percentage(3) = percentage(2) + 12
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",419
5F55   0280 0129                	MVI Q7+2,R0
5F57   02F8 000C                	ADDI #12,R0
5F59   0240 012A                	MVO R0,Q7+3
                                	;[420] 	elseif(level = 8) then 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",420
5F5B   0200 0057                	B T127
0x5F5D                          T133:
5F5D   0280 0114                	MVI V18,R0
5F5F   0378 0008                	CMPI #8,R0
5F61   020C 0020                	BNE T134
                                	;[421] 		dificulty=5
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",421
5F63   02B8 0005                	MVII #5,R0
5F65   0240 0110                	MVO R0,V11
                                	;[422] 		#maximunScore = 750
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",422
5F67   02B8 02EE                	MVII #750,R0
5F69   0240 0308                	MVO R0,V12
                                	;[423] 		percentage(0) = 79
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",423
5F6B   02B8 004F                	MVII #79,R0
5F6D   0240 0127                	MVO R0,Q7
                                	;[424] 		percentage(1) = percentage(0) + 79
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",424
5F6F   0280 0127                	MVI Q7,R0
5F71   02F8 004F                	ADDI #79,R0
5F73   0240 0128                	MVO R0,Q7+1
                                	;[425] 		percentage(2) = percentage(1) + 79
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",425
5F75   0280 0128                	MVI Q7+1,R0
5F77   02F8 004F                	ADDI #79,R0
5F79   0240 0129                	MVO R0,Q7+2
                                	;[426] 		percentage(3) = percentage(2) + 8
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",426
5F7B   0280 0129                	MVI Q7+2,R0
5F7D   02F8 0008                	ADDI #8,R0
5F7F   0240 012A                	MVO R0,Q7+3
                                	;[427] 	elseif(level = 9) then 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",427
5F81   0200 0031                	B T127
0x5F83                          T134:
5F83   0280 0114                	MVI V18,R0
5F85   0378 0009                	CMPI #9,R0
5F87   020C 0020                	BNE T135
                                	;[428] 		dificulty=6
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",428
5F89   02B8 0006                	MVII #6,R0
5F8B   0240 0110                	MVO R0,V11
                                	;[429] 		#maximunScore = 1000
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",429
5F8D   02B8 03E8                	MVII #1000,R0
5F8F   0240 0308                	MVO R0,V12
                                	;[430] 		percentage(0) = 81
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",430
5F91   02B8 0051                	MVII #81,R0
5F93   0240 0127                	MVO R0,Q7
                                	;[431] 		percentage(1) = percentage(0) + 84
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",431
5F95   0280 0127                	MVI Q7,R0
5F97   02F8 0054                	ADDI #84,R0
5F99   0240 0128                	MVO R0,Q7+1
                                	;[432] 		percentage(2) = percentage(1) + 50
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",432
5F9B   0280 0128                	MVI Q7+1,R0
5F9D   02F8 0032                	ADDI #50,R0
5F9F   0240 0129                	MVO R0,Q7+2
                                	;[433] 		percentage(3) = percentage(2) + 4
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",433
5FA1   0280 0129                	MVI Q7+2,R0
5FA3   02F8 0004                	ADDI #4,R0
5FA5   0240 012A                	MVO R0,Q7+3
                                	;[434] 	else
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",434
5FA7   0200 000B                	B T127
0x5FA9                          T135:
                                	;[435] 		level = 1
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",435
5FA9   02B8 0001                	MVII #1,R0
5FAB   0240 0114                	MVO R0,V18
                                	;[436] 		lives = 10
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",436
5FAD   02B8 000A                	MVII #10,R0
5FAF   0240 0115                	MVO R0,V17
                                	;[437] 		gosub determinelevel
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",437
5FB1   0004 015C 0252           	CALL Q28
                                	;[438] 	end if
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",438
0x5FB4                          T127:
                                	;[439] end
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",439
5FB4   02B7                     	RETURN
                                	ENDP
                                	;[440] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",440
                                	;[441] clearAll:procedure 'clear everything on the screen
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",441
                                	; CLEARALL
0x5FB5                          Q32:	PROC
5FB5   0275                     	BEGIN
                                	;[442] 	cls
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",442
5FB6   0004 0150 0014           	CALL CLRSCR
                                	;[443] 	ResetSprite(0)
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",443
5FB9   01C0                     	CLRR R0
5FBA   0240 0340                	MVO R0,_mobs
5FBC   0240 0348                	MVO R0,_mobs+8
5FBE   0034                     	NOP
5FBF   0240 0350                	MVO R0,_mobs+16
                                	;[444] 	ResetSprite(1)
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",444
5FC1   0240 0341                	MVO R0,_mobs+1
5FC3   0034                     	NOP
5FC4   0240 0349                	MVO R0,_mobs+9
5FC6   0240 0351                	MVO R0,_mobs+17
                                	;[445] 	ResetSprite(2)
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",445
5FC8   0034                     	NOP
5FC9   0240 0342                	MVO R0,_mobs+2
5FCB   0240 034A                	MVO R0,_mobs+10
5FCD   0034                     	NOP
5FCE   0240 0352                	MVO R0,_mobs+18
                                	;[446] 	ResetSprite(3)
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",446
5FD0   0240 0343                	MVO R0,_mobs+3
5FD2   0034                     	NOP
5FD3   0240 034B                	MVO R0,_mobs+11
5FD5   0240 0353                	MVO R0,_mobs+19
                                	;[447] 	ResetSprite(4)
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",447
5FD7   0034                     	NOP
5FD8   0240 0344                	MVO R0,_mobs+4
5FDA   0240 034C                	MVO R0,_mobs+12
5FDC   0034                     	NOP
5FDD   0240 0354                	MVO R0,_mobs+20
                                	;[448] 	ResetSprite(5)
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",448
5FDF   0240 0345                	MVO R0,_mobs+5
5FE1   0034                     	NOP
5FE2   0240 034D                	MVO R0,_mobs+13
5FE4   0240 0355                	MVO R0,_mobs+21
                                	;[449] 	ResetSprite(6)
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",449
5FE6   0034                     	NOP
5FE7   0240 0346                	MVO R0,_mobs+6
5FE9   0240 034E                	MVO R0,_mobs+14
5FEB   0034                     	NOP
5FEC   0240 0356                	MVO R0,_mobs+22
                                	;[450] 	ResetSprite(7) 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",450
5FEE   0240 0347                	MVO R0,_mobs+7
5FF0   0034                     	NOP
5FF1   0240 034F                	MVO R0,_mobs+15
5FF3   0240 0357                	MVO R0,_mobs+23
                                	;[451] end
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",451
5FF5   02B7                     	RETURN
                                	ENDP
                                	;[452] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",452
                                	;[453] clearPower:procedure 'reset powers and object shown
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",453
                                	; CLEARPOWER
0x5FF6                          Q33:	PROC
5FF6   0275                     	BEGIN
                                	;[454] 	invisible = 0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",454
5FF7   01C0                     	CLRR R0
5FF8   0240 0112                	MVO R0,V7
                                	;[455] 	jump = 0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",455
5FFA   0240 0113                	MVO R0,V14
                                	;[456] 	bonus_exp = 0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",456
5FFC   0034                     	NOP
5FFD   0240 010D                	MVO R0,V8
                                	;[457] 	bonus_lives = 0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",457
5FFF   0240 010E                	MVO R0,V9
                                	;[458] 	object(0) = 0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",458
6001   0034                     	NOP
6002   0240 011E                	MVO R0,Q5
                                	;[459] 	object(1) = 0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",459
6004   0240 011F                	MVO R0,Q5+1
                                	;[460] 	object(2) = 0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",460
6006   0034                     	NOP
6007   0240 0120                	MVO R0,Q5+2
                                	;[461] end
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",461
6009   02B7                     	RETURN
                                	ENDP
                                	;[462] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",462
                                	;[463] add_points:	PROCEDURE 'score gained sound effect
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",463
                                	; ADD_POINTS
0x600A                          Q45:	PROC
600A   0275                     	BEGIN
                                	;[464] 	#score = #score + 5
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",464
600B   0280 030A                	MVI V15,R0
600D   02F8 0005                	ADDI #5,R0
600F   0240 030A                	MVO R0,V15
                                	;[465] 	SOUND 1,400,14
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",465
6011   02B8 0190                	MVII #400,R0
6013   0240 01F1                	MVO R0,497
6015   0040                     	SWAP R0
6016   0240 01F5                	MVO R0,501
6018   02B8 000E                	MVII #14,R0
601A   0240 01FC                	MVO R0,508
                                	;[466] 	wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",466
601C   0004 0160 02FA           	CALL _wait
                                	;[467] 	SOUND 1,300,14
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",467
601F   02B8 012C                	MVII #300,R0
6021   0240 01F1                	MVO R0,497
6023   0040                     	SWAP R0
6024   0240 01F5                	MVO R0,501
6026   02B8 000E                	MVII #14,R0
6028   0240 01FC                	MVO R0,508
                                	;[468] 	wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",468
602A   0004 0160 02FA           	CALL _wait
                                	;[469] 	SOUND 1,500,14
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",469
602D   02B8 01F4                	MVII #500,R0
602F   0240 01F1                	MVO R0,497
6031   0040                     	SWAP R0
6032   0240 01F5                	MVO R0,501
6034   02B8 000E                	MVII #14,R0
6036   0240 01FC                	MVO R0,508
                                	;[470] 	wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",470
6038   0004 0160 02FA           	CALL _wait
                                	;[471] 	SOUND 1,,0 ' Turn volume to zero
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",471
603B   01C0                     	CLRR R0
603C   0240 01FC                	MVO R0,508
                                	;[472] end
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",472
603E   02B7                     	RETURN
                                	ENDP
                                	;[473] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",473
                                	;[474] lose_points:	PROCEDURE 'score loss sound effect
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",474
                                	; LOSE_POINTS
0x603F                          Q46:	PROC
603F   0275                     	BEGIN
                                	;[475] 	#score = #score - 10
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",475
6040   0280 030A                	MVI V15,R0
6042   0338 000A                	SUBI #10,R0
6044   0240 030A                	MVO R0,V15
                                	;[476] 	SOUND 1,100,14
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",476
6046   02B8 0064                	MVII #100,R0
6048   0240 01F1                	MVO R0,497
604A   0040                     	SWAP R0
604B   0240 01F5                	MVO R0,501
604D   02B8 000E                	MVII #14,R0
604F   0240 01FC                	MVO R0,508
                                	;[477] 	wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",477
6051   0004 0160 02FA           	CALL _wait
                                	;[478] 	SOUND 1,500,14
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",478
6054   02B8 01F4                	MVII #500,R0
6056   0240 01F1                	MVO R0,497
6058   0040                     	SWAP R0
6059   0240 01F5                	MVO R0,501
605B   02B8 000E                	MVII #14,R0
605D   0240 01FC                	MVO R0,508
                                	;[479] 	wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",479
605F   0004 0160 02FA           	CALL _wait
                                	;[480] 	SOUND 1,300,14
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",480
6062   02B8 012C                	MVII #300,R0
6064   0240 01F1                	MVO R0,497
6066   0040                     	SWAP R0
6067   0240 01F5                	MVO R0,501
6069   02B8 000E                	MVII #14,R0
606B   0240 01FC                	MVO R0,508
                                	;[481] 	wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",481
606D   0004 0160 02FA           	CALL _wait
                                	;[482] 	SOUND 1,,0 ' Turn volume to zero
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",482
6070   01C0                     	CLRR R0
6071   0240 01FC                	MVO R0,508
                                	;[483] end
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",483
6073   02B7                     	RETURN
                                	ENDP
                                	;[484] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",484
                                	;[485] add_lives:	PROCEDURE 'life gained sound effect
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",485
                                	; ADD_LIVES
0x6074                          Q44:	PROC
6074   0275                     	BEGIN
                                	;[486] 	lives = lives + 1
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",486
6075   0280 0115                	MVI V17,R0
6077   0008                     	INCR R0
6078   0240 0115                	MVO R0,V17
                                	;[487] 	SOUND 1,200,14
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",487
607A   02B8 00C8                	MVII #200,R0
607C   0240 01F1                	MVO R0,497
607E   0040                     	SWAP R0
607F   0240 01F5                	MVO R0,501
6081   02B8 000E                	MVII #14,R0
6083   0240 01FC                	MVO R0,508
                                	;[488] 	wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",488
6085   0004 0160 02FA           	CALL _wait
                                	;[489] 	SOUND 1,300,14
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",489
6088   02B8 012C                	MVII #300,R0
608A   0240 01F1                	MVO R0,497
608C   0040                     	SWAP R0
608D   0240 01F5                	MVO R0,501
608F   02B8 000E                	MVII #14,R0
6091   0240 01FC                	MVO R0,508
                                	;[490] 	wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",490
6093   0004 0160 02FA           	CALL _wait
                                	;[491] 	SOUND 1,400,14
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",491
6096   02B8 0190                	MVII #400,R0
6098   0240 01F1                	MVO R0,497
609A   0040                     	SWAP R0
609B   0240 01F5                	MVO R0,501
609D   02B8 000E                	MVII #14,R0
609F   0240 01FC                	MVO R0,508
                                	;[492] 	wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",492
60A1   0004 0160 02FA           	CALL _wait
                                	;[493] 	SOUND 1,500,14
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",493
60A4   02B8 01F4                	MVII #500,R0
60A6   0240 01F1                	MVO R0,497
60A8   0040                     	SWAP R0
60A9   0240 01F5                	MVO R0,501
60AB   02B8 000E                	MVII #14,R0
60AD   0240 01FC                	MVO R0,508
                                	;[494] 	wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",494
60AF   0004 0160 02FA           	CALL _wait
                                	;[495] 	SOUND 1,,0 ' Turn volume to zero
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",495
60B2   01C0                     	CLRR R0
60B3   0240 01FC                	MVO R0,508
                                	;[496] end
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",496
60B5   02B7                     	RETURN
                                	ENDP
                                	;[497] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",497
                                	;[498] end:
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",498
                                	; END
0x60B6                          Q35:	;[499] 	wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",499
60B6   0004 0160 02FA           	CALL _wait
                                	;[500] 	print at SCREENPOS(6, 5) color CS_RED, "Good Bye!"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",500
60B9   02B8 026A                	MVII #618,R0
60BB   0240 033E                	MVO R0,_screen
60BD   02B8 0002                	MVII #2,R0
60BF   0240 033F                	MVO R0,_color
60C1   0284 033E                	MVI _screen,R4
60C3   02B8 0138                	MVII #312,R0
60C5   03C0 033F                	XOR _color,R0
60C7   0260                     	MVO@ R0,R4
60C8   03F8 0340                	XORI #832,R0
60CA   0260                     	MVO@ R0,R4
60CB   0260                     	MVO@ R0,R4
60CC   03F8 0058                	XORI #88,R0
60CE   0260                     	MVO@ R0,R4
60CF   03F8 0220                	XORI #544,R0
60D1   0260                     	MVO@ R0,R4
60D2   03F8 0110                	XORI #272,R0
60D4   0260                     	MVO@ R0,R4
60D5   03F8 03D8                	XORI #984,R0
60D7   0260                     	MVO@ R0,R4
60D8   03F8 00E0                	XORI #224,R0
60DA   0260                     	MVO@ R0,R4
60DB   03F8 0220                	XORI #544,R0
60DD   0260                     	MVO@ R0,R4
60DE   0244 033E                	MVO R4,_screen
                                	;[501] 	goto end
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",501
60E0   0220 002B                	B Q35
                                	;[502] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",502
                                	;[503] 	'graphics
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",503
                                	;[504] player:
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",504
                                	; PLAYER
0x60E2                          Q12:	;[505] 	'frame 0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",505
                                	;[506] 	BITMAP "..####.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",506
                                	;[507] 	BITMAP "#.####.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",507
60E2   BC3C                     	DECLE 48188
                                	;[508] 	BITMAP "#.######"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",508
                                	;[509] 	BITMAP "######.#"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",509
60E3   FDBF                     	DECLE 64959
                                	;[510] 	BITMAP "..####.#"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",510
                                	;[511] 	BITMAP "..####.#"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",511
60E4   3D3D                     	DECLE 15677
                                	;[512] 	BITMAP "..#....."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",512
                                	;[513] 	BITMAP "..#....."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",513
60E5   2020                     	DECLE 8224
                                	;[514] 	'frame 1
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",514
                                	;[515] 	BITMAP "..####.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",515
                                	;[516] 	BITMAP "..####.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",516
60E6   3C3C                     	DECLE 15420
                                	;[517] 	BITMAP "#.####.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",517
                                	;[518] 	BITMAP "########"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",518
60E7   FFBC                     	DECLE 65468
                                	;[519] 	BITMAP "..####.#"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",519
                                	;[520] 	BITMAP "..####.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",520
60E8   3C3D                     	DECLE 15421
                                	;[521] 	BITMAP "..#..#.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",521
                                	;[522] 	BITMAP "..#....."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",522
60E9   2024                     	DECLE 8228
                                	;[523] 	'frame 2
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",523
                                	;[524] 	BITMAP "..####.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",524
                                	;[525] 	BITMAP "..####.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",525
60EA   3C3C                     	DECLE 15420
                                	;[526] 	BITMAP "..####.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",526
                                	;[527] 	BITMAP "########"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",527
60EB   FF3C                     	DECLE 65340
                                	;[528] 	BITMAP "..####.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",528
                                	;[529] 	BITMAP "..####.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",529
60EC   3C3C                     	DECLE 15420
                                	;[530] 	BITMAP "..#..#.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",530
                                	;[531] 	BITMAP "..#..#.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",531
60ED   2424                     	DECLE 9252
                                	;[532] 	'frame 3
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",532
                                	;[533] 	BITMAP "..####.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",533
                                	;[534] 	BITMAP "..####.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",534
60EE   3C3C                     	DECLE 15420
                                	;[535] 	BITMAP "..####.#"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",535
                                	;[536] 	BITMAP "########"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",536
60EF   FF3D                     	DECLE 65341
                                	;[537] 	BITMAP "#.####.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",537
                                	;[538] 	BITMAP "..####.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",538
60F0   3CBC                     	DECLE 15548
                                	;[539] 	BITMAP "..#..#.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",539
                                	;[540] 	BITMAP ".....#.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",540
60F1   0424                     	DECLE 1060
                                	;[541] 	'frame 4
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",541
                                	;[542] 	BITMAP "..####.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",542
                                	;[543] 	BITMAP "..####.#"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",543
60F2   3D3C                     	DECLE 15676
                                	;[544] 	BITMAP "######.#"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",544
                                	;[545] 	BITMAP "#.######"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",545
60F3   BFFD                     	DECLE 49149
                                	;[546] 	BITMAP "#.####.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",546
                                	;[547] 	BITMAP "#.####.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",547
60F4   BCBC                     	DECLE 48316
                                	;[548] 	BITMAP ".....#.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",548
                                	;[549] 	BITMAP ".....#.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",549
60F5   0404                     	DECLE 1028
                                	;[550] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",550
                                	;[551] tiles:	'heart icon
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",551
                                	; TILES
0x60F6                          Q13:	;[552] 	BITMAP "........"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",552
                                	;[553] 	BITMAP ".##.##.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",553
60F6   6C00                     	DECLE 27648
                                	;[554] 	BITMAP "#.##.##."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",554
                                	;[555] 	BITMAP "#######."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",555
60F7   FEB6                     	DECLE 65206
                                	;[556] 	BITMAP ".#####.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",556
                                	;[557] 	BITMAP "..###..."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",557
60F8   387C                     	DECLE 14460
                                	;[558] 	BITMAP "...#...."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",558
                                	;[559] 	BITMAP "........"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",559
60F9   0010                     	DECLE 16
                                	;[560] 	'empty heart icon
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",560
                                	;[561] 	BITMAP "........"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",561
                                	;[562] 	BITMAP ".##.##.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",562
60FA   6C00                     	DECLE 27648
                                	;[563] 	BITMAP "##.##.#."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",563
                                	;[564] 	BITMAP "#.....#."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",564
60FB   82DA                     	DECLE 33498
                                	;[565] 	BITMAP ".#...#.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",565
                                	;[566] 	BITMAP "..#.#..."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",566
60FC   2844                     	DECLE 10308
                                	;[567] 	BITMAP "...#...."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",567
                                	;[568] 	BITMAP "........"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",568
60FD   0010                     	DECLE 16
                                	;[569] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",569
                                	;[570] street:
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",570
                                	; STREET
0x60FE                          Q14:	;[571] 	'left
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",571
                                	;[572] 	BITMAP "....##.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",572
                                	;[573] 	BITMAP "....##.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",573
60FE   0C0C                     	DECLE 3084
                                	;[574] 	BITMAP "....##.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",574
                                	;[575] 	BITMAP "...###.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",575
60FF   1C0C                     	DECLE 7180
                                	;[576] 	BITMAP "...##..."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",576
                                	;[577] 	BITMAP "...##..."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",577
6100   1818                     	DECLE 6168
                                	;[578] 	BITMAP "...##..."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",578
                                	;[579] 	BITMAP "...##..."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",579
6101   1818                     	DECLE 6168
                                	;[580] 	'center
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",580
                                	;[581] 	BITMAP "##......"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",581
                                	;[582] 	BITMAP "##......"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",582
6102   C0C0                     	DECLE 49344
                                	;[583] 	BITMAP "##......"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",583
                                	;[584] 	BITMAP "##......"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",584
6103   C0C0                     	DECLE 49344
                                	;[585] 	BITMAP "##......"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",585
                                	;[586] 	BITMAP "##......"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",586
6104   C0C0                     	DECLE 49344
                                	;[587] 	BITMAP "##......"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",587
                                	;[588] 	BITMAP "##......"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",588
6105   C0C0                     	DECLE 49344
                                	;[589] 	'left
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",589
                                	;[590] 	BITMAP "..##...."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",590
                                	;[591] 	BITMAP "..##...."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",591
6106   3030                     	DECLE 12336
                                	;[592] 	BITMAP "..##...."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",592
                                	;[593] 	BITMAP "..##...."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",593
6107   3030                     	DECLE 12336
                                	;[594] 	BITMAP "..###..."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",594
                                	;[595] 	BITMAP "...##..."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",595
6108   1838                     	DECLE 6200
                                	;[596] 	BITMAP "...##..."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",596
                                	;[597] 	BITMAP "...##..."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",597
6109   1818                     	DECLE 6168
                                	;[598] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",598
                                	;[599] apple:
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",599
                                	; APPLE
0x610A                          Q18:	;[600] 	BITMAP ".....#.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",600
                                	;[601] 	BITMAP "....#..."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",601
610A   0804                     	DECLE 2052
                                	;[602] 	BITMAP "..##.##."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",602
                                	;[603] 	BITMAP ".#######"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",603
610B   7F36                     	DECLE 32566
                                	;[604] 	BITMAP ".#######"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",604
                                	;[605] 	BITMAP ".#######"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",605
610C   7F7F                     	DECLE 32639
                                	;[606] 	BITMAP "..#####."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",606
                                	;[607] 	BITMAP "..##.##."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",607
610D   363E                     	DECLE 13886
                                	;[608] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",608
                                	;[609] nothing:
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",609
                                	; NOTHING
0x610E                          Q15:	;[610] 	BITMAP "........"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",610
                                	;[611] 	BITMAP "........"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",611
610E   0000                     	DECLE 0
                                	;[612] 	BITMAP "........"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",612
                                	;[613] 	BITMAP "........"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",613
610F   0000                     	DECLE 0
                                	;[614] 	BITMAP "........"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",614
                                	;[615] 	BITMAP "........"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",615
6110   0000                     	DECLE 0
                                	;[616] 	BITMAP "........"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",616
                                	;[617] 	BITMAP "........"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",617
6111   0000                     	DECLE 0
                                	;[618] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",618
                                	;[619] rock:
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",619
                                	; ROCK
0x6112                          Q16:	;[620] 	BITMAP "..#####."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",620
                                	;[621] 	BITMAP ".#.#####"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",621
6112   5F3E                     	DECLE 24382
                                	;[622] 	BITMAP "####..##"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",622
                                	;[623] 	BITMAP "####.###"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",623
6113   F7F3                     	DECLE 63475
                                	;[624] 	BITMAP "########"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",624
                                	;[625] 	BITMAP "########"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",625
6114   FFFF                     	DECLE 65535
                                	;[626] 	BITMAP ".###.##."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",626
                                	;[627] 	BITMAP "..####.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",627
6115   3C76                     	DECLE 15478
                                	;[628] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",628
                                	;[629] coin:
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",629
                                	; COIN
0x6116                          Q17:	;[630] 	BITMAP "..####.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",630
                                	;[631] 	BITMAP ".######."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",631
6116   7E3C                     	DECLE 32316
                                	;[632] 	BITMAP "########"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",632
                                	;[633] 	BITMAP "###..###"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",633
6117   E7FF                     	DECLE 59391
                                	;[634] 	BITMAP "###..###"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",634
                                	;[635] 	BITMAP "########"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",635
6118   FFE7                     	DECLE 65511
                                	;[636] 	BITMAP ".######."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",636
                                	;[637] 	BITMAP "..####.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",637
6119   3C7E                     	DECLE 15486
                                	;[638] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",638
                                	;[639] 	' 49 bitmaps
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",639
                                	;[640] screen_bitmaps_0:
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",640
                                	; SCREEN_BITMAPS_0
0x611A                          Q8:	;[641] 	DATA $FFFF,$E0FF,$E0E0,$E0E0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",641
611A   FFFF                     	DECLE 65535
611B   E0FF                     	DECLE 57599
611C   E0E0                     	DECLE 57568
611D   E0E0                     	DECLE 57568
                                	;[642] 	DATA $FFFF,$00FF,$0000,$0000
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",642
611E   FFFF                     	DECLE 65535
611F   00FF                     	DECLE 255
6120   0000                     	DECLE 0
6121   0000                     	DECLE 0
                                	;[643] 	DATA $FFFF,$07FF,$0707,$0707
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",643
6122   FFFF                     	DECLE 65535
6123   07FF                     	DECLE 2047
6124   0707                     	DECLE 1799
6125   0707                     	DECLE 1799
                                	;[644] 	DATA $0100,$0D07,$1F1F,$FF7F
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",644
6126   0100                     	DECLE 256
6127   0D07                     	DECLE 3335
6128   1F1F                     	DECLE 7967
6129   FF7F                     	DECLE 65407
                                	;[645] 	DATA $76E0,$BA6F,$F7CD,$FFFF
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",645
612A   76E0                     	DECLE 30432
612B   BA6F                     	DECLE 47727
612C   F7CD                     	DECLE 63437
612D   FFFF                     	DECLE 65535
                                	;[646] 	DATA $E0E0,$E0E0,$E0E0,$E0E0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",646
612E   E0E0                     	DECLE 57568
612F   E0E0                     	DECLE 57568
6130   E0E0                     	DECLE 57568
6131   E0E0                     	DECLE 57568
                                	;[647] 	DATA $6000,$C390,$1424,$6394
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",647
6132   6000                     	DECLE 24576
6133   C390                     	DECLE 50064
6134   1424                     	DECLE 5156
6135   6394                     	DECLE 25492
                                	;[648] 	DATA $0000,$3B00,$45C5,$3BC5
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",648
6136   0000                     	DECLE 0
6137   3B00                     	DECLE 15104
6138   45C5                     	DECLE 17861
6139   3BC5                     	DECLE 15301
                                	;[649] 	DATA $0000,$D900,$3C24,$9D20
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",649
613A   0000                     	DECLE 0
613B   D900                     	DECLE 55552
613C   3C24                     	DECLE 15396
613D   9D20                     	DECLE 40224
                                	;[650] 	DATA $0707,$0707,$0707,$0707
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",650
613E   0707                     	DECLE 1799
613F   0707                     	DECLE 1799
6140   0707                     	DECLE 1799
6141   0707                     	DECLE 1799
                                	;[651] 	DATA $E000,$4542,$4242,$FF4A
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",651
6142   E000                     	DECLE 57344
6143   4542                     	DECLE 17730
6144   4242                     	DECLE 16962
6145   FF4A                     	DECLE 65354
                                	;[652] 	DATA $0000,$A600,$AFA9,$47C8
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",652
6146   0000                     	DECLE 0
6147   A600                     	DECLE 42496
6148   AFA9                     	DECLE 44969
6149   47C8                     	DECLE 18376
                                	;[653] 	DATA $0000,$3C00,$3040,$7408
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",653
614A   0000                     	DECLE 0
614B   3C00                     	DECLE 15360
614C   3040                     	DECLE 12352
614D   7408                     	DECLE 29704
                                	;[654] 	DATA $FFFF,$FEFE,$FCFC,$F8F8
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",654
614E   FFFF                     	DECLE 65535
614F   FEFE                     	DECLE 65278
6150   FCFC                     	DECLE 64764
6151   F8F8                     	DECLE 63736
                                	;[655] 	DATA $0F00,$1F1F,$3F3F,$7F7F
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",655
6152   0F00                     	DECLE 3840
6153   1F1F                     	DECLE 7967
6154   3F3F                     	DECLE 16191
6155   7F7F                     	DECLE 32639
                                	;[656] 	DATA $FF00,$FFFF,$FFFF,$FFFF
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",656
6156   FF00                     	DECLE 65280
6157   FFFF                     	DECLE 65535
6158   FFFF                     	DECLE 65535
6159   FFFF                     	DECLE 65535
                                	;[657] screen_bitmaps_1:
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",657
                                	; SCREEN_BITMAPS_1
0x615A                          Q9:	;[658] 	DATA $FE00,$FEFE,$FEFE,$FEFE
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",658
615A   FE00                     	DECLE 65024
615B   FEFE                     	DECLE 65278
615C   FEFE                     	DECLE 65278
615D   FEFE                     	DECLE 65278
                                	;[659] 	DATA $7F00,$7F7F,$7F7F,$BF7F
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",659
615E   7F00                     	DECLE 32512
615F   7F7F                     	DECLE 32639
6160   7F7F                     	DECLE 32639
6161   BF7F                     	DECLE 49023
                                	;[660] 	DATA $F000,$F8F8,$FCFC,$FEFE
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",660
6162   F000                     	DECLE 61440
6163   F8F8                     	DECLE 63736
6164   FCFC                     	DECLE 64764
6165   FEFE                     	DECLE 65278
                                	;[661] 	DATA $0101,$0000,$0000,$0000
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",661
6166   0101                     	DECLE 257
6167   0000                     	DECLE 0
6168   0000                     	DECLE 0
6169   0000                     	DECLE 0
                                	;[662] 	DATA $FFFF,$7FFF,$3F7F,$1F1F
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",662
616A   FFFF                     	DECLE 65535
616B   7FFF                     	DECLE 32767
616C   3F7F                     	DECLE 16255
616D   1F1F                     	DECLE 7967
                                	;[663] 	DATA $F0F0,$C0E0,$80C0,$0080
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",663
616E   F0F0                     	DECLE 61680
616F   C0E0                     	DECLE 49376
6170   80C0                     	DECLE 32960
6171   0080                     	DECLE 128
                                	;[664] 	DATA $0000,$0101,$0303,$0707
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",664
6172   0000                     	DECLE 0
6173   0101                     	DECLE 257
6174   0303                     	DECLE 771
6175   0707                     	DECLE 1799
                                	;[665] 	DATA $FDFD,$FDFD,$FDFD,$FBFD
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",665
6176   FDFD                     	DECLE 65021
6177   FDFD                     	DECLE 65021
6178   FDFD                     	DECLE 65021
6179   FBFD                     	DECLE 64509
                                	;[666] 	DATA $BFBF,$BFBF,$BFBF,$DFDF
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",666
617A   BFBF                     	DECLE 49087
617B   BFBF                     	DECLE 49087
617C   BFBF                     	DECLE 49087
617D   DFDF                     	DECLE 57311
                                	;[667] 	DATA $0000,$8080,$C0C0,$E0E0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",667
617E   0000                     	DECLE 0
617F   8080                     	DECLE 32896
6180   C0C0                     	DECLE 49344
6181   E0E0                     	DECLE 57568
                                	;[668] 	DATA $070F,$0307,$0101,$0000
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",668
6182   070F                     	DECLE 1807
6183   0307                     	DECLE 775
6184   0101                     	DECLE 257
6185   0000                     	DECLE 0
                                	;[669] 	DATA $FFFF,$FFFF,$FFFF,$7FFF
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",669
6186   FFFF                     	DECLE 65535
6187   FFFF                     	DECLE 65535
6188   FFFF                     	DECLE 65535
6189   7FFF                     	DECLE 32767
                                	;[670] 	DATA $FEFF,$FCFE,$F8FC,$F0F8
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",670
618A   FEFF                     	DECLE 65279
618B   FCFE                     	DECLE 64766
618C   F8FC                     	DECLE 63740
618D   F0F8                     	DECLE 61688
                                	;[671] 	DATA $0F0F,$1F1F,$3F3F,$7F7F
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",671
618E   0F0F                     	DECLE 3855
618F   1F1F                     	DECLE 7967
6190   3F3F                     	DECLE 16191
6191   7F7F                     	DECLE 32639
                                	;[672] 	DATA $FBFB,$FBFB,$FBFB,$F7F7
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",672
6192   FBFB                     	DECLE 64507
6193   FBFB                     	DECLE 64507
6194   FBFB                     	DECLE 64507
6195   F7F7                     	DECLE 63479
                                	;[673] 	DATA $DFDF,$DFDF,$EFDF,$EFEF
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",673
6196   DFDF                     	DECLE 57311
6197   DFDF                     	DECLE 57311
6198   EFDF                     	DECLE 61407
6199   EFEF                     	DECLE 61423
                                	;[674] screen_bitmaps_2:
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",674
                                	; SCREEN_BITMAPS_2
0x619A                          Q10:	;[675] 	DATA $F0F0,$F8F8,$FCFC,$FEFE
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",675
619A   F0F0                     	DECLE 61680
619B   F8F8                     	DECLE 63736
619C   FCFC                     	DECLE 64764
619D   FEFE                     	DECLE 65278
                                	;[676] 	DATA $3F7F,$1F1F,$070F,$0307
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",676
619E   3F7F                     	DECLE 16255
619F   1F1F                     	DECLE 7967
61A0   070F                     	DECLE 1807
61A1   0307                     	DECLE 775
                                	;[677] 	DATA $E000,$4340,$4744,$FB4C
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",677
61A2   E000                     	DECLE 57344
61A3   4340                     	DECLE 17216
61A4   4744                     	DECLE 18244
61A5   FB4C                     	DECLE 64332
                                	;[678] 	DATA $0000,$3400,$9595,$8819
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",678
61A6   0000                     	DECLE 0
61A7   3400                     	DECLE 13312
61A8   9595                     	DECLE 38293
61A9   8819                     	DECLE 34841
                                	;[679] 	DATA $0C00,$C604,$E424,$EE04
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",679
61AA   0C00                     	DECLE 3072
61AB   C604                     	DECLE 50692
61AC   E424                     	DECLE 58404
61AD   EE04                     	DECLE 60932
                                	;[680] 	DATA $E0E0,$C0C0,$8080,$0000
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",680
61AE   E0E0                     	DECLE 57568
61AF   C0C0                     	DECLE 49344
61B0   8080                     	DECLE 32896
61B1   0000                     	DECLE 0
                                	;[681] 	DATA $F7F7,$F7F7,$EFF7,$EFEF
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",681
61B2   F7F7                     	DECLE 63479
61B3   F7F7                     	DECLE 63479
61B4   EFF7                     	DECLE 61431
61B5   EFEF                     	DECLE 61423
                                	;[682] 	DATA $EFEF,$EFEF,$F7F7,$F7F7
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",682
61B6   EFEF                     	DECLE 61423
61B7   EFEF                     	DECLE 61423
61B8   F7F7                     	DECLE 63479
61B9   F7F7                     	DECLE 63479
                                	;[683] 	DATA $EFEF,$EFEF,$DFDF,$DFDF
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",683
61BA   EFEF                     	DECLE 61423
61BB   EFEF                     	DECLE 61423
61BC   DFDF                     	DECLE 57311
61BD   DFDF                     	DECLE 57311
                                	;[684] 	DATA $F7F7,$FBF7,$FBFB,$FBFB
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",684
61BE   F7F7                     	DECLE 63479
61BF   FBF7                     	DECLE 64503
61C0   FBFB                     	DECLE 64507
61C1   FBFB                     	DECLE 64507
                                	;[685] 	DATA $DFDF,$BFDF,$BFBF,$BFBF
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",685
61C2   DFDF                     	DECLE 57311
61C3   BFDF                     	DECLE 49119
61C4   BFBF                     	DECLE 49087
61C5   BFBF                     	DECLE 49087
                                	;[686] 	DATA $FBFB,$FDFD,$FDFD,$FDFD
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",686
61C6   FBFB                     	DECLE 64507
61C7   FDFD                     	DECLE 65021
61C8   FDFD                     	DECLE 65021
61C9   FDFD                     	DECLE 65021
                                	;[687] 	DATA $BFBF,$7F7F,$7F7F,$7F7F
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",687
61CA   BFBF                     	DECLE 49087
61CB   7F7F                     	DECLE 32639
61CC   7F7F                     	DECLE 32639
61CD   7F7F                     	DECLE 32639
                                	;[688] 	DATA $FEFD,$FEFE,$FEFE,$FEFE
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",688
61CE   FEFD                     	DECLE 65277
61CF   FEFE                     	DECLE 65278
61D0   FEFE                     	DECLE 65278
61D1   FEFE                     	DECLE 65278
                                	;[689] 	DATA $E0E0,$E0E0,$FFE0,$FFFF
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",689
61D2   E0E0                     	DECLE 57568
61D3   E0E0                     	DECLE 57568
61D4   FFE0                     	DECLE 65504
61D5   FFFF                     	DECLE 65535
                                	;[690] 	DATA $0000,$0000,$FF00,$FFFF
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",690
61D6   0000                     	DECLE 0
61D7   0000                     	DECLE 0
61D8   FF00                     	DECLE 65280
61D9   FFFF                     	DECLE 65535
                                	;[691] screen_bitmaps_3:
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",691
                                	; SCREEN_BITMAPS_3
0x61DA                          Q11:	;[692] 	DATA $0707,$0707,$FF07,$FFFF
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",692
61DA   0707                     	DECLE 1799
61DB   0707                     	DECLE 1799
61DC   FF07                     	DECLE 65287
61DD   FFFF                     	DECLE 65535
                                	;[693] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",693
                                	;[694] 	REM 20x12 cards
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",694
                                	;[695] screen_cards:
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",695
                                	; SCREEN_CARDS
0x61DE                          Q27:	;[696] 	DATA $1200,$1200,$1200,$1200,$1200,$1200,$1200,$1200,$1200,$1200,$1200,$1200,$1200,$1200,$1200,$1E00,$1E08,$1E08,$1E08,$1E10
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",696
61DE   1200                     	DECLE 4608
61DF   1200                     	DECLE 4608
61E0   1200                     	DECLE 4608
61E1   1200                     	DECLE 4608
61E2   1200                     	DECLE 4608
61E3   1200                     	DECLE 4608
61E4   1200                     	DECLE 4608
61E5   1200                     	DECLE 4608
61E6   1200                     	DECLE 4608
61E7   1200                     	DECLE 4608
61E8   1200                     	DECLE 4608
61E9   1200                     	DECLE 4608
61EA   1200                     	DECLE 4608
61EB   1200                     	DECLE 4608
61EC   1200                     	DECLE 4608
61ED   1E00                     	DECLE 7680
61EE   1E08                     	DECLE 7688
61EF   1E08                     	DECLE 7688
61F0   1E08                     	DECLE 7688
61F1   1E10                     	DECLE 7696
                                	;[697] 	DATA $1200,$1A1F,$1A27,$1200,$1200,$1200,$1200,$1200,$1200,$1A1F,$1A27,$1200,$1200,$1200,$1200,$1E28,$1E37,$1E3F,$1E47,$1E48
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",697
61F2   1200                     	DECLE 4608
61F3   1A1F                     	DECLE 6687
61F4   1A27                     	DECLE 6695
61F5   1200                     	DECLE 4608
61F6   1200                     	DECLE 4608
61F7   1200                     	DECLE 4608
61F8   1200                     	DECLE 4608
61F9   1200                     	DECLE 4608
61FA   1200                     	DECLE 4608
61FB   1A1F                     	DECLE 6687
61FC   1A27                     	DECLE 6695
61FD   1200                     	DECLE 4608
61FE   1200                     	DECLE 4608
61FF   1200                     	DECLE 4608
6200   1200                     	DECLE 4608
6201   1E28                     	DECLE 7720
6202   1E37                     	DECLE 7735
6203   1E3F                     	DECLE 7743
6204   1E47                     	DECLE 7751
6205   1E48                     	DECLE 7752
                                	;[698] 	DATA $1200,$1200,$1200,$1200,$1A1F,$1A27,$1200,$1200,$1200,$1200,$1200,$1200,$1200,$1200,$1200,$1E28,$1600,$1600,$1600,$1E48
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",698
6206   1200                     	DECLE 4608
6207   1200                     	DECLE 4608
6208   1200                     	DECLE 4608
6209   1200                     	DECLE 4608
620A   1A1F                     	DECLE 6687
620B   1A27                     	DECLE 6695
620C   1200                     	DECLE 4608
620D   1200                     	DECLE 4608
620E   1200                     	DECLE 4608
620F   1200                     	DECLE 4608
6210   1200                     	DECLE 4608
6211   1200                     	DECLE 4608
6212   1200                     	DECLE 4608
6213   1200                     	DECLE 4608
6214   1200                     	DECLE 4608
6215   1E28                     	DECLE 7720
6216   1600                     	DECLE 5632
6217   1600                     	DECLE 5632
6218   1600                     	DECLE 5632
6219   1E48                     	DECLE 7752
                                	;[699] 	DATA $1200,$1200,$1200,$1200,$1200,$1200,$1200,$1A1F,$1A27,$1200,$1200,$1200,$1200,$1200,$1200,$1E28,$1600,$1600,$1600,$1E48
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",699
621A   1200                     	DECLE 4608
621B   1200                     	DECLE 4608
621C   1200                     	DECLE 4608
621D   1200                     	DECLE 4608
621E   1200                     	DECLE 4608
621F   1200                     	DECLE 4608
6220   1200                     	DECLE 4608
6221   1A1F                     	DECLE 6687
6222   1A27                     	DECLE 6695
6223   1200                     	DECLE 4608
6224   1200                     	DECLE 4608
6225   1200                     	DECLE 4608
6226   1200                     	DECLE 4608
6227   1200                     	DECLE 4608
6228   1200                     	DECLE 4608
6229   1E28                     	DECLE 7720
622A   1600                     	DECLE 5632
622B   1600                     	DECLE 5632
622C   1600                     	DECLE 5632
622D   1E48                     	DECLE 7752
                                	;[700] 	DATA $1200,$1200,$1200,$1200,$1200,$1200,$1200,$1200,$1200,$1200,$1200,$1200,$1200,$1200,$1200,$1E28,$1E57,$1E5F,$1E67,$1E48
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",700
622E   1200                     	DECLE 4608
622F   1200                     	DECLE 4608
6230   1200                     	DECLE 4608
6231   1200                     	DECLE 4608
6232   1200                     	DECLE 4608
6233   1200                     	DECLE 4608
6234   1200                     	DECLE 4608
6235   1200                     	DECLE 4608
6236   1200                     	DECLE 4608
6237   1200                     	DECLE 4608
6238   1200                     	DECLE 4608
6239   1200                     	DECLE 4608
623A   1200                     	DECLE 4608
623B   1200                     	DECLE 4608
623C   1200                     	DECLE 4608
623D   1E28                     	DECLE 7720
623E   1E57                     	DECLE 7767
623F   1E5F                     	DECLE 7775
6240   1E67                     	DECLE 7783
6241   1E48                     	DECLE 7752
                                	;[701] 	DATA $2400,$186E,$1000,$1874,$187C,$1884,$187C,$187C,$188C,$187C,$1894,$189E,$18A6,$2400,$2400,$1E28,$1600,$1600,$1600,$1E48
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",701
6242   2400                     	DECLE 9216
6243   186E                     	DECLE 6254
6244   1000                     	DECLE 4096
6245   1874                     	DECLE 6260
6246   187C                     	DECLE 6268
6247   1884                     	DECLE 6276
6248   187C                     	DECLE 6268
6249   187C                     	DECLE 6268
624A   188C                     	DECLE 6284
624B   187C                     	DECLE 6268
624C   1894                     	DECLE 6292
624D   189E                     	DECLE 6302
624E   18A6                     	DECLE 6310
624F   2400                     	DECLE 9216
6250   2400                     	DECLE 9216
6251   1E28                     	DECLE 7720
6252   1600                     	DECLE 5632
6253   1600                     	DECLE 5632
6254   1600                     	DECLE 5632
6255   1E48                     	DECLE 7752
                                	;[702] 	DATA $2400,$18AE,$18B4,$2000,$2000,$18BC,$2000,$2000,$18C4,$2000,$2000,$18CC,$18D6,$18DE,$2400,$1E28,$1600,$1600,$1600,$1E48
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",702
6256   2400                     	DECLE 9216
6257   18AE                     	DECLE 6318
6258   18B4                     	DECLE 6324
6259   2000                     	DECLE 8192
625A   2000                     	DECLE 8192
625B   18BC                     	DECLE 6332
625C   2000                     	DECLE 8192
625D   2000                     	DECLE 8192
625E   18C4                     	DECLE 6340
625F   2000                     	DECLE 8192
6260   2000                     	DECLE 8192
6261   18CC                     	DECLE 6348
6262   18D6                     	DECLE 6358
6263   18DE                     	DECLE 6366
6264   2400                     	DECLE 9216
6265   1E28                     	DECLE 7720
6266   1600                     	DECLE 5632
6267   1600                     	DECLE 5632
6268   1600                     	DECLE 5632
6269   1E48                     	DECLE 7752
                                	;[703] 	DATA $18E6,$1000,$18EC,$2000,$2000,$18F4,$2000,$2000,$18FC,$2000,$2000,$1904,$1000,$190E,$2400,$1E28,$1F17,$1F1F,$1F27,$1E48
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",703
626A   18E6                     	DECLE 6374
626B   1000                     	DECLE 4096
626C   18EC                     	DECLE 6380
626D   2000                     	DECLE 8192
626E   2000                     	DECLE 8192
626F   18F4                     	DECLE 6388
6270   2000                     	DECLE 8192
6271   2000                     	DECLE 8192
6272   18FC                     	DECLE 6396
6273   2000                     	DECLE 8192
6274   2000                     	DECLE 8192
6275   1904                     	DECLE 6404
6276   1000                     	DECLE 4096
6277   190E                     	DECLE 6414
6278   2400                     	DECLE 9216
6279   1E28                     	DECLE 7720
627A   1F17                     	DECLE 7959
627B   1F1F                     	DECLE 7967
627C   1F27                     	DECLE 7975
627D   1E48                     	DECLE 7752
                                	;[704] 	DATA $192E,$18B4,$2000,$2000,$2000,$1934,$2000,$2000,$193C,$2000,$2000,$2000,$18CC,$189E,$18A6,$1E28,$1600,$1600,$1600,$1E48
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",704
627E   192E                     	DECLE 6446
627F   18B4                     	DECLE 6324
6280   2000                     	DECLE 8192
6281   2000                     	DECLE 8192
6282   2000                     	DECLE 8192
6283   1934                     	DECLE 6452
6284   2000                     	DECLE 8192
6285   2000                     	DECLE 8192
6286   193C                     	DECLE 6460
6287   2000                     	DECLE 8192
6288   2000                     	DECLE 8192
6289   2000                     	DECLE 8192
628A   18CC                     	DECLE 6348
628B   189E                     	DECLE 6302
628C   18A6                     	DECLE 6310
628D   1E28                     	DECLE 7720
628E   1600                     	DECLE 5632
628F   1600                     	DECLE 5632
6290   1600                     	DECLE 5632
6291   1E48                     	DECLE 7752
                                	;[705] 	DATA $1000,$18EC,$2000,$2000,$2000,$1944,$2000,$2000,$194C,$2000,$2000,$2000,$1904,$1000,$18D6,$1E28,$1600,$1600,$1600,$1E48
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",705
6292   1000                     	DECLE 4096
6293   18EC                     	DECLE 6380
6294   2000                     	DECLE 8192
6295   2000                     	DECLE 8192
6296   2000                     	DECLE 8192
6297   1944                     	DECLE 6468
6298   2000                     	DECLE 8192
6299   2000                     	DECLE 8192
629A   194C                     	DECLE 6476
629B   2000                     	DECLE 8192
629C   2000                     	DECLE 8192
629D   2000                     	DECLE 8192
629E   1904                     	DECLE 6404
629F   1000                     	DECLE 4096
62A0   18D6                     	DECLE 6358
62A1   1E28                     	DECLE 7720
62A2   1600                     	DECLE 5632
62A3   1600                     	DECLE 5632
62A4   1600                     	DECLE 5632
62A5   1E48                     	DECLE 7752
                                	;[706] 	DATA $18B4,$2000,$2000,$2000,$2000,$1954,$2000,$2000,$195C,$2000,$2000,$2000,$2000,$18CC,$1000,$1E28,$1600,$1600,$1600,$1E48
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",706
62A6   18B4                     	DECLE 6324
62A7   2000                     	DECLE 8192
62A8   2000                     	DECLE 8192
62A9   2000                     	DECLE 8192
62AA   2000                     	DECLE 8192
62AB   1954                     	DECLE 6484
62AC   2000                     	DECLE 8192
62AD   2000                     	DECLE 8192
62AE   195C                     	DECLE 6492
62AF   2000                     	DECLE 8192
62B0   2000                     	DECLE 8192
62B1   2000                     	DECLE 8192
62B2   2000                     	DECLE 8192
62B3   18CC                     	DECLE 6348
62B4   1000                     	DECLE 4096
62B5   1E28                     	DECLE 7720
62B6   1600                     	DECLE 5632
62B7   1600                     	DECLE 5632
62B8   1600                     	DECLE 5632
62B9   1E48                     	DECLE 7752
                                	;[707] 	DATA $18EC,$2000,$2000,$2000,$2000,$1964,$2000,$2000,$196C,$2000,$2000,$2000,$2000,$1904,$1000,$1F70,$1F78,$1F78,$1F78,$1F80
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",707
62BA   18EC                     	DECLE 6380
62BB   2000                     	DECLE 8192
62BC   2000                     	DECLE 8192
62BD   2000                     	DECLE 8192
62BE   2000                     	DECLE 8192
62BF   1964                     	DECLE 6500
62C0   2000                     	DECLE 8192
62C1   2000                     	DECLE 8192
62C2   196C                     	DECLE 6508
62C3   2000                     	DECLE 8192
62C4   2000                     	DECLE 8192
62C5   2000                     	DECLE 8192
62C6   2000                     	DECLE 8192
62C7   1904                     	DECLE 6404
62C8   1000                     	DECLE 4096
62C9   1F70                     	DECLE 8048
62CA   1F78                     	DECLE 8056
62CB   1F78                     	DECLE 8056
62CC   1F78                     	DECLE 8056
62CD   1F80                     	DECLE 8064
                                	;ENDFILE
                                	SRCFILE "",0
0x1                             intybasic_fastmult:	equ 1	; Forces to include fast multiplication
                                        ;
                                        ; Epilogue for IntyBASIC programs
                                        ; by Oscar Toledo G.  http://nanochess.org/
                                        ;
                                        ; Revision: Jan/30/2014. Moved GRAM code below MOB updates.
                                        ;                        Added comments.
                                        ; Revision: Feb/26/2014. Optimized access to collision registers
                                        ;                        per DZ-Jay suggestion. Added scrolling
                                        ;                        routines with optimization per intvnut
                                        ;                        suggestion. Added border/mask support.
                                        ; Revision: Apr/02/2014. Added support to set MODE (color stack
                                        ;                        or foreground/background), added support
                                        ;                        for SCREEN statement.
                                        ; Revision: Aug/19/2014. Solved bug in bottom scroll, moved an
                                        ;                        extra unneeded line.
                                        ; Revision: Aug/26/2014. Integrated music player and NTSC/PAL
                                        ;                        detection.
                                        ; Revision: Oct/24/2014. Adjust in some comments.
                                        ; Revision: Nov/13/2014. Integrated Joseph Zbiciak's routines
                                        ;                        for printing numbers.
                                        ; Revision: Nov/17/2014. Redesigned MODE support to use a single
                                        ;                        variable.
                                        ; Revision: Nov/21/2014. Added Intellivoice support routines made
                                        ;                        by Joseph Zbiciak.
                                	; Revision: Dec/11/2014. Optimized keypad decode routines.
                                	; Revision: Jan/25/2015. Added marker for insertion of ON FRAME GOSUB
                                	; Revision: Feb/17/2015. Allows to deactivate music player (PLAY NONE)
                                	; Revision: Apr/21/2015. Accelerates common case of keypad not pressed.
                                	;                        Added ECS ROM disable code.
                                	; Revision: Apr/22/2015. Added Joseph Zbiciak accelerated multiplication
                                	;                        routines.
                                	; Revision: Jun/04/2015. Optimized play_music (per GroovyBee suggestion)
                                	; Revision: Jul/25/2015. Added infinite loop at start to avoid crashing
                                	;                        with empty programs. Solved bug where _color
                                	;                        didn't started with white.
                                	; Revision: Aug/20/2015. Moved ECS mapper disable code so nothing gets
                                	;                        after it (GroovyBee 42K sample code)
                                	; Revision: Aug/21/2015. Added Joseph Zbiciak routines for JLP Flash
                                	;                        handling.
                                	; Revision: Aug/31/2015. Added CPYBLK2 for SCREEN fifth argument.
                                	; Revision: Sep/01/2015. Defined labels Q1 and Q2 as alias.
                                	; Revision: Jan/22/2016. Music player allows not to use noise channel
                                	;                        for drums. Allows setting music volume.
                                	; Revision: Jan/23/2016. Added jump inside of music (for MUSIC JUMP)
                                	; Revision: May/03/2016. Preserves current mode in bit 0 of _mode_select

                                	;
                                	; Avoids empty programs to crash
                                	; 
62CE   0220 0001                stuck:	B stuck

                                	;
                                	; Copy screen helper for SCREEN wide statement
                                	;

0x62D0                          CPYBLK2:	PROC
62D0   0083                     	MOVR R0,R3		; Offset
62D1   00AA                     	MOVR R5,R2
62D2   02B0                     	PULR R0
62D3   02B1                     	PULR R1
62D4   02B5                     	PULR R5
62D5   02B4                     	PULR R4
62D6   0272                     	PSHR R2
62D7   010B                     	SUBR R1,R3

62D8   0273                     @@1:    PSHR R3
62D9   008B                     	MOVR R1,R3              ; Init line copy
62DA   02A2                     @@2:    MVI@ R4,R2              ; Copy line
62DB   026A                             MVO@ R2,R5
62DC   0013                             DECR R3
62DD   022C 0004                        BNE @@2
62DF   02B3                             PULR R3                 ; Add offset to start in next line
62E0   00DC                             ADDR R3,R4
62E1   010D                     	SUBR R1,R5
62E2   02FD 0014                        ADDI #20,R5
62E4   0010                             DECR R0                 ; Count lines
62E5   022C 000E                        BNE @@1

62E7   02B7                     	RETURN
                                	ENDP

                                        ;
                                        ; Copy screen helper for SCREEN statement
                                        ;
0x62E8                          CPYBLK: PROC
62E8   0275                             BEGIN
62E9   009C                             MOVR R3,R4
62EA   0095                             MOVR R2,R5

62EB   008B                     @@1:    MOVR R1,R3              ; Init line copy
62EC   02A2                     @@2:    MVI@ R4,R2              ; Copy line
62ED   026A                             MVO@ R2,R5
62EE   0013                             DECR R3
62EF   022C 0004                        BNE @@2
62F1   02BB 0014                        MVII #20,R3             ; Add offset to start in next line
62F3   010B                             SUBR R1,R3
62F4   00DC                             ADDR R3,R4
62F5   00DD                             ADDR R3,R5
62F6   0010                             DECR R0                 ; Count lines
62F7   022C 000D                        BNE @@1
62F9   02B7                     	RETURN
                                        ENDP

                                        ;
                                        ; Wait for interruption
                                        ;
0x62FA                          _wait:  PROC

                                    IF DEFINED intybasic_keypad
                                        MVI $01FF,R0
                                        COMR R0
                                        ANDI #$FF,R0
                                        CMP _cnt1_p0,R0
                                        BNE @@2
                                        CMP _cnt1_p1,R0
                                        BNE @@2
                                	TSTR R0		; Accelerates common case of key not pressed
                                	MVII #_keypad_table+13,R4
                                	BEQ @@4
                                        MVII #_keypad_table,R4
                                    REPEAT 6
                                        CMP@ R4,R0
                                        BEQ @@4
                                	CMP@ R4,R0
                                        BEQ @@4
                                    ENDR
                                	INCR R4
                                @@4:    SUBI #_keypad_table+1,R4
                                	MVO R4,_cnt1_key

                                @@2:    MVI _cnt1_p1,R1
                                        MVO R1,_cnt1_p0
                                        MVO R0,_cnt1_p1

                                        MVI $01FE,R0
                                        COMR R0
                                        ANDI #$FF,R0
                                        CMP _cnt2_p0,R0
                                        BNE @@5
                                        CMP _cnt2_p1,R0
                                        BNE @@5
                                	TSTR R0		; Accelerates common case of key not pressed
                                	MVII #_keypad_table+13,R4
                                	BEQ @@7
                                        MVII #_keypad_table,R4
                                    REPEAT 6
                                        CMP@ R4,R0
                                        BEQ @@7
                                	CMP@ R4,R0
                                	BEQ @@7
                                    ENDR

                                	INCR R4
                                @@7:    SUBI #_keypad_table+1,R4
                                	MVO R4,_cnt2_key

                                @@5:    MVI _cnt2_p1,R1
                                        MVO R1,_cnt2_p0
                                        MVO R0,_cnt2_p1
                                    ENDI

62FA   01C0                             CLRR    R0
62FB   0240 0102                        MVO     R0,_int         ; Clears waiting flag
62FD   0340 0102                @@1:    CMP     _int,  R0       ; Waits for change
62FF   0224 0003                        BEQ     @@1
6301   00AF                             JR      R5              ; Returns
                                        ENDP

                                        ;
                                        ; Keypad table
                                        ;
0x6302                          _keypad_table:          PROC
6302   0048 0081 0041 0021              DECLE $48,$81,$41,$21,$82,$42,$22,$84,$44,$24,$88,$28
6306   0082 0042 0022 0084 0044 0024 0088 0028 
                                        ENDP

0x630E                          _pal1_vector:    PROC
630E   02B8 631A                        MVII #_pal2_vector,R0
6310   0240 0100                        MVO R0,ISRVEC
6312   0040                             SWAP R0
6313   0240 0101                        MVO R0,ISRVEC+1
6315   02B8 0003                        MVII #3,R0
6317   0240 0103                        MVO R0,_ntsc
6319   00AF                             JR R5
                                        ENDP

0x631A                          _pal2_vector:    PROC
631A   02B8 632E                        MVII #_int_vector,R0     ; Point to "real" interruption handler
631C   0240 0100                        MVO R0,ISRVEC
631E   0040                             SWAP R0
631F   0240 0101                        MVO R0,ISRVEC+1
6321   02B8 0004                        MVII #4,R0
6323   0240 0103                        MVO R0,_ntsc
6325   01C0                     	CLRR R0
6326   01E4                     	CLRR R4
6327   02B9 0018                	MVII #$18,R1
6329   0260                     @@1:	MVO@ R0,R4
632A   0011                     	DECR R1
632B   022C 0003                	BNE @@1
632D   00AF                             JR R5
                                        ENDP

                                        ;
                                        ; Interruption routine
                                        ;
0x632E                          _int_vector:     PROC
632E   0275                             BEGIN

632F   0240 0020                        MVO     R0,     $20     ; Activates display

                                    IF DEFINED intybasic_stack
                                	CMPI #$308,R6
                                	BNC @@vs
                                	MVI $21,R0	; Activates Color Stack mode
                                	CLRR R0
                                	MVO R0,$28
                                	MVO R0,$29
                                	MVO R0,$2A
                                	MVO R0,$2B
                                	MVII #@@vs1,R4
                                	MVII #$200,R5
                                	MVII #20,R1
                                @@vs2:	MVI@ R4,R0
                                	MVO@ R0,R5
                                	DECR R1
                                	BNE @@vs2
                                	RETURN

                                	; Stack Overflow message
                                @@vs1:	DECLE 0,0,0,$33*8+7,$54*8+7,$41*8+7,$43*8+7,$4B*8+7,$00*8+7
                                	DECLE $4F*8+7,$56*8+7,$45*8+7,$52*8+7,$46*8+7,$4C*8+7
                                	DECLE $4F*8+7,$57*8+7,0,0,0

                                @@vs:
                                    ENDI
6331   02B8 0001                        MVII    #1,     R0
6333   0240 0102                        MVO     R0,     _int    ; Indicates interrupt happened

6335   0280 0109                        MVI _mode_select,R0
6337   007C                             SARC R0,2
6338   020A 001E                        BNOV @@vi0
633A   01C9                     	CLRR R1
633B   0209 0005                        BNC @@vi14
633D   0240 0021                        MVO R0,$21  ; Activates Foreground/Background mode
633F   0009                             INCR R1
6340   0200 0010                	B @@vi15

6342   0280 0021                @@vi14: MVI $21,R0  ; Activates Color Stack mode
6344   0280 033F                        MVI _color,R0
6346   0240 0028                        MVO R0,$28
6348   0040                             SWAP R0
6349   0240 0029                        MVO R0,$29
634B   0064                             SLR R0,2
634C   0064                             SLR R0,2
634D   0240 002A                        MVO R0,$2A
634F   0040                             SWAP R0
6350   0240 002B                        MVO R0,$2B
6352   0241 0109                @@vi15: MVO R1,_mode_select
6354   02B8 0007                	MVII #7,R0
6356   0240 033F                        MVO R0,_color           ; Default color for PRINT "string"
0x6358                          @@vi0:
6358   0280 010A                        MVI _border_color,R0
635A   0240 002C                        MVO     R0,     $2C     ; Border color
635C   0280 010B                        MVI _border_mask,R0
635E   0240 0032                        MVO     R0,     $32     ; Border mask
                                        ;
                                        ; Save collision registers for further use and clear them
                                        ;
6360   02BC 0018                        MVII #$18,R4
6362   02BD 0358                        MVII #_col0,R5
6364   02A0                             MVI@ R4,R0
6365   0268                             MVO@ R0,R5  ; _col0
6366   02A0                             MVI@ R4,R0
6367   0268                             MVO@ R0,R5  ; _col1
6368   02A0                             MVI@ R4,R0
6369   0268                             MVO@ R0,R5  ; _col2
636A   02A0                             MVI@ R4,R0
636B   0268                             MVO@ R0,R5  ; _col3
636C   02A0                             MVI@ R4,R0
636D   0268                             MVO@ R0,R5  ; _col4
636E   02A0                             MVI@ R4,R0
636F   0268                             MVO@ R0,R5  ; _col5
6370   02A0                             MVI@ R4,R0
6371   0268                             MVO@ R0,R5  ; _col6
6372   02A0                             MVI@ R4,R0
6373   0268                             MVO@ R0,R5  ; _col7
6374   02BD 0018                        MVII #$18,R5
6376   01C0                             CLRR R0
6377   0268                             MVO@ R0,R5
6378   0268                             MVO@ R0,R5
6379   0268                             MVO@ R0,R5
637A   0268                             MVO@ R0,R5
637B   0268                             MVO@ R0,R5
637C   0268                             MVO@ R0,R5
637D   0268                             MVO@ R0,R5
637E   0268                             MVO@ R0,R5
                                        
                                    IF DEFINED intybasic_scroll

                                        ;
                                        ; Scrolling things
                                        ;
                                        MVI _scroll_x,R0
                                        MVO R0,$30
                                        MVI _scroll_y,R0
                                        MVO R0,$31
                                    ENDI

                                        ;
                                        ; Updates sprites (MOBs)
                                        ;
637F   02BC 0340                        MVII #_mobs,R4
6381   02BD 0000                        MVII #$0,R5     ; X-coordinates
6383   02B9 0008                        MVII #8,R1
6385   02A0                     @@vi2:  MVI@ R4,R0
6386   0268                             MVO@ R0,R5
6387   02A0                             MVI@ R4,R0
6388   0268                             MVO@ R0,R5
6389   02A0                             MVI@ R4,R0
638A   0268                             MVO@ R0,R5
638B   0011                             DECR R1
638C   022C 0008                        BNE @@vi2

                                    IF DEFINED intybasic_music
                                     	MVI _ntsc,R0
                                        TSTR R0         ; PAL?
                                        BEQ @@vo97      ; Yes, always emit sound
                                	MVI _music_frame,R0
                                	INCR R0
                                	CMPI #6,R0
                                	BNE @@vo14
                                	CLRR R0
                                @@vo14:	MVO R0,_music_frame
                                	BEQ @@vo15
                                @@vo97:	CALL _emit_sound
                                @@vo15:
                                    ENDI

                                        ;
                                        ; Detect GRAM definition
                                        ;
638E   0284 033C                        MVI _gram_bitmap,R4
6390   00A4                             TSTR R4
6391   0204 001E                        BEQ @@vi1
6393   0281 0105                        MVI _gram_target,R1
6395   004D                             SLL R1,2
6396   0049                             SLL R1,1
6397   02F9 3800                        ADDI #$3800,R1
6399   008D                             MOVR R1,R5
639A   0280 0106                        MVI _gram_total,R0
0x639C                          @@vi3:
639C   02A1                             MVI@    R4,     R1
639D   0269                             MVO@    R1,     R5
639E   0041                             SWAP    R1
639F   0269                             MVO@    R1,     R5
63A0   02A1                             MVI@    R4,     R1
63A1   0269                             MVO@    R1,     R5
63A2   0041                             SWAP    R1
63A3   0269                             MVO@    R1,     R5
63A4   02A1                             MVI@    R4,     R1
63A5   0269                             MVO@    R1,     R5
63A6   0041                             SWAP    R1
63A7   0269                             MVO@    R1,     R5
63A8   02A1                             MVI@    R4,     R1
63A9   0269                             MVO@    R1,     R5
63AA   0041                             SWAP    R1
63AB   0269                             MVO@    R1,     R5
63AC   0010                             DECR R0
63AD   022C 0012                        BNE @@vi3
63AF   0240 033C                        MVO R0,_gram_bitmap
0x63B1                          @@vi1:
63B1   0284 033D                        MVI _gram2_bitmap,R4
63B3   00A4                             TSTR R4
63B4   0204 001E                        BEQ @@vii1
63B6   0281 0107                        MVI _gram2_target,R1
63B8   004D                             SLL R1,2
63B9   0049                             SLL R1,1
63BA   02F9 3800                        ADDI #$3800,R1
63BC   008D                             MOVR R1,R5
63BD   0280 0108                        MVI _gram2_total,R0
0x63BF                          @@vii3:
63BF   02A1                             MVI@    R4,     R1
63C0   0269                             MVO@    R1,     R5
63C1   0041                             SWAP    R1
63C2   0269                             MVO@    R1,     R5
63C3   02A1                             MVI@    R4,     R1
63C4   0269                             MVO@    R1,     R5
63C5   0041                             SWAP    R1
63C6   0269                             MVO@    R1,     R5
63C7   02A1                             MVI@    R4,     R1
63C8   0269                             MVO@    R1,     R5
63C9   0041                             SWAP    R1
63CA   0269                             MVO@    R1,     R5
63CB   02A1                             MVI@    R4,     R1
63CC   0269                             MVO@    R1,     R5
63CD   0041                             SWAP    R1
63CE   0269                             MVO@    R1,     R5
63CF   0010                             DECR R0
63D0   022C 0012                        BNE @@vii3
63D2   0240 033D                        MVO R0,_gram2_bitmap
0x63D4                          @@vii1:

                                    IF DEFINED intybasic_scroll
                                        ;
                                        ; Frame scroll support
                                        ;
                                        MVI _scroll_d,R0
                                        TSTR R0
                                        BEQ @@vi4
                                        CLRR R1
                                        MVO R1,_scroll_d
                                        DECR R0     ; Left
                                        BEQ @@vi5
                                        DECR R0     ; Right
                                        BEQ @@vi6
                                        DECR R0     ; Top
                                        BEQ @@vi7
                                        DECR R0     ; Bottom
                                        BEQ @@vi8
                                        B @@vi4

                                @@vi5:  MVII #$0200,R4
                                        MOVR R4,R5
                                        INCR R5
                                        MVII #12,R1
                                @@vi12: MVI@ R4,R2
                                        MVI@ R4,R3
                                        REPEAT 8
                                        MVO@ R2,R5
                                        MVI@ R4,R2
                                        MVO@ R3,R5
                                        MVI@ R4,R3
                                        ENDR
                                        MVO@ R2,R5
                                        MVI@ R4,R2
                                        MVO@ R3,R5
                                        MVO@ R2,R5
                                        INCR R4
                                        INCR R5
                                        DECR R1
                                        BNE @@vi12
                                        B @@vi4

                                @@vi6:  MVII #$0201,R4
                                        MVII #$0200,R5
                                        MVII #12,R1
                                @@vi11:
                                        REPEAT 19
                                        MVI@ R4,R0
                                        MVO@ R0,R5
                                        ENDR
                                        INCR R4
                                        INCR R5
                                        DECR R1
                                        BNE @@vi11
                                        B @@vi4
                                    
                                        ;
                                        ; Complex routine to be ahead of STIC display
                                        ; Moves first the top 6 lines, saves intermediate line
                                        ; Then moves the bottom 6 lines and restores intermediate line
                                        ;
                                @@vi7:  MVII #$0264,R4
                                        MVII #5,R1
                                        MVII #_scroll_buffer,R5
                                        REPEAT 20
                                        MVI@ R4,R0
                                        MVO@ R0,R5
                                        ENDR
                                        SUBI #40,R4
                                        MOVR R4,R5
                                        ADDI #20,R5
                                @@vi10:
                                        REPEAT 20
                                        MVI@ R4,R0
                                        MVO@ R0,R5
                                        ENDR
                                        SUBI #40,R4
                                        SUBI #40,R5
                                        DECR R1
                                        BNE @@vi10
                                        MVII #$02C8,R4
                                        MVII #$02DC,R5
                                        MVII #5,R1
                                @@vi13:
                                        REPEAT 20
                                        MVI@ R4,R0
                                        MVO@ R0,R5
                                        ENDR
                                        SUBI #40,R4
                                        SUBI #40,R5
                                        DECR R1
                                        BNE @@vi13
                                        MVII #_scroll_buffer,R4
                                        REPEAT 20
                                        MVI@ R4,R0
                                        MVO@ R0,R5
                                        ENDR
                                        B @@vi4

                                @@vi8:  MVII #$0214,R4
                                        MVII #$0200,R5
                                        MVII #$DC/4,R1
                                @@vi9:  
                                        REPEAT 4
                                        MVI@ R4,R0
                                        MVO@ R0,R5
                                        ENDR
                                        DECR R1
                                        BNE @@vi9
                                        B @@vi4

                                @@vi4:
                                    ENDI

                                    IF DEFINED intybasic_voice
                                        ;
                                        ; Intellivoice support
                                        ;
                                        CALL IV_ISR
                                    ENDI

                                        ;
                                        ; Random number generator
                                        ;
63D4   0004 0160 03DD           	CALL _next_random

                                    IF DEFINED intybasic_music
                                	; Generate sound for next frame
                                       	MVI _ntsc,R0
                                        TSTR R0         ; PAL?
                                        BEQ @@vo98      ; Yes, always generate sound
                                	MVI _music_frame,R0
                                	TSTR R0
                                	BEQ @@vo16
                                @@vo98: CALL _generate_music
                                @@vo16:
                                    ENDI

                                        ; Increase frame number
63D7   0280 033A                        MVI _frame,R0
63D9   0008                             INCR R0
63DA   0240 033A                        MVO R0,_frame

                                	; This mark is for ON FRAME GOSUB support

63DC   02B7                             RETURN
                                        ENDP

                                	;
                                	; Generates the next random number
                                	;
0x63DD                          _next_random:	PROC

                                MACRO _ROR
                                	RRC R0,1
                                	MOVR R0,R2
                                	SLR R2,2
                                	SLR R2,2
                                	ANDI #$0800,R2
                                	SLR R2,2
                                	SLR R2,2
                                	ANDI #$007F,R0
                                	XORR R2,R0
                                ENDM
63DD   0280 0104                        MVI _rand,R0
63DF   0007                             SETC
                                ;       _ROR
63E0   0070                             RRC R0,1
63E1   0082                     	MOVR R0,R2
63E2   0066                     	SLR R2,2
63E3   0066                     	SLR R2,2
63E4   03BA 0800                	ANDI #$0800,R2
63E6   0066                     	SLR R2,2
63E7   0066                     	SLR R2,2
63E8   03B8 007F                	ANDI #$007F,R0
63EA   01D0                     	XORR R2,R0
63EB   03C0 033A                        XOR _frame,R0
                                ;       _ROR
63ED   0070                             RRC R0,1
63EE   0082                     	MOVR R0,R2
63EF   0066                     	SLR R2,2
63F0   0066                     	SLR R2,2
63F1   03BA 0800                	ANDI #$0800,R2
63F3   0066                     	SLR R2,2
63F4   0066                     	SLR R2,2
63F5   03B8 007F                	ANDI #$007F,R0
63F7   01D0                     	XORR R2,R0
63F8   03C0 0104                        XOR _rand,R0
                                ;       _ROR
63FA   0070                             RRC R0,1
63FB   0082                     	MOVR R0,R2
63FC   0066                     	SLR R2,2
63FD   0066                     	SLR R2,2
63FE   03BA 0800                	ANDI #$0800,R2
6400   0066                     	SLR R2,2
6401   0066                     	SLR R2,2
6402   03B8 007F                	ANDI #$007F,R0
6404   01D0                     	XORR R2,R0
6405   03F8 0009                        XORI #9,R0
6407   0240 0104                        MVO R0,_rand
6409   00AF                     	JR R5
                                	ENDP

                                    IF DEFINED intybasic_music

                                        ;
                                        ; Music player, comes from my game Princess Quest for Intellivision
                                        ; so it's a practical tracker used in a real game ;) and with enough
                                        ; features.
                                        ;

                                        ; NTSC frequency for notes (based on 3.579545 mhz)
                                ntsc_note_table:    PROC
                                        ; Silence - 0
                                        DECLE 0
                                        ; Octave 2 - 1
                                        DECLE 1721,1621,1532,1434,1364,1286,1216,1141,1076,1017,956,909
                                        ; Octave 3 - 13
                                        DECLE 854,805,761,717,678,639,605,571,538,508,480,453
                                        ; Octave 4 - 25
                                        DECLE 427,404,380,360,339,321,302,285,270,254,240,226
                                        ; Octave 5 - 37
                                        DECLE 214,202,191,180,170,160,151,143,135,127,120,113
                                        ; Octave 6 - 49
                                        DECLE 107,101,95,90,85,80,76,71,67,64,60,57
                                        ; Octave 7 - 61
                                        ; Space for two notes more
                                	ENDP

                                        ; PAL frequency for notes (based on 4 mhz)
                                pal_note_table:    PROC
                                        ; Silence - 0
                                        DECLE 0
                                        ; Octava 2 - 1
                                        DECLE 1923,1812,1712,1603,1524,1437,1359,1276,1202,1136,1068,1016
                                        ; Octava 3 - 13
                                        DECLE 954,899,850,801,758,714,676,638,601,568,536,506
                                        ; Octava 4 - 25
                                        DECLE 477,451,425,402,379,358,338,319,301,284,268,253
                                        ; Octava 5 - 37
                                        DECLE 239,226,213,201,190,179,169,159,150,142,134,127
                                        ; Octava 6 - 49
                                        DECLE 120,113,106,100,95,89,84,80,75,71,67,63
                                        ; Octava 7 - 61
                                        ; Space for two notes more
                                	ENDP
                                    ENDI

                                        ;
                                        ; Music tracker init
                                        ;
0x640A                          _init_music:	PROC
                                    IF DEFINED intybasic_music
                                        MVI _ntsc,R0
                                        CMPI #1,R0
                                        MVII #ntsc_note_table,R0
                                        BEQ @@0
                                        MVII #pal_note_table,R0
                                @@0:    MVO R0,_music_table
                                        MVII #$38,R0	; $B8 blocks controllers o.O!
                                	MVO R0,_music_mix
                                        CLRR R0
                                    ELSE
640A   00AF                     	JR R5
                                    ENDI
                                	ENDP

                                    IF DEFINED intybasic_music
                                        ;
                                        ; Start music
                                        ; R0 = Pointer to music
                                        ;
                                _play_music:	PROC
                                	MOVR R0,R2
                                        MVII #1,R0
                                	MOVR R0,R3
                                	TSTR R2
                                	BEQ @@1
                                	MVI@ R2,R3
                                	INCR R2
                                @@1:	MVO R2,_music_start
                                	MVO R2,_music_p
                                	MVO R3,_music_t
                                	MVO R0,_music_tc
                                        JR R5

                                	ENDP

                                        ;
                                        ; Generate music
                                        ;
                                _generate_music:	PROC
                                	BEGIN
                                	MVI _music_mix,R0
                                	ANDI #$C0,R0
                                	XORI #$38,R0
                                	MVO R0,_music_mix
                                	CLRR R1			; Turn off volume for the three sound channels
                                	MVO R1,_music_vol1
                                	MVO R1,_music_vol2
                                	NOP
                                	MVO R1,_music_vol3
                                	MVI _music_tc,R3
                                	DECR R3
                                	MVO R3,_music_tc
                                	BNE @@6
                                	; R3 is zero from here up to @@6
                                	MVI _music_p,R4
                                @@15:	TSTR R4		; Silence?
                                	BEQ @@000	; Keep quiet
                                	MVI@ R4,R0
                                	MVI@ R4,R1
                                	MVI _music_t,R2
                                        CMPI #$FE,R0	; The end?
                                	BEQ @@001       ; Keep quiet
                                	CMPI #$FD,R0	; Repeat?
                                	BNE @@00
                                	MVI _music_start,R4
                                	B @@15

                                @@001:	MOVR R1,R4	; Jump, zero will make it quiet
                                	B @@15

                                @@000:  MVII #1,R0
                                        MVO R0,_music_tc
                                        B @@0
                                        
                                @@00: 	MVO R2,_music_tc    ; Restart note time
                                     	MVO R4,_music_p
                                     	
                                	MOVR R0,R2
                                	ANDI #$FF,R2
                                	CMPI #$3F,R2	; Sustain note?
                                	BEQ @@1
                                	MOVR R2,R4
                                	ANDI #$3F,R4
                                	MVO R4,_music_n1	; Note
                                	MVO R3,_music_s1	; Waveform
                                	ANDI #$C0,R2
                                	MVO R2,_music_i1	; Instrument
                                	
                                @@1:	MOVR R0,R2
                                	SWAP R2
                                	ANDI #$FF,R2
                                	CMPI #$3F,R2	; Sustain note?
                                	BEQ @@2
                                	MOVR R2,R4
                                	ANDI #$3F,R4
                                	MVO R4,_music_n2	; Note
                                	MVO R3,_music_s2	; Waveform
                                	ANDI #$C0,R2
                                	MVO R2,_music_i2	; Instrument
                                	
                                @@2:	MOVR R1,R2
                                	ANDI #$FF,R2
                                	CMPI #$3F,R2	; Sustain note?
                                	BEQ @@3
                                	MOVR R2,R4
                                	ANDI #$3F,R4
                                	MVO R4,_music_n3	; Note
                                	MVO R3,_music_s3	; Waveform
                                	ANDI #$C0,R2
                                	MVO R2,_music_i3	; Instrument
                                	
                                @@3:	MOVR R1,R2
                                	SWAP R2
                                	MVO R2,_music_n4
                                	MVO R3,_music_s4
                                	
                                        ;
                                        ; Construct main voice
                                        ;
                                @@6:	MVI _music_n1,R3	; Read note
                                	TSTR R3		; There is note?
                                	BEQ @@7		; No, jump
                                	MVI _music_s1,R1
                                	MVI _music_i1,R2
                                	MOVR R1,R0
                                	CALL _note2freq
                                	MVO R3,_music_freq10	; Note in voice A
                                	SWAP R3
                                	MVO R3,_music_freq11
                                	MVO R1,_music_vol1
                                        ; Increase time for instrument waveform
                                	INCR R0
                                	CMPI #$18,R0
                                	BNE @@20
                                	SUBI #$08,R0
                                @@20:	MVO R0,_music_s1

                                @@7:	MVI _music_n2,R3	; Read note
                                	TSTR R3		; There is note?
                                	BEQ @@8		; No, jump
                                	MVI _music_s2,R1
                                	MVI _music_i2,R2
                                	MOVR R1,R0
                                	CALL _note2freq
                                	MVO R3,_music_freq20	; Note in voice B
                                	SWAP R3
                                	MVO R3,_music_freq21
                                	MVO R1,_music_vol2
                                        ; Increase time for instrument waveform
                                	INCR R0
                                	CMPI #$18,R0
                                	BNE @@21
                                	SUBI #$08,R0
                                @@21:	MVO R0,_music_s2

                                @@8:	MVI _music_n3,R3	; Read note
                                	TSTR R3		; There is note?
                                	BEQ @@9		; No, jump
                                	MVI _music_s3,R1
                                	MVI _music_i3,R2
                                	MOVR R1,R0
                                	CALL _note2freq
                                	MVO R3,_music_freq30	; Note in voice C
                                	SWAP R3
                                	MVO R3,_music_freq31
                                	MVO R1,_music_vol3
                                        ; Increase time for instrument waveform
                                	INCR R0
                                	CMPI #$18,R0
                                	BNE @@22
                                	SUBI #$08,R0
                                @@22:	MVO R0,_music_s3

                                @@9:	MVI _music_n4,R0	; Read drum
                                	DECR R0		; There is drum?
                                	BMI @@4		; No, jump
                                	MVI _music_s4,R1
                                	       		; 1 - Strong
                                	BNE @@5
                                	CMPI #3,R1
                                	BGE @@12
                                @@10:	MVII #5,R0
                                	MVO R0,_music_noise
                                	CALL _activate_drum
                                	B @@12

                                @@5:	DECR R0		;2 - Short
                                	BNE @@11
                                	TSTR R1
                                	BNE @@12
                                	MVII #8,R0
                                	MVO R0,_music_noise
                                	CALL _activate_drum
                                	B @@12

                                @@11:	;DECR R0	; 3 - Rolling
                                	;BNE @@12
                                	CMPI #2,R1
                                	BLT @@10
                                	MVI _music_t,R0
                                	SLR R0,1
                                	CMPR R0,R1
                                	BLT @@12
                                        ADDI #2,R0
                                	CMPR R0,R1
                                	BLT @@10
                                        ; Increase time for drum waveform
                                @@12:   INCR R1
                                	MVO R1,_music_s4
                                @@4:
                                @@0:	RETURN
                                	ENDP

                                        ;
                                	; Translates note number to frequency
                                        ; R3 = Note
                                        ; R1 = Position in waveform for instrument
                                        ; R2 = Instrument
                                        ;
                                _note2freq:	PROC
                                        ADD _music_table,R3
                                	MVI@ R3,R3
                                        SWAP R2
                                	BEQ _piano_instrument
                                	RLC R2,1
                                	BNC _clarinet_instrument
                                	BPL _flute_instrument
                                ;	BMI _bass_instrument
                                	ENDP

                                        ;
                                        ; Generates a bass
                                        ;
                                _bass_instrument:	PROC
                                	SLL R3,2	; Lower 2 octaves
                                	ADDI #_bass_volume,R1
                                	MVI@ R1,R1	; Bass effect
                                    IF DEFINED intybasic_music_volume
                                	B _global_volume
                                    ELSE
                                	JR R5
                                    ENDI
                                	ENDP

                                _bass_volume:	PROC
                                        DECLE 12,13,14,14,13,12,12,12
                                        DECLE 11,11,12,12,11,11,12,12
                                	DECLE 11,11,12,12,11,11,12,12
                                	ENDP

                                        ;
                                        ; Generates a piano
                                        ; R3 = Frequency
                                        ; R1 = Waveform position
                                        ;
                                        ; Output:
                                        ; R3 = Frequency.
                                        ; R1 = Volume.
                                        ;
                                _piano_instrument:	PROC
                                	ADDI #_piano_volume,R1
                                	MVI@ R1,R1
                                    IF DEFINED intybasic_music_volume
                                	B _global_volume
                                    ELSE
                                	JR R5
                                    ENDI
                                	ENDP

                                _piano_volume:	PROC
                                        DECLE 14,13,13,12,12,11,11,10
                                        DECLE 10,9,9,8,8,7,7,6
                                        DECLE 6,6,7,7,6,6,5,5
                                	ENDP

                                        ;
                                        ; Generate a clarinet
                                        ; R3 = Frequency
                                        ; R1 = Waveform position
                                        ;
                                        ; Output:
                                        ; R3 = Frequency
                                        ; R1 = Volume
                                        ;
                                _clarinet_instrument:	PROC
                                	ADDI #_clarinet_vibrato,R1
                                	ADD@ R1,R3
                                	CLRC
                                	RRC R3,1	; Duplicates frequency
                                	ADCR R3
                                        ADDI #_clarinet_volume-_clarinet_vibrato,R1
                                	MVI@ R1,R1
                                    IF DEFINED intybasic_music_volume
                                	B _global_volume
                                    ELSE
                                	JR R5
                                    ENDI
                                	ENDP

                                _clarinet_vibrato:	PROC
                                        DECLE 0,0,0,0
                                        DECLE -2,-4,-2,0
                                        DECLE 2,4,2,0
                                        DECLE -2,-4,-2,0
                                        DECLE 2,4,2,0
                                        DECLE -2,-4,-2,0
                                	ENDP

                                _clarinet_volume:	PROC
                                        DECLE 13,14,14,13,13,12,12,12
                                        DECLE 11,11,11,11,12,12,12,12
                                        DECLE 11,11,11,11,12,12,12,12
                                	ENDP

                                        ;
                                        ; Generates a flute
                                        ; R3 = Frequency
                                        ; R1 = Waveform position
                                        ;
                                        ; Output:
                                        ; R3 = Frequency
                                        ; R1 = Volume
                                        ;
                                _flute_instrument:	PROC
                                	ADDI #_flute_vibrato,R1
                                	ADD@ R1,R3
                                	ADDI #_flute_volume-_flute_vibrato,R1
                                	MVI@ R1,R1
                                    IF DEFINED intybasic_music_volume
                                	B _global_volume
                                    ELSE
                                	JR R5
                                    ENDI
                                	ENDP

                                _flute_vibrato:	PROC
                                        DECLE 0,0,0,0
                                        DECLE 0,1,2,1
                                        DECLE 0,1,2,1
                                        DECLE 0,1,2,1
                                        DECLE 0,1,2,1
                                        DECLE 0,1,2,1
                                	ENDP
                                                 
                                _flute_volume:	PROC
                                        DECLE 10,12,13,13,12,12,12,12
                                        DECLE 11,11,11,11,10,10,10,10
                                        DECLE 11,11,11,11,10,10,10,10
                                	ENDP

                                    IF DEFINED intybasic_music_volume

                                _global_volume:	PROC
                                	MVI _music_vol,R2
                                	ANDI #$0F,R2
                                	SLL R2,2
                                	SLL R2,2
                                	ADDR R1,R2
                                	ADDI #@@table,R2
                                	MVI@ R2,R1
                                	JR R5

                                @@table:
                                	DECLE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
                                	DECLE 0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1
                                	DECLE 0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,2
                                	DECLE 0,0,0,1,1,1,1,1,2,2,2,2,2,3,3,3
                                	DECLE 0,0,1,1,1,1,2,2,2,2,3,3,3,4,4,4
                                	DECLE 0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5
                                	DECLE 0,0,1,1,2,2,2,3,3,4,4,4,5,5,6,6
                                	DECLE 0,1,1,1,2,2,3,3,4,4,5,5,6,6,7,7
                                	DECLE 0,1,1,2,2,3,3,4,4,5,5,6,6,7,8,8
                                	DECLE 0,1,1,2,2,3,4,4,5,5,6,7,7,8,8,9
                                	DECLE 0,1,1,2,3,3,4,5,5,6,7,7,8,9,9,10
                                	DECLE 0,1,2,2,3,4,4,5,6,7,7,8,9,10,10,11
                                	DECLE 0,1,2,2,3,4,5,6,6,7,8,9,10,10,11,12
                                	DECLE 0,1,2,3,4,4,5,6,7,8,9,10,10,11,12,13
                                	DECLE 0,1,2,3,4,5,6,7,8,8,9,10,11,12,13,14
                                	DECLE 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15

                                	ENDP

                                    ENDI

                                        ;
                                        ; Emits sound
                                        ;
                                _emit_sound:	PROC
                                        MOVR R5,R1
                                	MVI _music_mode,R2
                                	SARC R2,1
                                	BEQ @@6
                                	MVII #_music_freq10,R4
                                	MVII #$01F0,R5
                                        MVI@ R4,R0
                                	MVO@ R0,R5	; $01F0 - Channel A Period (Low 8 bits of 12)
                                        MVI@ R4,R0
                                	MVO@ R0,R5	; $01F1 - Channel B Period (Low 8 bits of 12)
                                	DECR R2
                                	BEQ @@1
                                        MVI@ R4,R0	
                                	MVO@ R0,R5	; $01F2 - Channel C Period (Low 8 bits of 12)
                                	INCR R5		; Avoid $01F3 - Enveloped Period (Low 8 bits of 16)
                                        MVI@ R4,R0
                                	MVO@ R0,R5	; $01F4 - Channel A Period (High 4 bits of 12)
                                        MVI@ R4,R0
                                	MVO@ R0,R5	; $01F5 - Channel B Period (High 4 bits of 12)
                                        MVI@ R4,R0
                                	MVO@ R0,R5	; $01F6 - Channel C Period (High 4 bits of 12)
                                	INCR R5		; Avoid $01F7 - Envelope Period (High 8 bits of 16)
                                	BC @@2		; Jump if playing with drums
                                	ADDI #2,R4
                                	ADDI #3,R5
                                	B @@3

                                @@2:	MVI@ R4,R0
                                	MVO@ R0,R5	; $01F8 - Enable Noise/Tone (bits 3-5 Noise : 0-2 Tone)
                                        MVI@ R4,R0	
                                	MVO@ R0,R5	; $01F9 - Noise Period (5 bits)
                                	INCR R5		; Avoid $01FA - Envelope Type (4 bits)
                                @@3:    MVI@ R4,R0
                                	MVO@ R0,R5	; $01FB - Channel A Volume
                                        MVI@ R4,R0
                                	MVO@ R0,R5	; $01FC - Channel B Volume
                                        MVI@ R4,R0
                                	MVO@ R0,R5	; $01FD - Channel C Volume
                                        JR R1

                                @@1:	INCR R4		
                                	ADDI #2,R5	; Avoid $01F2 and $01F3
                                        MVI@ R4,R0
                                	MVO@ R0,R5	; $01F4
                                        MVI@ R4,R0
                                	MVO@ R0,R5	; $01F5
                                	INCR R4
                                	ADDI #2,R5	; Avoid $01F6 and $01F7
                                	BC @@4		; Jump if playing with drums
                                	ADDI #2,R4
                                	ADDI #3,R5
                                	B @@5

                                @@4:	MVI@ R4,R0
                                	MVO@ R0,R5	; $01F8
                                        MVI@ R4,R0
                                	MVO@ R0,R5	; $01F9
                                	INCR R5		; Avoid $01FA
                                @@5:    MVI@ R4,R0
                                	MVO@ R0,R5	; $01FB
                                        MVI@ R4,R0
                                	MVO@ R0,R5	; $01FD
                                @@6:    JR R1
                                	ENDP

                                        ;
                                        ; Activates drum
                                        ;
                                _activate_drum:	PROC
                                    IF DEFINED intybasic_music_volume
                                	BEGIN
                                    ENDI
                                	MVI _music_mode,R2
                                	SARC R2,1	; PLAY NO DRUMS?
                                	BNC @@0		; Yes, jump
                                	MVI _music_vol1,R0
                                	TSTR R0
                                	BNE @@1
                                        MVII #11,R1
                                    IF DEFINED intybasic_music_volume
                                	CALL _global_volume
                                    ENDI
                                	MVO R1,_music_vol1
                                	MVI _music_mix,R0
                                	ANDI #$F6,R0
                                	XORI #$01,R0
                                	MVO R0,_music_mix
                                    IF DEFINED intybasic_music_volume
                                	RETURN
                                    ELSE
                                	JR R5
                                    ENDI

                                @@1:    MVI _music_vol2,R0
                                	TSTR R0
                                	BNE @@2
                                        MVII #11,R1
                                    IF DEFINED intybasic_music_volume
                                	CALL _global_volume
                                    ENDI
                                	MVO R1,_music_vol2
                                	MVI _music_mix,R0
                                	ANDI #$ED,R0
                                	XORI #$02,R0
                                	MVO R0,_music_mix
                                    IF DEFINED intybasic_music_volume
                                	RETURN
                                    ELSE
                                	JR R5
                                    ENDI

                                @@2:    DECR R2		; PLAY SIMPLE?
                                        BEQ @@3		; Yes, jump
                                        MVI _music_vol3,R0
                                	TSTR R0
                                	BNE @@3
                                        MVII #11,R1
                                    IF DEFINED intybasic_music_volume
                                	CALL _global_volume
                                    ENDI
                                	MVO R1,_music_vol3
                                	MVI _music_mix,R0
                                	ANDI #$DB,R0
                                	XORI #$04,R0
                                	MVO R0,_music_mix
                                    IF DEFINED intybasic_music_volume
                                	RETURN
                                    ELSE
                                	JR R5
                                    ENDI

                                @@3:    MVI _music_mix,R0
                                        ANDI #$EF,R0
                                	MVO R0,_music_mix
                                @@0:	
                                    IF DEFINED intybasic_music_volume
                                	RETURN
                                    ELSE
                                	JR R5
                                    ENDI

                                	ENDP

                                    ENDI
                                    
                                    IF DEFINED intybasic_numbers

                                	;
                                	; Following code from as1600 libraries, prnum16.asm
                                        ; Public domain by Joseph Zbiciak
                                	;

                                ;* ======================================================================== *;
                                ;*  These routines are placed into the public domain by their author.  All  *;
                                ;*  copyright rights are hereby relinquished on the routines and data in    *;
                                ;*  this file.  -- Joseph Zbiciak, 2008                                     *;
                                ;* ======================================================================== *;

                                ;; ======================================================================== ;;
                                ;;  _PW10                                                                   ;;
                                ;;      Lookup table holding the first 5 powers of 10 (1 thru 10000) as     ;;
                                ;;      16-bit numbers.                                                     ;;
                                ;; ======================================================================== ;;
                                _PW10   PROC    ; 0 thru 10000
                                        DECLE   10000, 1000, 100, 10, 1, 0
                                        ENDP

                                ;; ======================================================================== ;;
                                ;;  PRNUM16.l     -- Print an unsigned 16-bit number left-justified.        ;;
                                ;;  PRNUM16.b     -- Print an unsigned 16-bit number with leading blanks.   ;;
                                ;;  PRNUM16.z     -- Print an unsigned 16-bit number with leading zeros.    ;;
                                ;;                                                                          ;;
                                ;;  AUTHOR                                                                  ;;
                                ;;      Joseph Zbiciak  <im14u2c AT globalcrossing DOT net>                 ;;
                                ;;                                                                          ;;
                                ;;  REVISION HISTORY                                                        ;;
                                ;;      30-Mar-2003 Initial complete revision                               ;;
                                ;;                                                                          ;;
                                ;;  INPUTS for all variants                                                 ;;
                                ;;      R0  Number to print.                                                ;;
                                ;;      R2  Width of field.  Ignored by PRNUM16.l.                          ;;
                                ;;      R3  Format word, added to digits to set the color.                  ;;
                                ;;          Note:  Bit 15 MUST be cleared when building with PRNUM32.       ;;
                                ;;      R4  Pointer to location on screen to print number                   ;;
                                ;;                                                                          ;;
                                ;;  OUTPUTS                                                                 ;;
                                ;;      R0  Zeroed                                                          ;;
                                ;;      R1  Unmodified                                                      ;;
                                ;;      R2  Unmodified                                                      ;;
                                ;;      R3  Unmodified                                                      ;;
                                ;;      R4  Points to first character after field.                          ;;
                                ;;                                                                          ;;
                                ;;  DESCRIPTION                                                             ;;
                                ;;      These routines print unsigned 16-bit numbers in a field up to 5     ;;
                                ;;      positions wide.  The number is printed either in left-justified     ;;
                                ;;      or right-justified format.  Right-justified numbers are padded      ;;
                                ;;      with leading blanks or leading zeros.  Left-justified numbers       ;;
                                ;;      are not padded on the right.                                        ;;
                                ;;                                                                          ;;
                                ;;      This code handles fields wider than 5 characters, padding with      ;;
                                ;;      zeros or blanks as necessary.                                       ;;
                                ;;                                                                          ;;
                                ;;              Routine      Value(hex)     Field        Output             ;;
                                ;;              ----------   ----------   ----------   ----------           ;;
                                ;;              PRNUM16.l      $0045         n/a        "69"                ;;
                                ;;              PRNUM16.b      $0045          4         "  69"              ;;
                                ;;              PRNUM16.b      $0045          6         "    69"            ;;
                                ;;              PRNUM16.z      $0045          4         "0069"              ;;
                                ;;              PRNUM16.z      $0045          6         "000069"            ;;
                                ;;                                                                          ;;
                                ;;  TECHNIQUES                                                              ;;
                                ;;      This routine uses repeated subtraction to divide the number         ;;
                                ;;      to display by various powers of 10.  This is cheaper than a         ;;
                                ;;      full divide, at least when the input number is large.  It's         ;;
                                ;;      also easier to get right.  :-)                                      ;;
                                ;;                                                                          ;;
                                ;;      The printing routine first pads out fields wider than 5 spaces      ;;
                                ;;      with zeros or blanks as requested.  It then scans the power-of-10   ;;
                                ;;      table looking for the first power of 10 that is <= the number to    ;;
                                ;;      display.  While scanning for this power of 10, it outputs leading   ;;
                                ;;      blanks or zeros, if requested.  This eliminates "leading digit"     ;;
                                ;;      logic from the main digit loop.                                     ;;
                                ;;                                                                          ;;
                                ;;      Once in the main digit loop, we discover the value of each digit    ;;
                                ;;      by repeated subtraction.  We build up our digit value while         ;;
                                ;;      subtracting the power-of-10 repeatedly.  We iterate until we go     ;;
                                ;;      a step too far, and then we add back on power-of-10 to restore      ;;
                                ;;      the remainder.                                                      ;;
                                ;;                                                                          ;;
                                ;;  NOTES                                                                   ;;
                                ;;      The left-justified variant ignores field width.                     ;;
                                ;;                                                                          ;;
                                ;;      The code is fully reentrant.                                        ;;
                                ;;                                                                          ;;
                                ;;      This code does not handle numbers which are too large to be         ;;
                                ;;      displayed in the provided field.  If the number is too large,       ;;
                                ;;      non-digit characters will be displayed in the initial digit         ;;
                                ;;      position.  Also, the run time of this routine may get excessively   ;;
                                ;;      large, depending on the magnitude of the overflow.                  ;;
                                ;;                                                                          ;;
                                ;;      When using with PRNUM32, one must either include PRNUM32 before     ;;
                                ;;      this function, or define the symbol _WITH_PRNUM32.  PRNUM32         ;;
                                ;;      needs a tiny bit of support from PRNUM16 to handle numbers in       ;;
                                ;;      the range 65536...99999 correctly.                                  ;;
                                ;;                                                                          ;;
                                ;;  CODESIZE                                                                ;;
                                ;;      73 words, including power-of-10 table                               ;;
                                ;;      80 words, if compiled with PRNUM32.                                 ;;
                                ;;                                                                          ;;
                                ;;      To save code size, you can define the following symbols to omit     ;;
                                ;;      some variants:                                                      ;;
                                ;;                                                                          ;;
                                ;;          _NO_PRNUM16.l:   Disables PRNUM16.l.  Saves 10 words            ;;
                                ;;          _NO_PRNUM16.b:   Disables PRNUM16.b.  Saves 3 words.            ;;
                                ;;                                                                          ;;
                                ;;      Defining both symbols saves 17 words total, because it omits        ;;
                                ;;      some code shared by both routines.                                  ;;
                                ;;                                                                          ;;
                                ;;  STACK USAGE                                                             ;;
                                ;;      This function uses up to 4 words of stack space.                    ;;
                                ;; ======================================================================== ;;

                                PRNUM16 PROC

                                    
                                        ;; ---------------------------------------------------------------- ;;
                                        ;;  PRNUM16.l:  Print unsigned, left-justified.                     ;;
                                        ;; ---------------------------------------------------------------- ;;
                                @@l:    PSHR    R5              ; save return address
                                @@l1:   MVII    #$1,    R5      ; set R5 to 1 to counteract screen ptr update
                                                                ; in the 'find initial power of 10' loop
                                        PSHR    R2
                                        MVII    #5,     R2      ; force effective field width to 5.
                                        B       @@z2

                                        ;; ---------------------------------------------------------------- ;;
                                        ;;  PRNUM16.b:  Print unsigned with leading blanks.                 ;;
                                        ;; ---------------------------------------------------------------- ;;
                                @@b:    PSHR    R5
                                @@b1:   CLRR    R5              ; let the blank loop do its thing
                                        INCR    PC              ; skip the PSHR R5

                                        ;; ---------------------------------------------------------------- ;;
                                        ;;  PRNUM16.z:  Print unsigned with leading zeros.                  ;;
                                        ;; ---------------------------------------------------------------- ;;
                                @@z:    PSHR    R5
                                @@z1:   PSHR    R2
                                @@z2:   PSHR    R1

                                        ;; ---------------------------------------------------------------- ;;
                                        ;;  Find the initial power of 10 to use for display.                ;;
                                        ;;  Note:  For fields wider than 5, fill the extra spots above 5    ;;
                                        ;;  with blanks or zeros as needed.                                 ;;
                                        ;; ---------------------------------------------------------------- ;;
                                        MVII    #_PW10+5,R1     ; Point to end of power-of-10 table
                                        SUBR    R2,     R1      ; Subtract the field width to get right power
                                        PSHR    R3              ; save format word

                                        CMPI    #2,     R5      ; are we leading with zeros?
                                        BNC     @@lblnk         ; no:  then do the loop w/ blanks

                                        CLRR    R5              ; force R5==0
                                        ADDI    #$80,   R3      ; yes: do the loop with zeros
                                        B       @@lblnk
                                    

                                @@llp   MVO@    R3,     R4      ; print a blank/zero

                                        SUBR    R5,     R4      ; rewind pointer if needed.

                                        INCR    R1              ; get next power of 10
                                @@lblnk DECR    R2              ; decrement available digits
                                        BEQ     @@ldone
                                        CMPI    #5,     R2      ; field too wide?
                                        BGE     @@llp           ; just force blanks/zeros 'till we're narrower.
                                        CMP@    R1,     R0      ; Is this power of 10 too big?
                                        BNC     @@llp           ; Yes:  Put a blank and go to next

                                @@ldone PULR    R3              ; restore format word

                                        ;; ---------------------------------------------------------------- ;;
                                        ;;  The digit loop prints at least one digit.  It discovers digits  ;;
                                        ;;  by repeated subtraction.                                        ;;
                                        ;; ---------------------------------------------------------------- ;;
                                @@digit TSTR    R0              ; If the number is zero, print zero and leave
                                        BNEQ    @@dig1          ; no: print the number

                                        MOVR    R3,     R5      ;\    
                                        ADDI    #$80,   R5      ; |-- print a 0 there.
                                        MVO@    R5,     R4      ;/    
                                        B       @@done

                                @@dig1:
                                    
                                @@nxdig MOVR    R3,     R5      ; save display format word
                                @@cont: ADDI    #$80-8, R5      ; start our digit as one just before '0'
                                @@spcl:
                                 
                                        ;; ---------------------------------------------------------------- ;;
                                        ;;  Divide by repeated subtraction.  This divide is constructed     ;;
                                        ;;  to go "one step too far" and then back up.                      ;;
                                        ;; ---------------------------------------------------------------- ;;
                                @@div:  ADDI    #8,     R5      ; increment our digit
                                        SUB@    R1,     R0      ; subtract power of 10
                                        BC      @@div           ; loop until we go too far
                                        ADD@    R1,     R0      ; add back the extra power of 10.

                                        MVO@    R5,     R4      ; display the digit.

                                        INCR    R1              ; point to next power of 10
                                        DECR    R2              ; any room left in field?
                                        BPL     @@nxdig         ; keep going until R2 < 0.

                                @@done: PULR    R1              ; restore R1
                                        PULR    R2              ; restore R2
                                        PULR    PC              ; return

                                        ENDP
                                        
                                    ENDI

                                    IF DEFINED intybasic_voice
                                ;;==========================================================================;;
                                ;;  SP0256-AL2 Allophones                                                   ;;
                                ;;                                                                          ;;
                                ;;  This file contains the allophone set that was obtained from an          ;;
                                ;;  SP0256-AL2.  It is being provided for your convenience.                 ;;
                                ;;                                                                          ;;
                                ;;  The directory "al2" contains a series of assembly files, each one       ;;
                                ;;  containing a single allophone.  This series of files may be useful in   ;;
                                ;;  situations where space is at a premium.                                 ;;
                                ;;                                                                          ;;
                                ;;  Consult the Archer SP0256-AL2 documentation (under doc/programming)     ;;
                                ;;  for more information about SP0256-AL2's allophone library.              ;;
                                ;;                                                                          ;;
                                ;; ------------------------------------------------------------------------ ;;
                                ;;                                                                          ;;
                                ;;  Copyright information:                                                  ;;
                                ;;                                                                          ;;
                                ;;  The allophone data below was extracted from the SP0256-AL2 ROM image.   ;;
                                ;;  The SP0256-AL2 allophones are NOT in the public domain, nor are they    ;;
                                ;;  placed under the GNU General Public License.  This program is           ;;
                                ;;  distributed in the hope that it will be useful, but WITHOUT ANY         ;;
                                ;;  WARRANTY; without even the implied warranty of MERCHANTABILITY or       ;;
                                ;;  FITNESS FOR A PARTICULAR PURPOSE.                                       ;;
                                ;;                                                                          ;;
                                ;;  Microchip, Inc. retains the copyright to the data and algorithms        ;;
                                ;;  contained in the SP0256-AL2.  This speech data is distributed with      ;;
                                ;;  explicit permission from Microchip, Inc.  All such redistributions      ;;
                                ;;  must retain this notice of copyright.                                   ;;
                                ;;                                                                          ;;
                                ;;  No copyright claims are made on this data by the author(s) of SDK1600.  ;;
                                ;;  Please see http://spatula-city.org/~im14u2c/sp0256-al2/ for details.    ;;
                                ;;                                                                          ;;
                                ;;==========================================================================;;

                                ;; ------------------------------------------------------------------------ ;;
                                _AA:
                                    DECLE   _AA.end - _AA - 1
                                    DECLE   $0318, $014C, $016F, $02CE, $03AF, $015F, $01B1, $008E
                                    DECLE   $0088, $0392, $01EA, $024B, $03AA, $039B, $000F, $0000
                                _AA.end:  ; 16 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _AE1:
                                    DECLE   _AE1.end - _AE1 - 1
                                    DECLE   $0118, $038E, $016E, $01FC, $0149, $0043, $026F, $036E
                                    DECLE   $01CC, $0005, $0000
                                _AE1.end:  ; 11 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _AO:
                                    DECLE   _AO.end - _AO - 1
                                    DECLE   $0018, $010E, $016F, $0225, $00C6, $02C4, $030F, $0160
                                    DECLE   $024B, $0005, $0000
                                _AO.end:  ; 11 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _AR:
                                    DECLE   _AR.end - _AR - 1
                                    DECLE   $0218, $010C, $016E, $001E, $000B, $0091, $032F, $00DE
                                    DECLE   $018B, $0095, $0003, $0238, $0027, $01E0, $03E8, $0090
                                    DECLE   $0003, $01C7, $0020, $03DE, $0100, $0190, $01CA, $02AB
                                    DECLE   $00B7, $004A, $0386, $0100, $0144, $02B6, $0024, $0320
                                    DECLE   $0011, $0041, $01DF, $0316, $014C, $016E, $001E, $00C4
                                    DECLE   $02B2, $031E, $0264, $02AA, $019D, $01BE, $000B, $00F0
                                    DECLE   $006A, $01CE, $00D6, $015B, $03B5, $03E4, $0000, $0380
                                    DECLE   $0007, $0312, $03E8, $030C, $016D, $02EE, $0085, $03C2
                                    DECLE   $03EC, $0283, $024A, $0005, $0000
                                _AR.end:  ; 69 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _AW:
                                    DECLE   _AW.end - _AW - 1
                                    DECLE   $0010, $01CE, $016E, $02BE, $0375, $034F, $0220, $0290
                                    DECLE   $008A, $026D, $013F, $01D5, $0316, $029F, $02E2, $018A
                                    DECLE   $0170, $0035, $00BD, $0000, $0000
                                _AW.end:  ; 21 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _AX:
                                    DECLE   _AX.end - _AX - 1
                                    DECLE   $0218, $02CD, $016F, $02F5, $0386, $00C2, $00CD, $0094
                                    DECLE   $010C, $0005, $0000
                                _AX.end:  ; 11 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _AY:
                                    DECLE   _AY.end - _AY - 1
                                    DECLE   $0110, $038C, $016E, $03B7, $03B3, $02AF, $0221, $009E
                                    DECLE   $01AA, $01B3, $00BF, $02E7, $025B, $0354, $00DA, $017F
                                    DECLE   $018A, $03F3, $00AF, $02D5, $0356, $027F, $017A, $01FB
                                    DECLE   $011E, $01B9, $03E5, $029F, $025A, $0076, $0148, $0124
                                    DECLE   $003D, $0000
                                _AY.end:  ; 34 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _BB1:
                                    DECLE   _BB1.end - _BB1 - 1
                                    DECLE   $0318, $004C, $016C, $00FB, $00C7, $0144, $002E, $030C
                                    DECLE   $010E, $018C, $01DC, $00AB, $00C9, $0268, $01F7, $021D
                                    DECLE   $01B3, $0098, $0000
                                _BB1.end:  ; 19 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _BB2:
                                    DECLE   _BB2.end - _BB2 - 1
                                    DECLE   $00F4, $0046, $0062, $0200, $0221, $03E4, $0087, $016F
                                    DECLE   $02A6, $02B7, $0212, $0326, $0368, $01BF, $0338, $0196
                                    DECLE   $0002
                                _BB2.end:  ; 17 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _CH:
                                    DECLE   _CH.end - _CH - 1
                                    DECLE   $00F5, $0146, $0052, $0000, $032A, $0049, $0032, $02F2
                                    DECLE   $02A5, $0000, $026D, $0119, $0124, $00F6, $0000
                                _CH.end:  ; 15 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _DD1:
                                    DECLE   _DD1.end - _DD1 - 1
                                    DECLE   $0318, $034C, $016E, $0397, $01B9, $0020, $02B1, $008E
                                    DECLE   $0349, $0291, $01D8, $0072, $0000
                                _DD1.end:  ; 13 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _DD2:
                                    DECLE   _DD2.end - _DD2 - 1
                                    DECLE   $00F4, $00C6, $00F2, $0000, $0129, $00A6, $0246, $01F3
                                    DECLE   $02C6, $02B7, $028E, $0064, $0362, $01CF, $0379, $01D5
                                    DECLE   $0002
                                _DD2.end:  ; 17 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _DH1:
                                    DECLE   _DH1.end - _DH1 - 1
                                    DECLE   $0018, $034F, $016D, $030B, $0306, $0363, $017E, $006A
                                    DECLE   $0164, $019E, $01DA, $00CB, $00E8, $027A, $03E8, $01D7
                                    DECLE   $0173, $00A1, $0000
                                _DH1.end:  ; 19 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _DH2:
                                    DECLE   _DH2.end - _DH2 - 1
                                    DECLE   $0119, $034C, $016D, $030B, $0306, $0363, $017E, $006A
                                    DECLE   $0164, $019E, $01DA, $00CB, $00E8, $027A, $03E8, $01D7
                                    DECLE   $0173, $00A1, $0000
                                _DH2.end:  ; 19 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _EH:
                                    DECLE   _EH.end - _EH - 1
                                    DECLE   $0218, $02CD, $016F, $0105, $014B, $0224, $02CF, $0274
                                    DECLE   $014C, $0005, $0000
                                _EH.end:  ; 11 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _EL:
                                    DECLE   _EL.end - _EL - 1
                                    DECLE   $0118, $038D, $016E, $011C, $008B, $03D2, $030F, $0262
                                    DECLE   $006C, $019D, $01CC, $022B, $0170, $0078, $03FE, $0018
                                    DECLE   $0183, $03A3, $010D, $016E, $012E, $00C6, $00C3, $0300
                                    DECLE   $0060, $000D, $0005, $0000
                                _EL.end:  ; 28 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _ER1:
                                    DECLE   _ER1.end - _ER1 - 1
                                    DECLE   $0118, $034C, $016E, $001C, $0089, $01C3, $034E, $03E6
                                    DECLE   $00AB, $0095, $0001, $0000, $03FC, $0381, $0000, $0188
                                    DECLE   $01DA, $00CB, $00E7, $0048, $03A6, $0244, $016C, $01A8
                                    DECLE   $03E4, $0000, $0002, $0001, $00FC, $01DA, $02E4, $0000
                                    DECLE   $0002, $0008, $0200, $0217, $0164, $0000, $000E, $0038
                                    DECLE   $0014, $01EA, $0264, $0000, $0002, $0048, $01EC, $02F1
                                    DECLE   $03CC, $016D, $021E, $0048, $00C2, $034E, $036A, $000D
                                    DECLE   $008D, $000B, $0200, $0047, $0022, $03A8, $0000, $0000
                                _ER1.end:  ; 64 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _ER2:
                                    DECLE   _ER2.end - _ER2 - 1
                                    DECLE   $0218, $034C, $016E, $001C, $0089, $01C3, $034E, $03E6
                                    DECLE   $00AB, $0095, $0001, $0000, $03FC, $0381, $0000, $0190
                                    DECLE   $01D8, $00CB, $00E7, $0058, $01A6, $0244, $0164, $02A9
                                    DECLE   $0024, $0000, $0000, $0007, $0201, $02F8, $02E4, $0000
                                    DECLE   $0002, $0001, $00FC, $02DA, $0024, $0000, $0002, $0008
                                    DECLE   $0200, $0217, $0024, $0000, $000E, $0038, $0014, $03EA
                                    DECLE   $03A4, $0000, $0002, $0048, $01EC, $03F1, $038C, $016D
                                    DECLE   $021E, $0048, $00C2, $034E, $036A, $000D, $009D, $0003
                                    DECLE   $0200, $0047, $0022, $03A8, $0000, $0000
                                _ER2.end:  ; 70 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _EY:
                                    DECLE   _EY.end - _EY - 1
                                    DECLE   $0310, $038C, $016E, $02A7, $00BB, $0160, $0290, $0094
                                    DECLE   $01CA, $03A9, $00C1, $02D7, $015B, $01D4, $03CE, $02FF
                                    DECLE   $00EA, $03E7, $0041, $0277, $025B, $0355, $03C9, $0103
                                    DECLE   $02EA, $03E4, $003F, $0000
                                _EY.end:  ; 28 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _FF:
                                    DECLE   _FF.end - _FF - 1
                                    DECLE   $0119, $03C8, $0000, $00A7, $0094, $0138, $01C6, $0000
                                _FF.end:  ; 8 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _GG1:
                                    DECLE   _GG1.end - _GG1 - 1
                                    DECLE   $00F4, $00C6, $00C2, $0200, $0015, $03FE, $0283, $01FD
                                    DECLE   $01E6, $00B7, $030A, $0364, $0331, $017F, $033D, $0215
                                    DECLE   $0002
                                _GG1.end:  ; 17 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _GG2:
                                    DECLE   _GG2.end - _GG2 - 1
                                    DECLE   $00F4, $0106, $0072, $0300, $0021, $0308, $0039, $0173
                                    DECLE   $00C6, $00B7, $037E, $03A3, $0319, $0177, $0036, $0217
                                    DECLE   $0002
                                _GG2.end:  ; 17 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _GG3:
                                    DECLE   _GG3.end - _GG3 - 1
                                    DECLE   $00F8, $0146, $00F2, $0100, $0132, $03A8, $0055, $01F5
                                    DECLE   $00A6, $02B7, $0291, $0326, $0368, $0167, $023A, $01C6
                                    DECLE   $0002
                                _GG3.end:  ; 17 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _HH1:
                                    DECLE   _HH1.end - _HH1 - 1
                                    DECLE   $0218, $01C9, $0000, $0095, $0127, $0060, $01D6, $0213
                                    DECLE   $0002, $01AE, $033E, $01A0, $03C4, $0122, $0001, $0218
                                    DECLE   $01E4, $03FD, $0019, $0000
                                _HH1.end:  ; 20 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _HH2:
                                    DECLE   _HH2.end - _HH2 - 1
                                    DECLE   $0218, $00CB, $0000, $0086, $000F, $0240, $0182, $031A
                                    DECLE   $02DB, $0008, $0293, $0067, $00BD, $01E0, $0092, $000C
                                    DECLE   $0000
                                _HH2.end:  ; 17 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _IH:
                                    DECLE   _IH.end - _IH - 1
                                    DECLE   $0118, $02CD, $016F, $0205, $0144, $02C3, $00FE, $031A
                                    DECLE   $000D, $0005, $0000
                                _IH.end:  ; 11 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _IY:
                                    DECLE   _IY.end - _IY - 1
                                    DECLE   $0318, $02CC, $016F, $0008, $030B, $01C3, $0330, $0178
                                    DECLE   $002B, $019D, $01F6, $018B, $01E1, $0010, $020D, $0358
                                    DECLE   $015F, $02A4, $02CC, $016F, $0109, $030B, $0193, $0320
                                    DECLE   $017A, $034C, $009C, $0017, $0001, $0200, $03C1, $0020
                                    DECLE   $00A7, $001D, $0001, $0104, $003D, $0040, $01A7, $01CA
                                    DECLE   $018B, $0160, $0078, $01F6, $0343, $01C7, $0090, $0000
                                _IY.end:  ; 48 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _JH:
                                    DECLE   _JH.end - _JH - 1
                                    DECLE   $0018, $0149, $0001, $00A4, $0321, $0180, $01F4, $039A
                                    DECLE   $02DC, $023C, $011A, $0047, $0200, $0001, $018E, $034E
                                    DECLE   $0394, $0356, $02C1, $010C, $03FD, $0129, $00B7, $01BA
                                    DECLE   $0000
                                _JH.end:  ; 25 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _KK1:
                                    DECLE   _KK1.end - _KK1 - 1
                                    DECLE   $00F4, $00C6, $00D2, $0000, $023A, $03E0, $02D1, $02E5
                                    DECLE   $0184, $0200, $0041, $0210, $0188, $00C5, $0000
                                _KK1.end:  ; 15 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _KK2:
                                    DECLE   _KK2.end - _KK2 - 1
                                    DECLE   $021D, $023C, $0211, $003C, $0180, $024D, $0008, $032B
                                    DECLE   $025B, $002D, $01DC, $01E3, $007A, $0000
                                _KK2.end:  ; 14 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _KK3:
                                    DECLE   _KK3.end - _KK3 - 1
                                    DECLE   $00F7, $0046, $01D2, $0300, $0131, $006C, $006E, $00F1
                                    DECLE   $00E4, $0000, $025A, $010D, $0110, $01F9, $014A, $0001
                                    DECLE   $00B5, $01A2, $00D8, $01CE, $0000
                                _KK3.end:  ; 21 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _LL:
                                    DECLE   _LL.end - _LL - 1
                                    DECLE   $0318, $038C, $016D, $029E, $0333, $0260, $0221, $0294
                                    DECLE   $01C4, $0299, $025A, $00E6, $014C, $012C, $0031, $0000
                                _LL.end:  ; 16 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _MM:
                                    DECLE   _MM.end - _MM - 1
                                    DECLE   $0210, $034D, $016D, $03F5, $00B0, $002E, $0220, $0290
                                    DECLE   $03CE, $02B6, $03AA, $00F3, $00CF, $015D, $016E, $0000
                                _MM.end:  ; 16 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _NG1:
                                    DECLE   _NG1.end - _NG1 - 1
                                    DECLE   $0118, $03CD, $016E, $00DC, $032F, $01BF, $01E0, $0116
                                    DECLE   $02AB, $029A, $0358, $01DB, $015B, $01A7, $02FD, $02B1
                                    DECLE   $03D2, $0356, $0000
                                _NG1.end:  ; 19 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _NN1:
                                    DECLE   _NN1.end - _NN1 - 1
                                    DECLE   $0318, $03CD, $016C, $0203, $0306, $03C3, $015F, $0270
                                    DECLE   $002A, $009D, $000D, $0248, $01B4, $0120, $01E1, $00C8
                                    DECLE   $0003, $0040, $0000, $0080, $015F, $0006, $0000
                                _NN1.end:  ; 23 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _NN2:
                                    DECLE   _NN2.end - _NN2 - 1
                                    DECLE   $0018, $034D, $016D, $0203, $0306, $03C3, $015F, $0270
                                    DECLE   $002A, $0095, $0003, $0248, $01B4, $0120, $01E1, $0090
                                    DECLE   $000B, $0040, $0000, $0080, $015F, $019E, $01F6, $028B
                                    DECLE   $00E0, $0266, $03F6, $01D8, $0143, $01A8, $0024, $00C0
                                    DECLE   $0080, $0000, $01E6, $0321, $0024, $0260, $000A, $0008
                                    DECLE   $03FE, $0000, $0000
                                _NN2.end:  ; 43 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _OR2:
                                    DECLE   _OR2.end - _OR2 - 1
                                    DECLE   $0218, $018C, $016D, $02A6, $03AB, $004F, $0301, $0390
                                    DECLE   $02EA, $0289, $0228, $0356, $01CF, $02D5, $0135, $007D
                                    DECLE   $02B5, $02AF, $024A, $02E2, $0153, $0167, $0333, $02A9
                                    DECLE   $02B3, $039A, $0351, $0147, $03CD, $0339, $02DA, $0000
                                _OR2.end:  ; 32 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _OW:
                                    DECLE   _OW.end - _OW - 1
                                    DECLE   $0310, $034C, $016E, $02AE, $03B1, $00CF, $0304, $0192
                                    DECLE   $018A, $022B, $0041, $0277, $015B, $0395, $03D1, $0082
                                    DECLE   $03CE, $00B6, $03BB, $02DA, $0000
                                _OW.end:  ; 21 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _OY:
                                    DECLE   _OY.end - _OY - 1
                                    DECLE   $0310, $014C, $016E, $02A6, $03AF, $00CF, $0304, $0192
                                    DECLE   $03CA, $01A8, $007F, $0155, $02B4, $027F, $00E2, $036A
                                    DECLE   $031F, $035D, $0116, $01D5, $02F4, $025F, $033A, $038A
                                    DECLE   $014F, $01B5, $03D5, $0297, $02DA, $03F2, $0167, $0124
                                    DECLE   $03FB, $0001
                                _OY.end:  ; 34 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _PA1:
                                    DECLE   _PA1.end - _PA1 - 1
                                    DECLE   $00F1, $0000
                                _PA1.end:  ; 2 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _PA2:
                                    DECLE   _PA2.end - _PA2 - 1
                                    DECLE   $00F4, $0000
                                _PA2.end:  ; 2 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _PA3:
                                    DECLE   _PA3.end - _PA3 - 1
                                    DECLE   $00F7, $0000
                                _PA3.end:  ; 2 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _PA4:
                                    DECLE   _PA4.end - _PA4 - 1
                                    DECLE   $00FF, $0000
                                _PA4.end:  ; 2 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _PA5:
                                    DECLE   _PA5.end - _PA5 - 1
                                    DECLE   $031D, $003F, $0000
                                _PA5.end:  ; 3 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _PP:
                                    DECLE   _PP.end - _PP - 1
                                    DECLE   $00FD, $0106, $0052, $0000, $022A, $03A5, $0277, $035F
                                    DECLE   $0184, $0000, $0055, $0391, $00EB, $00CF, $0000
                                _PP.end:  ; 15 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _RR1:
                                    DECLE   _RR1.end - _RR1 - 1
                                    DECLE   $0118, $01CD, $016C, $029E, $0171, $038E, $01E0, $0190
                                    DECLE   $0245, $0299, $01AA, $02E2, $01C7, $02DE, $0125, $00B5
                                    DECLE   $02C5, $028F, $024E, $035E, $01CB, $02EC, $0005, $0000
                                _RR1.end:  ; 24 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _RR2:
                                    DECLE   _RR2.end - _RR2 - 1
                                    DECLE   $0218, $03CC, $016C, $030C, $02C8, $0393, $02CD, $025E
                                    DECLE   $008A, $019D, $01AC, $02CB, $00BE, $0046, $017E, $01C2
                                    DECLE   $0174, $00A1, $01E5, $00E0, $010E, $0007, $0313, $0017
                                    DECLE   $0000
                                _RR2.end:  ; 25 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _SH:
                                    DECLE   _SH.end - _SH - 1
                                    DECLE   $0218, $0109, $0000, $007A, $0187, $02E0, $03F6, $0311
                                    DECLE   $0002, $0126, $0242, $0161, $03E9, $0219, $016C, $0300
                                    DECLE   $0013, $0045, $0124, $0005, $024C, $005C, $0182, $03C2
                                    DECLE   $0001
                                _SH.end:  ; 25 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _SS:
                                    DECLE   _SS.end - _SS - 1
                                    DECLE   $0218, $01CA, $0001, $0128, $001C, $0149, $01C6, $0000
                                _SS.end:  ; 8 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _TH:
                                    DECLE   _TH.end - _TH - 1
                                    DECLE   $0019, $0349, $0000, $00C6, $0212, $01D8, $01CA, $0000
                                _TH.end:  ; 8 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _TT1:
                                    DECLE   _TT1.end - _TT1 - 1
                                    DECLE   $00F6, $0046, $0142, $0100, $0042, $0088, $027E, $02EF
                                    DECLE   $01A4, $0200, $0049, $0290, $00FC, $00E8, $0000
                                _TT1.end:  ; 15 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _TT2:
                                    DECLE   _TT2.end - _TT2 - 1
                                    DECLE   $00F5, $00C6, $01D2, $0100, $0335, $00E9, $0042, $027A
                                    DECLE   $02A4, $0000, $0062, $01D1, $014C, $03EA, $02EC, $01E0
                                    DECLE   $0007, $03A7, $0000
                                _TT2.end:  ; 19 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _UH:
                                    DECLE   _UH.end - _UH - 1
                                    DECLE   $0018, $034E, $016E, $01FF, $0349, $00D2, $003C, $030C
                                    DECLE   $008B, $0005, $0000
                                _UH.end:  ; 11 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _UW1:
                                    DECLE   _UW1.end - _UW1 - 1
                                    DECLE   $0318, $014C, $016F, $029E, $03BD, $03BD, $0271, $0212
                                    DECLE   $0325, $0291, $016A, $027B, $014A, $03B4, $0133, $0001
                                _UW1.end:  ; 16 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _UW2:
                                    DECLE   _UW2.end - _UW2 - 1
                                    DECLE   $0018, $034E, $016E, $02F6, $0107, $02C2, $006D, $0090
                                    DECLE   $03AC, $01A4, $01DC, $03AB, $0128, $0076, $03E6, $0119
                                    DECLE   $014F, $03A6, $03A5, $0020, $0090, $0001, $02EE, $00BB
                                    DECLE   $0000
                                _UW2.end:  ; 25 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _VV:
                                    DECLE   _VV.end - _VV - 1
                                    DECLE   $0218, $030D, $016C, $010B, $010B, $0095, $034F, $03E4
                                    DECLE   $0108, $01B5, $01BE, $028B, $0160, $00AA, $03E4, $0106
                                    DECLE   $00EB, $02DE, $014C, $016E, $00F6, $0107, $00D2, $00CD
                                    DECLE   $0296, $00E4, $0006, $0000
                                _VV.end:  ; 28 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _WH:
                                    DECLE   _WH.end - _WH - 1
                                    DECLE   $0218, $00C9, $0000, $0084, $038E, $0147, $03A4, $0195
                                    DECLE   $0000, $012E, $0118, $0150, $02D1, $0232, $01B7, $03F1
                                    DECLE   $0237, $01C8, $03B1, $0227, $01AE, $0254, $0329, $032D
                                    DECLE   $01BF, $0169, $019A, $0307, $0181, $028D, $0000
                                _WH.end:  ; 31 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _WW:
                                    DECLE   _WW.end - _WW - 1
                                    DECLE   $0118, $034D, $016C, $00FA, $02C7, $0072, $03CC, $0109
                                    DECLE   $000B, $01AD, $019E, $016B, $0130, $0278, $01F8, $0314
                                    DECLE   $017E, $029E, $014D, $016D, $0205, $0147, $02E2, $001A
                                    DECLE   $010A, $026E, $0004, $0000
                                _WW.end:  ; 28 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _XR2:
                                    DECLE   _XR2.end - _XR2 - 1
                                    DECLE   $0318, $034C, $016E, $02A6, $03BB, $002F, $0290, $008E
                                    DECLE   $004B, $0392, $01DA, $024B, $013A, $01DA, $012F, $00B5
                                    DECLE   $02E5, $0297, $02DC, $0372, $014B, $016D, $0377, $00E7
                                    DECLE   $0376, $038A, $01CE, $026B, $02FA, $01AA, $011E, $0071
                                    DECLE   $00D5, $0297, $02BC, $02EA, $01C7, $02D7, $0135, $0155
                                    DECLE   $01DD, $0007, $0000
                                _XR2.end:  ; 43 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _YR:
                                    DECLE   _YR.end - _YR - 1
                                    DECLE   $0318, $03CC, $016E, $0197, $00FD, $0130, $0270, $0094
                                    DECLE   $0328, $0291, $0168, $007E, $01CC, $02F5, $0125, $02B5
                                    DECLE   $00F4, $0298, $01DA, $03F6, $0153, $0126, $03B9, $00AB
                                    DECLE   $0293, $03DB, $0175, $01B9, $0001
                                _YR.end:  ; 29 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _YY1:
                                    DECLE   _YY1.end - _YY1 - 1
                                    DECLE   $0318, $01CC, $016E, $0015, $00CB, $0263, $0320, $0078
                                    DECLE   $01CE, $0094, $001F, $0040, $0320, $03BF, $0230, $00A7
                                    DECLE   $000F, $01FE, $03FC, $01E2, $00D0, $0089, $000F, $0248
                                    DECLE   $032B, $03FD, $01CF, $0001, $0000
                                _YY1.end:  ; 29 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _YY2:
                                    DECLE   _YY2.end - _YY2 - 1
                                    DECLE   $0318, $01CC, $016E, $0015, $00CB, $0263, $0320, $0078
                                    DECLE   $01CE, $0094, $001F, $0040, $0320, $03BF, $0230, $00A7
                                    DECLE   $000F, $01FE, $03FC, $01E2, $00D0, $0089, $000F, $0248
                                    DECLE   $032B, $03FD, $01CF, $0199, $01EE, $008B, $0161, $0232
                                    DECLE   $0004, $0318, $01A7, $0198, $0124, $03E0, $0001, $0001
                                    DECLE   $030F, $0027, $0000
                                _YY2.end:  ; 43 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _ZH:
                                    DECLE   _ZH.end - _ZH - 1
                                    DECLE   $0310, $014D, $016E, $00C3, $03B9, $01BF, $0241, $0012
                                    DECLE   $0163, $00E1, $0000, $0080, $0084, $023F, $003F, $0000
                                _ZH.end:  ; 16 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _ZZ:
                                    DECLE   _ZZ.end - _ZZ - 1
                                    DECLE   $0218, $010D, $016F, $0225, $0351, $00B5, $02A0, $02EE
                                    DECLE   $00E9, $014D, $002C, $0360, $0008, $00EC, $004C, $0342
                                    DECLE   $03D4, $0156, $0052, $0131, $0008, $03B0, $01BE, $0172
                                    DECLE   $0000
                                _ZZ.end:  ; 25 decles

                                ;;==========================================================================;;
                                ;;                                                                          ;;
                                ;;  Copyright information:                                                  ;;
                                ;;                                                                          ;;
                                ;;  The above allophone data was extracted from the SP0256-AL2 ROM image.   ;;
                                ;;  The SP0256-AL2 allophones are NOT in the public domain, nor are they    ;;
                                ;;  placed under the GNU General Public License.  This program is           ;;
                                ;;  distributed in the hope that it will be useful, but WITHOUT ANY         ;;
                                ;;  WARRANTY; without even the implied warranty of MERCHANTABILITY or       ;;
                                ;;  FITNESS FOR A PARTICULAR PURPOSE.                                       ;;
                                ;;                                                                          ;;
                                ;;  Microchip, Inc. retains the copyright to the data and algorithms        ;;
                                ;;  contained in the SP0256-AL2.  This speech data is distributed with      ;;
                                ;;  explicit permission from Microchip, Inc.  All such redistributions      ;;
                                ;;  must retain this notice of copyright.                                   ;;
                                ;;                                                                          ;;
                                ;;  No copyright claims are made on this data by the author(s) of SDK1600.  ;;
                                ;;  Please see http://spatula-city.org/~im14u2c/sp0256-al2/ for details.    ;;
                                ;;                                                                          ;;
                                ;;==========================================================================;;

                                ;* ======================================================================== *;
                                ;*  These routines are placed into the public domain by their author.  All  *;
                                ;*  copyright rights are hereby relinquished on the routines and data in    *;
                                ;*  this file.  -- Joseph Zbiciak, 2008                                     *;
                                ;* ======================================================================== *;

                                ;; ======================================================================== ;;
                                ;;  INTELLIVOICE DRIVER ROUTINES                                            ;;
                                ;;  Written in 2002 by Joe Zbiciak <intvnut AT gmail.com>                   ;;
                                ;;  http://spatula-city.org/~im14u2c/intv/                                  ;;
                                ;; ======================================================================== ;;

                                ;; ======================================================================== ;;
                                ;;  GLOBAL VARIABLES USED BY THESE ROUTINES                                 ;;
                                ;;                                                                          ;;
                                ;;  Note that some of these routines may use one or more global variables.  ;;
                                ;;  If you use these routines, you will need to allocate the appropriate    ;;
                                ;;  space in either 16-bit or 8-bit memory as appropriate.  Each global     ;;
                                ;;  variable is listed with the routines which use it and the required      ;;
                                ;;  memory width.                                                           ;;
                                ;;                                                                          ;;
                                ;;  Example declarations for these routines are shown below, commented out. ;;
                                ;;  You should uncomment these and add them to your program to make use of  ;;
                                ;;  the routine that needs them.  Make sure to assign these variables to    ;;
                                ;;  locations that aren't used for anything else.                           ;;
                                ;; ======================================================================== ;;

                                                        ; Used by       Req'd Width     Description
                                                        ;-----------------------------------------------------
                                ;IV.QH      EQU $110    ; IV_xxx        8-bit           Voice queue head
                                ;IV.QT      EQU $111    ; IV_xxx        8-bit           Voice queue tail
                                ;IV.Q       EQU $112    ; IV_xxx        8-bit           Voice queue  (8 bytes)
                                ;IV.FLEN    EQU $11A    ; IV_xxx        8-bit           Length of FIFO data
                                ;IV.FPTR    EQU $320    ; IV_xxx        16-bit          Current FIFO ptr.
                                ;IV.PPTR    EQU $321    ; IV_xxx        16-bit          Current Phrase ptr.

                                ;; ======================================================================== ;;
                                ;;  MEMORY USAGE                                                            ;;
                                ;;                                                                          ;;
                                ;;  These routines implement a queue of "pending phrases" that will be      ;;
                                ;;  played by the Intellivoice.  The user calls IV_PLAY to enqueue a        ;;
                                ;;  phrase number.  Phrase numbers indicate either a RESROM sample or       ;;
                                ;;  a compiled in phrase to be spoken.                                      ;;
                                ;;                                                                          ;;
                                ;;  The user must compose an "IV_PHRASE_TBL", which is composed of          ;;
                                ;;  pointers to phrases to be spoken.  Phrases are strings of pointers      ;;
                                ;;  and RESROM triggers, terminated by a NUL.                               ;;
                                ;;                                                                          ;;
                                ;;  Phrase numbers 1 through 42 are RESROM samples.  Phrase numbers         ;;
                                ;;  43 through 255 index into the IV_PHRASE_TBL.                            ;;
                                ;;                                                                          ;;
                                ;;  SPECIAL NOTES                                                           ;;
                                ;;                                                                          ;;
                                ;;  Bit 7 of IV.QH and IV.QT is used to denote whether the Intellivoice     ;;
                                ;;  is present.  If Intellivoice is present, this bit is clear.             ;;
                                ;;                                                                          ;;
                                ;;  Bit 6 of IV.QT is used to denote that we still need to do an ALD $00    ;;
                                ;;  for FIFO'd voice data.                                                  ;;
                                ;; ======================================================================== ;;
                                            

                                ;; ======================================================================== ;;
                                ;;  NAME                                                                    ;;
                                ;;      IV_INIT     Initialize the Intellivoice                             ;;
                                ;;                                                                          ;;
                                ;;  AUTHOR                                                                  ;;
                                ;;      Joseph Zbiciak <intvnut AT gmail.com>                               ;;
                                ;;                                                                          ;;
                                ;;  REVISION HISTORY                                                        ;;
                                ;;      15-Sep-2002 Initial revision . . . . . . . . . . .  J. Zbiciak      ;;
                                ;;                                                                          ;;
                                ;;  INPUTS for IV_INIT                                                      ;;
                                ;;      R5      Return address                                              ;;
                                ;;                                                                          ;;
                                ;;  OUTPUTS                                                                 ;;
                                ;;      R0      0 if Intellivoice found, -1 if not.                         ;;
                                ;;                                                                          ;;
                                ;;  DESCRIPTION                                                             ;;
                                ;;      Resets Intellivoice, determines if it is actually there, and        ;;
                                ;;      then initializes the IV structure.                                  ;;
                                ;; ------------------------------------------------------------------------ ;;
                                ;;                   Copyright (c) 2002, Joseph Zbiciak                     ;;
                                ;; ======================================================================== ;;

                                IV_INIT     PROC
                                            MVII    #$0400, R0          ;
                                            MVO     R0,     $0081       ; Reset the Intellivoice

                                            MVI     $0081,  R0          ; \
                                            RLC     R0,     2           ;  |-- See if we detect Intellivoice
                                            BOV     @@no_ivoice         ; /    once we've reset it.

                                            CLRR    R0                  ; 
                                            MVO     R0,     IV.FPTR     ; No data for FIFO
                                            MVO     R0,     IV.PPTR     ; No phrase being spoken
                                            MVO     R0,     IV.QH       ; Clear our queue
                                            MVO     R0,     IV.QT       ; Clear our queue
                                            JR      R5                  ; Done!

                                @@no_ivoice:
                                            CLRR    R0
                                            MVO     R0,     IV.FPTR     ; No data for FIFO
                                            MVO     R0,     IV.PPTR     ; No phrase being spoken
                                            DECR    R0
                                            MVO     R0,     IV.QH       ; Set queue to -1 ("No Intellivoice")
                                            MVO     R0,     IV.QT       ; Set queue to -1 ("No Intellivoice")
                                            JR      R5                  ; Done!
                                            ENDP

                                ;; ======================================================================== ;;
                                ;;  NAME                                                                    ;;
                                ;;      IV_ISR      Interrupt service routine to feed Intellivoice          ;;
                                ;;                                                                          ;;
                                ;;  AUTHOR                                                                  ;;
                                ;;      Joseph Zbiciak <intvnut AT gmail.com>                               ;;
                                ;;                                                                          ;;
                                ;;  REVISION HISTORY                                                        ;;
                                ;;      15-Sep-2002 Initial revision . . . . . . . . . . .  J. Zbiciak      ;;
                                ;;                                                                          ;;
                                ;;  INPUTS for IV_ISR                                                       ;;
                                ;;      R5      Return address                                              ;;
                                ;;                                                                          ;;
                                ;;  OUTPUTS                                                                 ;;
                                ;;      R0, R1, R4 trashed.                                                 ;;
                                ;;                                                                          ;;
                                ;;  NOTES                                                                   ;;
                                ;;      Call this from your main interrupt service routine.                 ;;
                                ;; ------------------------------------------------------------------------ ;;
                                ;;                   Copyright (c) 2002, Joseph Zbiciak                     ;;
                                ;; ======================================================================== ;;
                                IV_ISR      PROC
                                            ;; ------------------------------------------------------------ ;;
                                            ;;  Check for Intellivoice.  Leave if none present.             ;;
                                            ;; ------------------------------------------------------------ ;;
                                            MVI     IV.QT,  R1          ; Get queue tail
                                            SWAP    R1,     2
                                            BPL     @@ok                ; Bit 7 set? If yes: No Intellivoice
                                @@ald_busy:
                                @@leave     JR      R5                  ; Exit if no Intellivoice.

                                     
                                            ;; ------------------------------------------------------------ ;;
                                            ;;  Check to see if we pump samples into the FIFO.
                                            ;; ------------------------------------------------------------ ;;
                                @@ok:       MVI     IV.FPTR, R4         ; Get FIFO data pointer
                                            TSTR    R4                  ; is it zero?
                                            BEQ     @@no_fifodata       ; Yes:  No data for FIFO.
                                @@fifo_fill:
                                            MVI     $0081,  R0          ; Read speech FIFO ready bit
                                            SLLC    R0,     1           ; 
                                            BC      @@fifo_busy     

                                            MVI@    R4,     R0          ; Get next word
                                            MVO     R0,     $0081       ; write it to the FIFO

                                            MVI     IV.FLEN, R0         ;\
                                            DECR    R0                  ; |-- Decrement our FIFO'd data length
                                            MVO     R0,     IV.FLEN     ;/
                                            BEQ     @@last_fifo         ; If zero, we're done w/ FIFO
                                            MVO     R4,     IV.FPTR     ; Otherwise, save new pointer
                                            B       @@fifo_fill         ; ...and keep trying to load FIFO

                                @@last_fifo MVO     R0,     IV.FPTR     ; done with FIFO loading.
                                                                        ; fall into ALD processing.


                                            ;; ------------------------------------------------------------ ;;
                                            ;;  Try to do an Address Load.  We do this in two settings:     ;;
                                            ;;   -- We have no FIFO data to load.                           ;;
                                            ;;   -- We've loaded as much FIFO data as we can, but we        ;;
                                            ;;      might have an address load command to send for it.      ;;
                                            ;; ------------------------------------------------------------ ;;
                                @@fifo_busy:
                                @@no_fifodata:
                                            MVI     $0080,  R0          ; Read LRQ bit from ALD register
                                            SLLC    R0,     1
                                            BNC     @@ald_busy          ; LRQ is low, meaning we can't ALD.
                                                                        ; So, leave.

                                            ;; ------------------------------------------------------------ ;;
                                            ;;  We can do an address load (ALD) on the SP0256.  Give FIFO   ;;
                                            ;;  driven ALDs priority, since we already started the FIFO     ;;
                                            ;;  load.  The "need ALD" bit is stored in bit 6 of IV.QT.      ;;
                                            ;; ------------------------------------------------------------ ;;
                                            ANDI    #$40,   R1          ; Is "Need FIFO ALD" bit set?
                                            BEQ     @@no_fifo_ald
                                            XOR     IV.QT,  R1          ;\__ Clear the "Need FIFO ALD" bit.
                                            MVO     R1,     IV.QT       ;/
                                            CLRR    R1
                                            MVO     R1,     $80         ; Load a 0 into ALD (trigger FIFO rd.)
                                            JR      R5                  ; done!

                                            ;; ------------------------------------------------------------ ;;
                                            ;;  We don't need to ALD on behalf of the FIFO.  So, we grab    ;;
                                            ;;  the next thing off our phrase list.                         ;;
                                            ;; ------------------------------------------------------------ ;;
                                @@no_fifo_ald:
                                            MVI     IV.PPTR, R4         ; Get phrase pointer.
                                            TSTR    R4                  ; Is it zero?
                                            BEQ     @@next_phrase       ; Yes:  Get next phrase from queue.

                                            MVI@    R4,     R0
                                            TSTR    R0                  ; Is it end of phrase?
                                            BNEQ    @@process_phrase    ; !=0:  Go do it.

                                            MVO     R0,     IV.PPTR     ; 
                                @@next_phrase:
                                            MVI     IV.QT,  R1          ; reload queue tail (was trashed above)
                                            MOVR    R1,     R0          ; copy QT to R0 so we can increment it
                                            ANDI    #$7,    R1          ; Mask away flags in queue head
                                            CMP     IV.QH,  R1          ; Is it same as queue tail?
                                            BEQ     @@leave             ; Yes:  No more speech for now.

                                            INCR    R0
                                            ANDI    #$F7,   R0          ; mask away the possible 'carry'
                                            MVO     R0,     IV.QT       ; save updated queue tail

                                            ADDI    #IV.Q,  R1          ; Index into queue
                                            MVI@    R1,     R4          ; get next value from queue
                                            CMPI    #43,    R4          ; Is it a RESROM or Phrase?
                                            BNC     @@play_resrom_r4
                                @@new_phrase:
                                ;            ADDI    #IV_PHRASE_TBL - 43, R4 ; Index into phrase table
                                ;            MVI@    R4,     R4          ; Read from phrase table
                                            MVO     R4,     IV.PPTR
                                            JR      R5                  ; we'll get to this phrase next time.

                                @@play_resrom_r4:
                                            MVO     R4,     $0080       ; Just ALD it
                                            JR      R5                  ; and leave.

                                            ;; ------------------------------------------------------------ ;;
                                            ;;  We're in the middle of a phrase, so continue interpreting.  ;;
                                            ;; ------------------------------------------------------------ ;;
                                @@process_phrase:
                                            
                                            MVO     R4,     IV.PPTR     ; save new phrase pointer
                                            CMPI    #43,    R0          ; Is it a RESROM cue?
                                            BC      @@play_fifo         ; Just ALD it and leave.
                                @@play_resrom_r0
                                            MVO     R0,     $0080       ; Just ALD it
                                            JR      R5                  ; and leave.
                                @@play_fifo:
                                            MVI     IV.FPTR,R1          ; Make sure not to stomp existing FIFO
                                            TSTR    R1                  ; data.
                                            BEQ     @@new_fifo_ok
                                            DECR    R4                  ; Oops, FIFO data still playing,
                                            MVO     R4,     IV.PPTR     ; so rewind.
                                            JR      R5                  ; and leave.

                                @@new_fifo_ok:
                                            MOVR    R0,     R4          ;
                                            MVI@    R4,     R0          ; Get chunk length
                                            MVO     R0,     IV.FLEN     ; Init FIFO chunk length
                                            MVO     R4,     IV.FPTR     ; Init FIFO pointer
                                            MVI     IV.QT,  R0          ;\
                                            XORI    #$40,   R0          ; |- Set "Need ALD" bit in QT
                                            MVO     R0,     IV.QT       ;/

                                  IF 1      ; debug code                ;\
                                            ANDI    #$40,   R0          ; |   Debug code:  We should only
                                            BNEQ    @@qtok              ; |-- be here if "Need FIFO ALD" 
                                            HLT     ;BUG!!              ; |   was already clear.         
                                @@qtok                                  ;/    
                                  ENDI
                                            JR      R5                  ; leave.

                                            ENDP


                                ;; ======================================================================== ;;
                                ;;  NAME                                                                    ;;
                                ;;      IV_PLAY     Play a voice sample sequence.                           ;;
                                ;;                                                                          ;;
                                ;;  AUTHOR                                                                  ;;
                                ;;      Joseph Zbiciak <intvnut AT gmail.com>                               ;;
                                ;;                                                                          ;;
                                ;;  REVISION HISTORY                                                        ;;
                                ;;      15-Sep-2002 Initial revision . . . . . . . . . . .  J. Zbiciak      ;;
                                ;;                                                                          ;;
                                ;;  INPUTS for IV_PLAY                                                      ;;
                                ;;      R5      Invocation record, followed by return address.              ;;
                                ;;                  1 DECLE    Phrase number to play.                       ;;
                                ;;                                                                          ;;
                                ;;  INPUTS for IV_PLAY.1                                                    ;;
                                ;;      R0      Address of phrase to play.                                  ;;
                                ;;      R5      Return address                                              ;;
                                ;;                                                                          ;;
                                ;;  OUTPUTS                                                                 ;;
                                ;;      R0, R1  trashed                                                     ;;
                                ;;      Z==0    if item not successfully queued.                            ;;
                                ;;      Z==1    if successfully queued.                                     ;;
                                ;;                                                                          ;;
                                ;;  NOTES                                                                   ;;
                                ;;      This code will drop phrases if the queue is full.                   ;;
                                ;;      Phrase numbers 1..42 are RESROM samples.  43..255 will index        ;;
                                ;;      into the user-supplied IV_PHRASE_TBL.  43 will refer to the         ;;
                                ;;      first entry, 44 to the second, and so on.  Phrase 0 is undefined.   ;;
                                ;;                                                                          ;;
                                ;; ------------------------------------------------------------------------ ;;
                                ;;                   Copyright (c) 2002, Joseph Zbiciak                     ;;
                                ;; ======================================================================== ;;
                                IV_PLAY     PROC
                                            MVI@    R5,     R0

                                @@1:        ; alternate entry point
                                            MVI     IV.QT,  R1          ; Get queue tail
                                            SWAP    R1,     2           ;\___ Leave if "no Intellivoice"
                                            BMI     @@leave             ;/    bit it set.
                                @@ok:       
                                            DECR    R1                  ;\
                                            ANDI    #$7,    R1          ; |-- See if we still have room
                                            CMP     IV.QH,  R1          ;/
                                            BEQ     @@leave             ; Leave if we're full

                                @@2:        MVI     IV.QH,  R1          ; Get our queue head pointer
                                            PSHR    R1                  ;\
                                            INCR    R1                  ; |
                                            ANDI    #$F7,   R1          ; |-- Increment it, removing
                                            MVO     R1,     IV.QH       ; |   carry but preserving flags.
                                            PULR    R1                  ;/

                                            ADDI    #IV.Q,  R1          ;\__ Store phrase to queue
                                            MVO@    R0,     R1          ;/

                                @@leave:    JR      R5                  ; Leave.
                                            ENDP

                                ;; ======================================================================== ;;
                                ;;  NAME                                                                    ;;
                                ;;      IV_PLAYW    Play a voice sample sequence.  Wait for queue room.     ;;
                                ;;                                                                          ;;
                                ;;  AUTHOR                                                                  ;;
                                ;;      Joseph Zbiciak <intvnut AT gmail.com>                               ;;
                                ;;                                                                          ;;
                                ;;  REVISION HISTORY                                                        ;;
                                ;;      15-Sep-2002 Initial revision . . . . . . . . . . .  J. Zbiciak      ;;
                                ;;                                                                          ;;
                                ;;  INPUTS for IV_PLAY                                                      ;;
                                ;;      R5      Invocation record, followed by return address.              ;;
                                ;;                  1 DECLE    Phrase number to play.                       ;;
                                ;;                                                                          ;;
                                ;;  INPUTS for IV_PLAY.1                                                    ;;
                                ;;      R0      Address of phrase to play.                                  ;;
                                ;;      R5      Return address                                              ;;
                                ;;                                                                          ;;
                                ;;  OUTPUTS                                                                 ;;
                                ;;      R0, R1  trashed                                                     ;;
                                ;;                                                                          ;;
                                ;;  NOTES                                                                   ;;
                                ;;      This code will wait for a queue slot to open if queue is full.      ;;
                                ;;      Phrase numbers 1..42 are RESROM samples.  43..255 will index        ;;
                                ;;      into the user-supplied IV_PHRASE_TBL.  43 will refer to the         ;;
                                ;;      first entry, 44 to the second, and so on.  Phrase 0 is undefined.   ;;
                                ;;                                                                          ;;
                                ;; ------------------------------------------------------------------------ ;;
                                ;;                   Copyright (c) 2002, Joseph Zbiciak                     ;;
                                ;; ======================================================================== ;;
                                IV_PLAYW    PROC
                                            MVI@    R5,     R0

                                @@1:        ; alternate entry point
                                            MVI     IV.QT,  R1          ; Get queue tail
                                            SWAP    R1,     2           ;\___ Leave if "no Intellivoice"
                                            BMI     IV_PLAY.leave       ;/    bit it set.
                                @@ok:       
                                            DECR    R1                  ;\
                                            ANDI    #$7,    R1          ; |-- See if we still have room
                                            CMP     IV.QH,  R1          ;/
                                            BEQ     @@1                 ; wait for room
                                            B       IV_PLAY.2

                                            ENDP

                                ;; ======================================================================== ;;
                                ;;  NAME                                                                    ;;
                                ;;      IV_WAIT     Wait for voice queue to empty.                          ;;
                                ;;                                                                          ;;
                                ;;  AUTHOR                                                                  ;;
                                ;;      Joseph Zbiciak <intvnut AT gmail.com>                               ;;
                                ;;                                                                          ;;
                                ;;  REVISION HISTORY                                                        ;;
                                ;;      15-Sep-2002 Initial revision . . . . . . . . . . .  J. Zbiciak      ;;
                                ;;                                                                          ;;
                                ;;  INPUTS for IV_WAIT                                                      ;;
                                ;;      R5      Return address                                              ;;
                                ;;                                                                          ;;
                                ;;  OUTPUTS                                                                 ;;
                                ;;      R0      trashed.                                                    ;;
                                ;;                                                                          ;;
                                ;;  NOTES                                                                   ;;
                                ;;      This waits until the Intellivoice is nearly completely quiescent.   ;;
                                ;;      Some voice data may still be spoken from the last triggered         ;;
                                ;;      phrase.  To truly wait for *that* to be spoken, speak a 'pause'     ;;
                                ;;      (eg. RESROM.pa1) and then call IV_WAIT.                             ;;
                                ;; ------------------------------------------------------------------------ ;;
                                ;;                   Copyright (c) 2002, Joseph Zbiciak                     ;;
                                ;; ======================================================================== ;;
                                IV_WAIT     PROC
                                            MVI     IV.QH,  R0
                                            SWAP    R0                  ;\___ test bit 7, leave if set.
                                            SWAP    R0                  ;/    (SWAP2 corrupts upper byte.)
                                            BMI     @@leave

                                            ; Wait for queue to drain.
                                @@q_loop:   CMP     IV.QT,  R0
                                            BNEQ    @@q_loop

                                            ; Wait for FIFO and LRQ to say ready.
                                @@s_loop:   MVI     $81,    R0          ; Read FIFO status.  0 == ready.
                                            COMR    R0
                                            AND     $80,    R0          ; Merge w/ ALD status.  1 == ready
                                            TSTR    R0
                                            BPL     @@s_loop            ; if bit 15 == 0, not ready.
                                            
                                @@leave:    JR      R5
                                            ENDP

                                ;; ======================================================================== ;;
                                ;;  End of File:  ivoice.asm                                                ;;
                                ;; ======================================================================== ;;

                                ;* ======================================================================== *;
                                ;*  These routines are placed into the public domain by their author.  All  *;
                                ;*  copyright rights are hereby relinquished on the routines and data in    *;
                                ;*  this file.  -- Joseph Zbiciak, 2008                                     *;
                                ;* ======================================================================== *;

                                ;; ======================================================================== ;;
                                ;;  NAME                                                                    ;;
                                ;;      IV_SAYNUM16 Say a 16-bit unsigned number using RESROM digits        ;;
                                ;;                                                                          ;;
                                ;;  AUTHOR                                                                  ;;
                                ;;      Joseph Zbiciak <intvnut AT gmail.com>                               ;;
                                ;;                                                                          ;;
                                ;;  REVISION HISTORY                                                        ;;
                                ;;      16-Sep-2002 Initial revision . . . . . . . . . . .  J. Zbiciak      ;;
                                ;;                                                                          ;;
                                ;;  INPUTS for IV_INIT                                                      ;;
                                ;;      R0      Number to "speak"                                           ;;
                                ;;      R5      Return address                                              ;;
                                ;;                                                                          ;;
                                ;;  OUTPUTS                                                                 ;;
                                ;;                                                                          ;;
                                ;;  DESCRIPTION                                                             ;;
                                ;;      "Says" a 16-bit number using IV_PLAYW to queue up the phrase.       ;;
                                ;;      Because the number may be built from several segments, it could     ;;
                                ;;      easily eat up the queue.  I believe the longest number will take    ;;
                                ;;      7 queue entries -- that is, fill the queue.  Thus, this code        ;;
                                ;;      could block, waiting for slots in the queue.                        ;;
                                ;; ======================================================================== ;;

                                IV_SAYNUM16 PROC
                                            PSHR    R5

                                            TSTR    R0
                                            BEQ     @@zero          ; Special case:  Just say "zero"

                                            ;; ------------------------------------------------------------ ;;
                                            ;;  First, try to pull off 'thousands'.  We call ourselves      ;;
                                            ;;  recursively to play the the number of thousands.            ;;
                                            ;; ------------------------------------------------------------ ;;
                                            CLRR    R1
                                @@thloop:   INCR    R1
                                            SUBI    #1000,  R0
                                            BC      @@thloop

                                            ADDI    #1000,  R0
                                            PSHR    R0
                                            DECR    R1
                                            BEQ     @@no_thousand

                                            CALL    IV_SAYNUM16.recurse

                                            CALL    IV_PLAYW
                                            DECLE   36  ; THOUSAND
                                            
                                @@no_thousand
                                            PULR    R1

                                            ;; ------------------------------------------------------------ ;;
                                            ;;  Now try to play hundreds.                                   ;;
                                            ;; ------------------------------------------------------------ ;;
                                            MVII    #7-1, R0    ; ZERO
                                            CMPI    #100,   R1
                                            BNC     @@no_hundred

                                @@hloop:    INCR    R0
                                            SUBI    #100,   R1
                                            BC      @@hloop
                                            ADDI    #100,   R1

                                            PSHR    R1

                                            CALL    IV_PLAYW.1

                                            CALL    IV_PLAYW
                                            DECLE   35  ; HUNDRED

                                            PULR    R1
                                            B       @@notrecurse    ; skip "PSHR R5"
                                @@recurse:  PSHR    R5              ; recursive entry point for 'thousand'

                                @@no_hundred:
                                @@notrecurse:
                                            MOVR    R1,     R0
                                            BEQ     @@leave

                                            SUBI    #20,    R1
                                            BNC     @@teens

                                            MVII    #27-1, R0   ; TWENTY
                                @@tyloop    INCR    R0
                                            SUBI    #10,    R1
                                            BC      @@tyloop
                                            ADDI    #10,    R1

                                            PSHR    R1
                                            CALL    IV_PLAYW.1

                                            PULR    R0
                                            TSTR    R0
                                            BEQ     @@leave

                                @@teens:
                                @@zero:     ADDI    #7, R0  ; ZERO

                                            CALL    IV_PLAYW.1

                                @@leave     PULR    PC
                                            ENDP

                                ;; ======================================================================== ;;
                                ;;  End of File:  saynum16.asm                                              ;;
                                ;; ======================================================================== ;;

                                    ENDI

                                        IF DEFINED intybasic_flash

                                ;; ======================================================================== ;;
                                ;;  JLP "Save Game" support                                                 ;;
                                ;; ======================================================================== ;;
                                JF.first    EQU     $8023
                                JF.last     EQU     $8024
                                JF.addr     EQU     $8025
                                JF.row      EQU     $8026
                                                   
                                JF.wrcmd    EQU     $802D
                                JF.rdcmd    EQU     $802E
                                JF.ercmd    EQU     $802F
                                JF.wrkey    EQU     $C0DE
                                JF.rdkey    EQU     $DEC0
                                JF.erkey    EQU     $BEEF

                                JF.write:   DECLE   JF.wrcmd,   JF.wrkey    ; Copy JLP RAM to flash row  
                                JF.read:    DECLE   JF.rdcmd,   JF.rdkey    ; Copy flash row to JLP RAM  
                                JF.erase:   DECLE   JF.ercmd,   JF.erkey    ; Erase flash sector 

                                ;; ======================================================================== ;;
                                ;;  JF.INIT         Copy JLP save-game support routine to System RAM        ;;
                                ;; ======================================================================== ;;
                                JF.INIT     PROC
                                            PSHR    R5            
                                            MVII    #@@__code,  R5
                                            MVII    #JF.SYSRAM, R4
                                            REPEAT  5       
                                            MVI@    R5,         R0      ; \_ Copy code fragment to System RAM
                                            MVO@    R0,         R4      ; /
                                            ENDR
                                            PULR    PC

                                            ;; === start of code that will run from RAM
                                @@__code:   MVO@    R0,         R1      ; JF.SYSRAM + 0: initiate command
                                            ADD@    R1,         PC      ; JF.SYSRAM + 1: Wait for JLP to return
                                            JR      R5                  ; JF.SYSRAM + 2:
                                            MVO@    R2,         R2      ; JF.SYSRAM + 3: \__ simple ISR
                                            JR      R5                  ; JF.SYSRAM + 4: /
                                            ;; === end of code that will run from RAM
                                            ENDP

                                ;; ======================================================================== ;;
                                ;;  JF.CMD          Issue a JLP Flash command                               ;;
                                ;;                                                                          ;;
                                ;;  INPUT                                                                   ;;
                                ;;      R0  Slot number to operate on                                       ;;
                                ;;      R1  Address to copy to/from in JLP RAM                              ;;
                                ;;      @R5 Command to invoke:                                              ;;
                                ;;                                                                          ;;
                                ;;              JF.write -- Copy JLP RAM to Flash                           ;;
                                ;;              JF.read  -- Copy Flash to JLP RAM                           ;;
                                ;;              JF.erase -- Erase flash sector                              ;;
                                ;;                                                                          ;;
                                ;;  OUTPUT                                                                  ;;
                                ;;      R0 - R4 not modified.  (Saved and restored across call)             ;;
                                ;;      JLP command executed                                                ;;
                                ;;                                                                          ;;
                                ;;  NOTES                                                                   ;;
                                ;;      This code requires two short routines in the console's System RAM.  ;;
                                ;;      It also requires that the system stack reside in System RAM.        ;;
                                ;;      Because an interrupt may occur during the code's execution, there   ;;
                                ;;      must be sufficient stack space to service the interrupt (8 words).  ;;
                                ;;                                                                          ;;
                                ;;      The code also relies on the fact that the EXEC ISR dispatch does    ;;
                                ;;      not modify R2.  This allows us to initialize R2 for the ISR ahead   ;;
                                ;;      of time, rather than in the ISR.                                    ;;
                                ;; ======================================================================== ;;
                                JF.CMD      PROC

                                            MVO     R4,         JF.SV.R4    ; \
                                            MVII    #JF.SV.R0,  R4          ;  |
                                            MVO@    R0,         R4          ;  |- Save registers, but not on
                                            MVO@    R1,         R4          ;  |  the stack.  (limit stack use)
                                            MVO@    R2,         R4          ; /

                                            MVI@    R5,         R4          ; Get command to invoke

                                            MVO     R5,         JF.SV.R5    ; save return address

                                            DIS
                                            MVO     R1,         JF.addr     ; \_ Save SG arguments in JLP
                                            MVO     R0,         JF.row      ; /
                                                                          
                                            MVI@    R4,         R1          ; Get command address
                                            MVI@    R4,         R0          ; Get unlock word
                                                                          
                                            MVII    #$100,      R4          ; \
                                            SDBD                            ;  |_ Save old ISR in save area
                                            MVI@    R4,         R2          ;  |
                                            MVO     R2,         JF.SV.ISR   ; /
                                                                          
                                            MVII    #JF.SYSRAM + 3, R2      ; \
                                            MVO     R2,         $100        ;  |_ Set up new ISR in RAM
                                            SWAP    R2                      ;  |
                                            MVO     R2,         $101        ; / 
                                                                          
                                            MVII    #$20,       R2          ; Address of STIC handshake
                                            JSRE    R5,  JF.SYSRAM          ; Invoke the command
                                                                          
                                            MVI     JF.SV.ISR,  R2          ; \
                                            MVO     R2,         $100        ;  |_ Restore old ISR 
                                            SWAP    R2                      ;  |
                                            MVO     R2,         $101        ; /
                                                                          
                                            MVII    #JF.SV.R0,  R5          ; \
                                            MVI@    R5,         R0          ;  |
                                            MVI@    R5,         R1          ;  |- Restore registers
                                            MVI@    R5,         R2          ;  |
                                            MVI@    R5,         R4          ; /
                                            MVI@    R5,         PC          ; Return

                                            ENDP


                                        ENDI

                                	IF DEFINED intybasic_fastmult

                                ; Quarter Square Multiplication
                                ; Assembly code by Joe Zbiciak, 2015
                                ; Released to public domain.

0x640B                          QSQR8_TBL:  PROC
640B   3F80 3F01 3E82 3E04                  DECLE   $3F80, $3F01, $3E82, $3E04, $3D86, $3D09, $3C8C, $3C10
640F   3D86 3D09 3C8C 3C10 
6413   3B94 3B19 3A9E 3A24                  DECLE   $3B94, $3B19, $3A9E, $3A24, $39AA, $3931, $38B8, $3840
6417   39AA 3931 38B8 3840 
641B   37C8 3751 36DA 3664                  DECLE   $37C8, $3751, $36DA, $3664, $35EE, $3579, $3504, $3490
641F   35EE 3579 3504 3490 
6423   341C 33A9 3336 32C4                  DECLE   $341C, $33A9, $3336, $32C4, $3252, $31E1, $3170, $3100
6427   3252 31E1 3170 3100 
642B   3090 3021 2FB2 2F44                  DECLE   $3090, $3021, $2FB2, $2F44, $2ED6, $2E69, $2DFC, $2D90
642F   2ED6 2E69 2DFC 2D90 
6433   2D24 2CB9 2C4E 2BE4                  DECLE   $2D24, $2CB9, $2C4E, $2BE4, $2B7A, $2B11, $2AA8, $2A40
6437   2B7A 2B11 2AA8 2A40 
643B   29D8 2971 290A 28A4                  DECLE   $29D8, $2971, $290A, $28A4, $283E, $27D9, $2774, $2710
643F   283E 27D9 2774 2710 
6443   26AC 2649 25E6 2584                  DECLE   $26AC, $2649, $25E6, $2584, $2522, $24C1, $2460, $2400
6447   2522 24C1 2460 2400 
644B   23A0 2341 22E2 2284                  DECLE   $23A0, $2341, $22E2, $2284, $2226, $21C9, $216C, $2110
644F   2226 21C9 216C 2110 
6453   20B4 2059 1FFE 1FA4                  DECLE   $20B4, $2059, $1FFE, $1FA4, $1F4A, $1EF1, $1E98, $1E40
6457   1F4A 1EF1 1E98 1E40 
645B   1DE8 1D91 1D3A 1CE4                  DECLE   $1DE8, $1D91, $1D3A, $1CE4, $1C8E, $1C39, $1BE4, $1B90
645F   1C8E 1C39 1BE4 1B90 
6463   1B3C 1AE9 1A96 1A44                  DECLE   $1B3C, $1AE9, $1A96, $1A44, $19F2, $19A1, $1950, $1900
6467   19F2 19A1 1950 1900 
646B   18B0 1861 1812 17C4                  DECLE   $18B0, $1861, $1812, $17C4, $1776, $1729, $16DC, $1690
646F   1776 1729 16DC 1690 
6473   1644 15F9 15AE 1564                  DECLE   $1644, $15F9, $15AE, $1564, $151A, $14D1, $1488, $1440
6477   151A 14D1 1488 1440 
647B   13F8 13B1 136A 1324                  DECLE   $13F8, $13B1, $136A, $1324, $12DE, $1299, $1254, $1210
647F   12DE 1299 1254 1210 
6483   11CC 1189 1146 1104                  DECLE   $11CC, $1189, $1146, $1104, $10C2, $1081, $1040, $1000
6487   10C2 1081 1040 1000 
648B   0FC0 0F81 0F42 0F04                  DECLE   $0FC0, $0F81, $0F42, $0F04, $0EC6, $0E89, $0E4C, $0E10
648F   0EC6 0E89 0E4C 0E10 
6493   0DD4 0D99 0D5E 0D24                  DECLE   $0DD4, $0D99, $0D5E, $0D24, $0CEA, $0CB1, $0C78, $0C40
6497   0CEA 0CB1 0C78 0C40 
649B   0C08 0BD1 0B9A 0B64                  DECLE   $0C08, $0BD1, $0B9A, $0B64, $0B2E, $0AF9, $0AC4, $0A90
649F   0B2E 0AF9 0AC4 0A90 
64A3   0A5C 0A29 09F6 09C4                  DECLE   $0A5C, $0A29, $09F6, $09C4, $0992, $0961, $0930, $0900
64A7   0992 0961 0930 0900 
64AB   08D0 08A1 0872 0844                  DECLE   $08D0, $08A1, $0872, $0844, $0816, $07E9, $07BC, $0790
64AF   0816 07E9 07BC 0790 
64B3   0764 0739 070E 06E4                  DECLE   $0764, $0739, $070E, $06E4, $06BA, $0691, $0668, $0640
64B7   06BA 0691 0668 0640 
64BB   0618 05F1 05CA 05A4                  DECLE   $0618, $05F1, $05CA, $05A4, $057E, $0559, $0534, $0510
64BF   057E 0559 0534 0510 
64C3   04EC 04C9 04A6 0484                  DECLE   $04EC, $04C9, $04A6, $0484, $0462, $0441, $0420, $0400
64C7   0462 0441 0420 0400 
64CB   03E0 03C1 03A2 0384                  DECLE   $03E0, $03C1, $03A2, $0384, $0366, $0349, $032C, $0310
64CF   0366 0349 032C 0310 
64D3   02F4 02D9 02BE 02A4                  DECLE   $02F4, $02D9, $02BE, $02A4, $028A, $0271, $0258, $0240
64D7   028A 0271 0258 0240 
64DB   0228 0211 01FA 01E4                  DECLE   $0228, $0211, $01FA, $01E4, $01CE, $01B9, $01A4, $0190
64DF   01CE 01B9 01A4 0190 
64E3   017C 0169 0156 0144                  DECLE   $017C, $0169, $0156, $0144, $0132, $0121, $0110, $0100
64E7   0132 0121 0110 0100 
64EB   00F0 00E1 00D2 00C4                  DECLE   $00F0, $00E1, $00D2, $00C4, $00B6, $00A9, $009C, $0090
64EF   00B6 00A9 009C 0090 
64F3   0084 0079 006E 0064                  DECLE   $0084, $0079, $006E, $0064, $005A, $0051, $0048, $0040
64F7   005A 0051 0048 0040 
64FB   0038 0031 002A 0024                  DECLE   $0038, $0031, $002A, $0024, $001E, $0019, $0014, $0010
64FF   001E 0019 0014 0010 
6503   000C 0009 0006 0004                  DECLE   $000C, $0009, $0006, $0004, $0002, $0001, $0000
6507   0002 0001 0000 
0x650A                          @@mid:
650A   0000 0000 0001 0002                  DECLE   $0000, $0000, $0001, $0002, $0004, $0006, $0009, $000C
650E   0004 0006 0009 000C 
6512   0010 0014 0019 001E                  DECLE   $0010, $0014, $0019, $001E, $0024, $002A, $0031, $0038
6516   0024 002A 0031 0038 
651A   0040 0048 0051 005A                  DECLE   $0040, $0048, $0051, $005A, $0064, $006E, $0079, $0084
651E   0064 006E 0079 0084 
6522   0090 009C 00A9 00B6                  DECLE   $0090, $009C, $00A9, $00B6, $00C4, $00D2, $00E1, $00F0
6526   00C4 00D2 00E1 00F0 
652A   0100 0110 0121 0132                  DECLE   $0100, $0110, $0121, $0132, $0144, $0156, $0169, $017C
652E   0144 0156 0169 017C 
6532   0190 01A4 01B9 01CE                  DECLE   $0190, $01A4, $01B9, $01CE, $01E4, $01FA, $0211, $0228
6536   01E4 01FA 0211 0228 
653A   0240 0258 0271 028A                  DECLE   $0240, $0258, $0271, $028A, $02A4, $02BE, $02D9, $02F4
653E   02A4 02BE 02D9 02F4 
6542   0310 032C 0349 0366                  DECLE   $0310, $032C, $0349, $0366, $0384, $03A2, $03C1, $03E0
6546   0384 03A2 03C1 03E0 
654A   0400 0420 0441 0462                  DECLE   $0400, $0420, $0441, $0462, $0484, $04A6, $04C9, $04EC
654E   0484 04A6 04C9 04EC 
6552   0510 0534 0559 057E                  DECLE   $0510, $0534, $0559, $057E, $05A4, $05CA, $05F1, $0618
6556   05A4 05CA 05F1 0618 
655A   0640 0668 0691 06BA                  DECLE   $0640, $0668, $0691, $06BA, $06E4, $070E, $0739, $0764
655E   06E4 070E 0739 0764 
6562   0790 07BC 07E9 0816                  DECLE   $0790, $07BC, $07E9, $0816, $0844, $0872, $08A1, $08D0
6566   0844 0872 08A1 08D0 
656A   0900 0930 0961 0992                  DECLE   $0900, $0930, $0961, $0992, $09C4, $09F6, $0A29, $0A5C
656E   09C4 09F6 0A29 0A5C 
6572   0A90 0AC4 0AF9 0B2E                  DECLE   $0A90, $0AC4, $0AF9, $0B2E, $0B64, $0B9A, $0BD1, $0C08
6576   0B64 0B9A 0BD1 0C08 
657A   0C40 0C78 0CB1 0CEA                  DECLE   $0C40, $0C78, $0CB1, $0CEA, $0D24, $0D5E, $0D99, $0DD4
657E   0D24 0D5E 0D99 0DD4 
6582   0E10 0E4C 0E89 0EC6                  DECLE   $0E10, $0E4C, $0E89, $0EC6, $0F04, $0F42, $0F81, $0FC0
6586   0F04 0F42 0F81 0FC0 
658A   1000 1040 1081 10C2                  DECLE   $1000, $1040, $1081, $10C2, $1104, $1146, $1189, $11CC
658E   1104 1146 1189 11CC 
6592   1210 1254 1299 12DE                  DECLE   $1210, $1254, $1299, $12DE, $1324, $136A, $13B1, $13F8
6596   1324 136A 13B1 13F8 
659A   1440 1488 14D1 151A                  DECLE   $1440, $1488, $14D1, $151A, $1564, $15AE, $15F9, $1644
659E   1564 15AE 15F9 1644 
65A2   1690 16DC 1729 1776                  DECLE   $1690, $16DC, $1729, $1776, $17C4, $1812, $1861, $18B0
65A6   17C4 1812 1861 18B0 
65AA   1900 1950 19A1 19F2                  DECLE   $1900, $1950, $19A1, $19F2, $1A44, $1A96, $1AE9, $1B3C
65AE   1A44 1A96 1AE9 1B3C 
65B2   1B90 1BE4 1C39 1C8E                  DECLE   $1B90, $1BE4, $1C39, $1C8E, $1CE4, $1D3A, $1D91, $1DE8
65B6   1CE4 1D3A 1D91 1DE8 
65BA   1E40 1E98 1EF1 1F4A                  DECLE   $1E40, $1E98, $1EF1, $1F4A, $1FA4, $1FFE, $2059, $20B4
65BE   1FA4 1FFE 2059 20B4 
65C2   2110 216C 21C9 2226                  DECLE   $2110, $216C, $21C9, $2226, $2284, $22E2, $2341, $23A0
65C6   2284 22E2 2341 23A0 
65CA   2400 2460 24C1 2522                  DECLE   $2400, $2460, $24C1, $2522, $2584, $25E6, $2649, $26AC
65CE   2584 25E6 2649 26AC 
65D2   2710 2774 27D9 283E                  DECLE   $2710, $2774, $27D9, $283E, $28A4, $290A, $2971, $29D8
65D6   28A4 290A 2971 29D8 
65DA   2A40 2AA8 2B11 2B7A                  DECLE   $2A40, $2AA8, $2B11, $2B7A, $2BE4, $2C4E, $2CB9, $2D24
65DE   2BE4 2C4E 2CB9 2D24 
65E2   2D90 2DFC 2E69 2ED6                  DECLE   $2D90, $2DFC, $2E69, $2ED6, $2F44, $2FB2, $3021, $3090
65E6   2F44 2FB2 3021 3090 
65EA   3100 3170 31E1 3252                  DECLE   $3100, $3170, $31E1, $3252, $32C4, $3336, $33A9, $341C
65EE   32C4 3336 33A9 341C 
65F2   3490 3504 3579 35EE                  DECLE   $3490, $3504, $3579, $35EE, $3664, $36DA, $3751, $37C8
65F6   3664 36DA 3751 37C8 
65FA   3840 38B8 3931 39AA                  DECLE   $3840, $38B8, $3931, $39AA, $3A24, $3A9E, $3B19, $3B94
65FE   3A24 3A9E 3B19 3B94 
6602   3C10 3C8C 3D09 3D86                  DECLE   $3C10, $3C8C, $3D09, $3D86, $3E04, $3E82, $3F01, $3F80
6606   3E04 3E82 3F01 3F80 
660A   4000 4080 4101 4182                  DECLE   $4000, $4080, $4101, $4182, $4204, $4286, $4309, $438C
660E   4204 4286 4309 438C 
6612   4410 4494 4519 459E                  DECLE   $4410, $4494, $4519, $459E, $4624, $46AA, $4731, $47B8
6616   4624 46AA 4731 47B8 
661A   4840 48C8 4951 49DA                  DECLE   $4840, $48C8, $4951, $49DA, $4A64, $4AEE, $4B79, $4C04
661E   4A64 4AEE 4B79 4C04 
6622   4C90 4D1C 4DA9 4E36                  DECLE   $4C90, $4D1C, $4DA9, $4E36, $4EC4, $4F52, $4FE1, $5070
6626   4EC4 4F52 4FE1 5070 
662A   5100 5190 5221 52B2                  DECLE   $5100, $5190, $5221, $52B2, $5344, $53D6, $5469, $54FC
662E   5344 53D6 5469 54FC 
6632   5590 5624 56B9 574E                  DECLE   $5590, $5624, $56B9, $574E, $57E4, $587A, $5911, $59A8
6636   57E4 587A 5911 59A8 
663A   5A40 5AD8 5B71 5C0A                  DECLE   $5A40, $5AD8, $5B71, $5C0A, $5CA4, $5D3E, $5DD9, $5E74
663E   5CA4 5D3E 5DD9 5E74 
6642   5F10 5FAC 6049 60E6                  DECLE   $5F10, $5FAC, $6049, $60E6, $6184, $6222, $62C1, $6360
6646   6184 6222 62C1 6360 
664A   6400 64A0 6541 65E2                  DECLE   $6400, $64A0, $6541, $65E2, $6684, $6726, $67C9, $686C
664E   6684 6726 67C9 686C 
6652   6910 69B4 6A59 6AFE                  DECLE   $6910, $69B4, $6A59, $6AFE, $6BA4, $6C4A, $6CF1, $6D98
6656   6BA4 6C4A 6CF1 6D98 
665A   6E40 6EE8 6F91 703A                  DECLE   $6E40, $6EE8, $6F91, $703A, $70E4, $718E, $7239, $72E4
665E   70E4 718E 7239 72E4 
6662   7390 743C 74E9 7596                  DECLE   $7390, $743C, $74E9, $7596, $7644, $76F2, $77A1, $7850
6666   7644 76F2 77A1 7850 
666A   7900 79B0 7A61 7B12                  DECLE   $7900, $79B0, $7A61, $7B12, $7BC4, $7C76, $7D29, $7DDC
666E   7BC4 7C76 7D29 7DDC 
6672   7E90 7F44 7FF9 80AE                  DECLE   $7E90, $7F44, $7FF9, $80AE, $8164, $821A, $82D1, $8388
6676   8164 821A 82D1 8388 
667A   8440 84F8 85B1 866A                  DECLE   $8440, $84F8, $85B1, $866A, $8724, $87DE, $8899, $8954
667E   8724 87DE 8899 8954 
6682   8A10 8ACC 8B89 8C46                  DECLE   $8A10, $8ACC, $8B89, $8C46, $8D04, $8DC2, $8E81, $8F40
6686   8D04 8DC2 8E81 8F40 
668A   9000 90C0 9181 9242                  DECLE   $9000, $90C0, $9181, $9242, $9304, $93C6, $9489, $954C
668E   9304 93C6 9489 954C 
6692   9610 96D4 9799 985E                  DECLE   $9610, $96D4, $9799, $985E, $9924, $99EA, $9AB1, $9B78
6696   9924 99EA 9AB1 9B78 
669A   9C40 9D08 9DD1 9E9A                  DECLE   $9C40, $9D08, $9DD1, $9E9A, $9F64, $A02E, $A0F9, $A1C4
669E   9F64 A02E A0F9 A1C4 
66A2   A290 A35C A429 A4F6                  DECLE   $A290, $A35C, $A429, $A4F6, $A5C4, $A692, $A761, $A830
66A6   A5C4 A692 A761 A830 
66AA   A900 A9D0 AAA1 AB72                  DECLE   $A900, $A9D0, $AAA1, $AB72, $AC44, $AD16, $ADE9, $AEBC
66AE   AC44 AD16 ADE9 AEBC 
66B2   AF90 B064 B139 B20E                  DECLE   $AF90, $B064, $B139, $B20E, $B2E4, $B3BA, $B491, $B568
66B6   B2E4 B3BA B491 B568 
66BA   B640 B718 B7F1 B8CA                  DECLE   $B640, $B718, $B7F1, $B8CA, $B9A4, $BA7E, $BB59, $BC34
66BE   B9A4 BA7E BB59 BC34 
66C2   BD10 BDEC BEC9 BFA6                  DECLE   $BD10, $BDEC, $BEC9, $BFA6, $C084, $C162, $C241, $C320
66C6   C084 C162 C241 C320 
66CA   C400 C4E0 C5C1 C6A2                  DECLE   $C400, $C4E0, $C5C1, $C6A2, $C784, $C866, $C949, $CA2C
66CE   C784 C866 C949 CA2C 
66D2   CB10 CBF4 CCD9 CDBE                  DECLE   $CB10, $CBF4, $CCD9, $CDBE, $CEA4, $CF8A, $D071, $D158
66D6   CEA4 CF8A D071 D158 
66DA   D240 D328 D411 D4FA                  DECLE   $D240, $D328, $D411, $D4FA, $D5E4, $D6CE, $D7B9, $D8A4
66DE   D5E4 D6CE D7B9 D8A4 
66E2   D990 DA7C DB69 DC56                  DECLE   $D990, $DA7C, $DB69, $DC56, $DD44, $DE32, $DF21, $E010
66E6   DD44 DE32 DF21 E010 
66EA   E100 E1F0 E2E1 E3D2                  DECLE   $E100, $E1F0, $E2E1, $E3D2, $E4C4, $E5B6, $E6A9, $E79C
66EE   E4C4 E5B6 E6A9 E79C 
66F2   E890 E984 EA79 EB6E                  DECLE   $E890, $E984, $EA79, $EB6E, $EC64, $ED5A, $EE51, $EF48
66F6   EC64 ED5A EE51 EF48 
66FA   F040 F138 F231 F32A                  DECLE   $F040, $F138, $F231, $F32A, $F424, $F51E, $F619, $F714
66FE   F424 F51E F619 F714 
6702   F810 F90C FA09 FB06                  DECLE   $F810, $F90C, $FA09, $FB06, $FC04, $FD02, $FE01
6706   FC04 FD02 FE01 
                                            ENDP

                                ; R0 = R0 * R1, where R0 and R1 are unsigned 8-bit values
                                ; Destroys R1, R4
0x6709                          qs_mpy8:    PROC
6709   0084                                 MOVR    R0,             R4      ;   6
670A   02F9 650A                            ADDI    #QSQR8_TBL.mid, R1      ;   8
670C   00CC                                 ADDR    R1,             R4      ;   6   a + b
670D   0101                                 SUBR    R0,             R1      ;   6   a - b
670E   02A0                     @@ok:       MVI@    R4,             R0      ;   8
670F   0308                                 SUB@    R1,             R0      ;   8
6710   00AF                                 JR      R5                      ;   7
                                                                            ;----
                                                                            ;  49
                                            ENDP
                                            

                                ; R1 = R0 * R1, where R0 and R1 are 16-bit values
                                ; destroys R0, R2, R3, R4, R5
0x6711                          qs_mpy16:   PROC
6711   0275                                 PSHR    R5                  ;   9
                                                                   
                                            ; Unpack lo/hi
6712   0082                                 MOVR    R0,         R2      ;   6   
6713   03B8 00FF                            ANDI    #$FF,       R0      ;   8   R0 is lo(a)
6715   01C2                                 XORR    R0,         R2      ;   6   
6716   0042                                 SWAP    R2                  ;   6   R2 is hi(a)

6717   008B                                 MOVR    R1,         R3      ;   6   R3 is orig 16-bit b
6718   03B9 00FF                            ANDI    #$FF,       R1      ;   8   R1 is lo(b)
671A   008D                                 MOVR    R1,         R5      ;   6   R5 is lo(b)
671B   01CB                                 XORR    R1,         R3      ;   6   
671C   0043                                 SWAP    R3                  ;   6   R3 is hi(b)
                                                                        ;----
                                                                        ;  67
                                                                        
                                            ; lo * lo                   
671D   0084                                 MOVR    R0,         R4      ;   6   R4 is lo(a)
671E   02F9 650A                            ADDI    #QSQR8_TBL.mid, R1  ;   8
6720   00CC                                 ADDR    R1,         R4      ;   6   R4 = lo(a) + lo(b)
6721   0101                                 SUBR    R0,         R1      ;   6   R1 = lo(a) - lo(b)
                                                                        
6722   02A4                     @@pos_ll:   MVI@    R4,         R4      ;   8   R4 = qstbl[lo(a)+lo(b)]
6723   030C                                 SUB@    R1,         R4      ;   8   R4 = lo(a)*lo(b)
                                                                        ;----
                                                                        ;  42
                                                                        ;  67 (carried forward)
                                                                        ;----
                                                                        ; 109
                                                                       
                                            ; lo * hi                  
6724   0081                                 MOVR    R0,         R1      ;   6   R0 = R1 = lo(a)
6725   02FB 650A                            ADDI    #QSQR8_TBL.mid, R3  ;   8
6727   00D9                                 ADDR    R3,         R1      ;   6   R1 = hi(b) + lo(a)
6728   0103                                 SUBR    R0,         R3      ;   6   R3 = hi(b) - lo(a)
                                                                       
6729   0289                     @@pos_lh:   MVI@    R1,         R1      ;   8   R1 = qstbl[hi(b)-lo(a)]
672A   0319                                 SUB@    R3,         R1      ;   8   R1 = lo(a)*hi(b)
                                                                        ;----
                                                                        ;  42
                                                                        ; 109 (carried forward)
                                                                        ;----
                                                                        ; 151
                                                                       
                                            ; hi * lo                  
672B   00A8                                 MOVR    R5,         R0      ;   6   R5 = R0 = lo(b)
672C   02FA 650A                            ADDI    #QSQR8_TBL.mid, R2  ;   8
672E   00D5                                 ADDR    R2,         R5      ;   6   R3 = hi(a) + lo(b)
672F   0102                                 SUBR    R0,         R2      ;   6   R2 = hi(a) - lo(b)
                                                                       
6730   02E9                     @@pos_hl:   ADD@    R5,         R1      ;   8   \_ R1 = lo(a)*hi(b)+hi(a)*lo(b)
6731   0311                                 SUB@    R2,         R1      ;   8   /
                                                                        ;----
                                                                        ;  42
                                                                        ; 151 (carried forward)
                                                                        ;----
                                                                        ; 193
                                                                       
6732   0041                                 SWAP    R1                  ;   6   \_ shift upper product left 8
6733   03B9 FF00                            ANDI    #$FF00,     R1      ;   8   /
6735   00E1                                 ADDR    R4,         R1      ;   6   final product
6736   02B7                                 PULR    PC                  ;  12
                                                                        ;----
                                                                        ;  32
                                                                        ; 193 (carried forward)
                                                                        ;----
                                                                        ; 225
                                            ENDP

                                	ENDI

                                	IF DEFINED intybasic_fastdiv

                                ; Fast unsigned division/remainder
                                ; Assembly code by Oscar Toledo G. Jul/10/2015
                                ; Released to public domain.

                                	; Ultrafast unsigned division/remainder operation
                                	; Entry: R0 = Dividend
                                	;        R1 = Divisor
                                	; Output: R0 = Quotient
                                	;         R2 = Remainder
                                	; Worst case: 6 + 6 + 9 + 496 = 517 cycles
                                	; Best case: 6 + (6 + 7) * 16 = 214 cycles

                                uf_udiv16:	PROC
                                	CLRR R2		; 6
                                	SLLC R0,1	; 6
                                	BC @@1		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@2		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@3		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@4		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@5		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@6		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@7		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@8		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@9		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@10		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@11		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@12		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@13		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@14		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@15		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@16		; 7/9
                                	JR R5

                                @@1:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@2:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@3:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@4:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@5:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@6:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@7:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@8:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@9:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@10:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@11:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@12:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@13:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@14:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@15:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@16:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                	JR R5
                                	
                                	ENDP

                                	ENDI

                                	IF DEFINED intybasic_ecs
                                	ORG $4800	; Available up to $4FFF

                                        ; Disable ECS ROMs so that they don't conflict with us
                                        MVII    #$2A5F, R0
                                        MVO     R0,     $2FFF
                                        MVII    #$7A5F, R0
                                        MVO     R0,     $7FFF
                                        MVII    #$EA5F, R0
                                        MVO     R0,     $EFFF

                                        B       $1041       ; resume boot

                                	ENDI

0x200                                   ORG $200,$200,"-RWB"

0x200                           Q2:	; Reserved label for #BACKTAB

0x319                           	ORG $319,$319,"-RWB"
                                        ;
                                        ; 16-bits variables
                                	; Note IntyBASIC variables grow up starting in $308.
                                        ;
                                        IF DEFINED intybasic_voice
                                IV.Q:      RMB 8    ; IV_xxx        16-bit          Voice queue  (8 words)
                                IV.FPTR:   RMB 1    ; IV_xxx        16-bit          Current FIFO ptr.
                                IV.PPTR:   RMB 1    ; IV_xxx        16-bit          Current Phrase ptr.
                                        ENDI

0x323                                   ORG $323,$323,"-RWB"

0x323                           _scroll_buffer: RMB 20  ; Sometimes this is unused
0x337                           _music_table:	RMB 1	; Note table
0x338                           _music_start:	RMB 1	; Start of music
0x339                           _music_p:	RMB 1	; Pointer to music
0x33A                           _frame:         RMB 1   ; Current frame
0x33B                           _read:          RMB 1   ; Pointer to DATA
0x33C                           _gram_bitmap:   RMB 1   ; Bitmap for definition
0x33D                           _gram2_bitmap:  RMB 1   ; Secondary bitmap for definition
0x33E                           _screen:    RMB 1       ; Pointer to current screen position
0x33F                           _color:     RMB 1       ; Current color

0x340                           Q1:			; Reserved label for #MOBSHADOW
0x340                           _mobs:      RMB 3*8     ; MOB buffer

0x358                           _col0:      RMB 1       ; Collision status for MOB0
0x359                           _col1:      RMB 1       ; Collision status for MOB1
0x35A                           _col2:      RMB 1       ; Collision status for MOB2
0x35B                           _col3:      RMB 1       ; Collision status for MOB3
0x35C                           _col4:      RMB 1       ; Collision status for MOB4
0x35D                           _col5:      RMB 1       ; Collision status for MOB5
0x35E                           _col6:      RMB 1       ; Collision status for MOB6
0x35F                           _col7:      RMB 1       ; Collision status for MOB7

0x100                           SCRATCH:    ORG $100,$100,"-RWBN"
                                        ;
                                        ; 8-bits variables
                                        ;
0x100                           ISRVEC:     RMB 2       ; Pointer to ISR vector (required by Intellivision ROM)
0x102                           _int:       RMB 1       ; Signals interrupt received
0x103                           _ntsc:      RMB 1       ; Signals NTSC Intellivision
0x104                           _rand:      RMB 1       ; Pseudo-random value
0x105                           _gram_target:   RMB 1   ; Contains GRAM card number
0x106                           _gram_total:    RMB 1   ; Contains total GRAM cards for definition
0x107                           _gram2_target:  RMB 1   ; Contains GRAM card number
0x108                           _gram2_total:   RMB 1   ; Contains total GRAM cards for definition
0x109                           _mode_select:   RMB 1   ; Graphics mode selection
0x10A                           _border_color:  RMB 1   ; Border color
0x10B                           _border_mask:   RMB 1   ; Border mask
                                    IF DEFINED intybasic_keypad
                                _cnt1_p0:   RMB 1       ; Debouncing 1
                                _cnt1_p1:   RMB 1       ; Debouncing 2
                                _cnt1_key:  RMB 1       ; Currently pressed key
                                _cnt2_p0:   RMB 1       ; Debouncing 1
                                _cnt2_p1:   RMB 1       ; Debouncing 2
                                _cnt2_key:  RMB 1       ; Currently pressed key
                                    ENDI
                                    IF DEFINED intybasic_scroll
                                _scroll_x:  RMB 1       ; Scroll X offset
                                _scroll_y:  RMB 1       ; Scroll Y offset
                                _scroll_d:  RMB 1       ; Scroll direction
                                    ENDI
                                    IF DEFINED intybasic_music
                                _music_mode: RMB 1      ; Music mode (0= Not using PSG, 2= Simple, 4= Full, add 1 if using noise channel for drums)
                                _music_frame: RMB 1     ; Music frame (for 50 hz fixed)
                                _music_tc:  RMB 1       ; Time counter
                                _music_t:   RMB 1       ; Time base
                                _music_i1:  RMB 1       ; Instrument 1 
                                _music_s1:  RMB 1       ; Sample pointer 1
                                _music_n1:  RMB 1       ; Note 1
                                _music_i2:  RMB 1       ; Instrument 2
                                _music_s2:  RMB 1       ; Sample pointer 2
                                _music_n2:  RMB 1       ; Note 2
                                _music_i3:  RMB 1       ; Instrument 3
                                _music_s3:  RMB 1       ; Sample pointer 3
                                _music_n3:  RMB 1       ; Note 3
                                _music_s4:  RMB 1       ; Sample pointer 4
                                _music_n4:  RMB 1       ; Note 4 (really it's drum)

                                _music_freq10:	RMB 1   ; Low byte frequency A
                                _music_freq20:	RMB 1   ; Low byte frequency B
                                _music_freq30:	RMB 1   ; Low byte frequency C
                                _music_freq11:	RMB 1   ; High byte frequency A
                                _music_freq21:	RMB 1   ; High byte frequency B
                                _music_freq31:	RMB 1   ; High byte frequency C
                                _music_mix:	RMB 1   ; Mixer
                                _music_noise:	RMB 1   ; Noise
                                _music_vol1:	RMB 1   ; Volume A
                                _music_vol2:	RMB 1   ; Volume B
                                _music_vol3:	RMB 1   ; Volume C
                                    ENDI
                                    IF DEFINED intybasic_music_volume
                                _music_vol:	RMB 1	; Global music volume
                                    ENDI
                                    IF DEFINED intybasic_voice
                                IV.QH:     RMB 1    ; IV_xxx        8-bit           Voice queue head
                                IV.QT:     RMB 1    ; IV_xxx        8-bit           Voice queue tail
                                IV.FLEN:   RMB 1    ; IV_xxx        8-bit           Length of FIFO data
                                    ENDI


0x10C                           V1:	RMB 1	; A
0x10D                           V8:	RMB 1	; BONUS_EXP
0x10E                           V9:	RMB 1	; BONUS_LIVES
0x10F                           V10:	RMB 1	; CHANCE
0x110                           V11:	RMB 1	; DIFICULTY
0x111                           V16:	RMB 1	; HEARTRATE
0x112                           V7:	RMB 1	; INVISIBLE
0x113                           V14:	RMB 1	; JUMP
0x114                           V18:	RMB 1	; LEVEL
0x115                           V17:	RMB 1	; LIVES
0x116                           V4:	RMB 1	; PLAYERDX
0x117                           V6:	RMB 1	; PLAYERF
0x118                           V2:	RMB 1	; PLAYERX
0x119                           V5:	RMB 1	; PLAYERY
0x11A                           V21:	RMB 1	; POWER
0x11B                           V13:	RMB 1	; SCENE
0x11C                           V20:	RMB 1	; STREET_LINEY
0x11D                           V19:	RMB 1	; UNIVCLOCK
0x11E                           Q5:	RMB 3	; OBJECT
0x121                           Q3:	RMB 3	; OBJECTX
0x124                           Q4:	RMB 3	; OBJECTY
0x127                           Q7:	RMB 4	; PERCENTAGE
0x12B                           _SCRATCH:	EQU $

0x2F0                           SYSTEM:	ORG $2F0, $2F0, "-RWBN"
0x2F0                           STACK:	RMB 24
0x308                           V12:	RMB 1	; #MAXIMUNSCORE
0x309                           V3:	RMB 1	; #PLAYERCOLOR
0x30A                           V15:	RMB 1	; #SCORE
0x30B                           Q6:	RMB 4	; #OBJECTCOLOR
0x30F                           _SYSTEM:	EQU $
 ERROR SUMMARY - ERRORS DETECTED 0
               -  WARNINGS       0
