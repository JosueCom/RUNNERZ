???????? SRCFILE                    ???????? x                          
???????? y                          0000500D _ZERO                      
00005029 _MAIN                      0000500F _ONES                      
00005020 _TITLE                     00000007 C_WHT                      
00005014 CLRSCR                     0000033E _screen                    
0000501A FILLZERO                   0000501B MEMSET                     
000002F0 STACK                      0000502C _MAIN0                     
0000503F _MAIN4                     00000104 _rand                      
0000632E _pal1_vector               00000100 ISRVEC                     
0000505A _MAIN1                     00000103 _ntsc                      
00005061 _MAIN2                     0000506F _MAIN3                     
0000631A _wait                      0000642A _init_music                
00000109 _mode_select               0000030C Q6                         
00000121 Q3                         0000010C V1                         
000050AE T1                         000063FD _next_random               
00006729 qs_mpy8                    00000124 Q4                         
0000011E Q5                         00000119 V2                         
00000309 V3                         00000117 V4                         
0000011A V5                         00000118 V6                         
00000113 V7                         0000010D V8                         
0000010E V9                         0000010F V10                        
00000110 V11                        00000308 V12                        
00000127 Q7                         00000112 V13                        
0000011C V14                        00000114 V15                        
0000030A V16                        00000111 V17                        
00000116 V18                        00000115 V19                        
0000030B V20                        0000011D V21                        
0000033F _color                     00000105 _gram_target               
00000106 _gram_total                0000613A Q8                         
0000033C _gram_bitmap               0000617A Q9                         
000061BA Q10                        000061FA Q11                        
00006102 Q12                        00006116 Q13                        
0000611E Q14                        0000612E Q15                        
00006132 Q16                        00006136 Q17                        
0000612A Q18                        000051D3 Q19                        
000051DB T2                         000051FD Q20                        
000051E4 T3                         0000539E Q21                        
000051ED T4                         000053EC Q22                        
000051F6 T5                         000055DF Q23                        
00005313 T7                         00005356 T6                         
00005356 T8                         00005350 T10                        
00005349 T9                         00000340 _mobs                      
0000537E T11                        0000538B T12                        
0000539D T13                        000057B6 Q25                        
000061FE Q27                        00006308 CPYBLK                     
00005E31 Q28                        00005F73 Q29                        
00005A5E Q30                        00005B0D Q31                        
000053C6 T14                        00005FD5 Q32                        
00006016 Q33                        000053D4 T15                        
000053E8 T16                        000054FF T18                        
00005542 T17                        00005542 T19                        
0000553C T21                        00005535 T20                        
0000556A T22                        00005577 T23                        
0000558F T24                        0000559C T25                        
000055D2 T26                        000055DE T27                        
000060D6 Q35                        000056D4 T29                        
00005717 T28                        00005717 T30                        
00005711 T32                        0000570A T31                        
0000573F T33                        0000574C T34                        
00005764 T35                        00005771 T36                        
000057AA T37                        000057B5 T38                        
000057C0 T39                        000057C2 T41                        
00005805 T40                        00005805 T42                        
000057FF T44                        000057F8 T43                        
0000581F T45                        00005838 T46                        
0000585D Q38                        00005872 T47                        
00005874 T49                        000058B7 T48                        
000058B7 T50                        000058B1 T52                        
000058AA T51                        0000011B V22                        
000058EF T53                        00005917 T54                        
0000593F T55                        0000595C Q39                        
00005966 T56                        00005972 T57                        
00005978 T58                        00005993 T59                        
00005999 T60                        000059B2 T61                        
000059C2 Q40                        000059DA T62                        
000059D6 T63                        000059E9 T64                        
00005A44 T65                        000059F9 T66                        
00005A0C T67                        00005A22 T68                        
00005A41 T69                        00005A37 T70                        
00005A5D T71                        00005A62 T72                        
00005A6E T74                        00005A6A T75                        
00005A88 T73                        00005A88 T76                        
00005AA4 T77                        00005AD9 T78                        
00000340 Q1                         00005B03 T79                        
00005B15 T81                        00005B28 T80                        
00005B2F T83                        00005B42 T82                        
00005B49 T85                        00005B65 T84                        
00005B73 T87                        00005B85 T86                        
00005B87 T88                        00005B9B T90                        
00005B97 T91                        00005BBE T89                        
00005BCA T93                        00005BC6 T94                        
00005BE9 T92                        00005BF5 T96                        
00005BF1 T97                        00005C0F T95                        
00006094 Q43                        00005C1B T99                        
00005C17 T100                       00005C35 T98                        
0000602A Q44                        00005C41 T102                       
00005C3D T103                       00005C93 T101                       
00005C93 T104                       00005C8D T106                       
00005C86 T105                       00005C9F T107                       
00005CBA T108                       00005CAB T109                       
00005CB6 T110                       00005CDB T111                       
00005CE7 T113                       00005CE3 T114                       
00005D9C T112                       00005D34 T115                       
0000605F Q45                        00005D43 T116                       
00005D5F T117                       00005DA6 Q46                        
00005D73 T118                       00005D85 T119                       
00005D9C T120                       00005DA9 T122                       
00005DB8 T121                       00005DCD T123                       
00005DDB T124                       00005DE7 T125                       
00005DED T126                       00005E06 T127                       
00005E16 Q48                        00005E21 T128                       
00005E54 T129                       00005F72 T130                       
00005E76 T131                       00005E98 T132                       
00005EBA T133                       00005EDE T134                       
00005F02 T135                       00005F24 T136                       
00005F45 T137                       00005F6B T138                       
00005F85 T139                       00005F7D T140                       
00000001 intybasic_fastmult         000062EE stuck                      
000062F0 CPYBLK2                    000062F8 CPYBLK2.1                  
000062FA CPYBLK2.2                  0000630B CPYBLK.1                   
0000630C CPYBLK.2                   ???????? intybasic_keypad           
???????? _cnt1_p0                   ???????? _wait.2                    
???????? _cnt1_p1                   00006322 _keypad_table              
???????? _wait.4                    ???????? _cnt1_key                  
???????? _cnt2_p0                   ???????? _wait.5                    
???????? _cnt2_p1                   ???????? _wait.7                    
???????? _cnt2_key                  00000102 _int                       
0000631D _wait.1                    0000633A _pal2_vector               
0000634E _int_vector                00006349 _pal2_vector.1             
???????? intybasic_stack            ???????? _int_vector.vs             
???????? _int_vector.vs1            ???????? _int_vector.vs2            
00006378 _int_vector.vi0            00006362 _int_vector.vi14           
00006372 _int_vector.vi15           0000010A _border_color              
0000010B _border_mask               00000358 _col0                      
???????? intybasic_scroll           ???????? _scroll_x                  
???????? _scroll_y                  000063A5 _int_vector.vi2            
???????? intybasic_music            ???????? _int_vector.vo97           
???????? _music_frame               ???????? _int_vector.vo14           
???????? _int_vector.vo15           ???????? _emit_sound                
000063D1 _int_vector.vi1            000063BC _int_vector.vi3            
0000033D _gram2_bitmap              000063F4 _int_vector.vii1           
00000107 _gram2_target              00000108 _gram2_total               
000063DF _int_vector.vii3           ???????? _scroll_d                  
???????? _int_vector.vi4            ???????? _int_vector.vi5            
???????? _int_vector.vi6            ???????? _int_vector.vi7            
???????? _int_vector.vi8            ???????? _int_vector.vi12           
???????? _int_vector.vi11           00000323 _scroll_buffer             
???????? _int_vector.vi10           ???????? _int_vector.vi13           
???????? _int_vector.vi9            ???????? intybasic_voice            
???????? IV_ISR                     ???????? _int_vector.vo98           
???????? _int_vector.vo16           ???????? _generate_music            
0000033A _frame                     ???????? ntsc_note_table            
???????? pal_note_table             ???????? _init_music.0              
00000337 _music_table               ???????? _music_mix                 
???????? _play_music                ???????? @@1                        
00000338 _music_start               00000339 _music_p                   
???????? _music_t                   ???????? _music_tc                  
???????? _music_vol1                ???????? _music_vol2                
???????? _music_vol3                ???????? @@6                        
???????? @@15                       ???????? @@000                      
???????? @@001                      ???????? @@00                       
???????? @@0                        ???????? _music_n1                  
???????? _music_s1                  ???????? _music_i1                  
???????? @@2                        ???????? _music_n2                  
???????? _music_s2                  ???????? _music_i2                  
???????? @@3                        ???????? _music_n3                  
???????? _music_s3                  ???????? _music_i3                  
???????? _music_n4                  ???????? _music_s4                  
???????? @@7                        ???????? _note2freq                 
???????? _music_freq10              ???????? _music_freq11              
???????? @@20                       ???????? @@8                        
???????? _music_freq20              ???????? _music_freq21              
???????? @@21                       ???????? @@9                        
???????? _music_freq30              ???????? _music_freq31              
???????? @@22                       ???????? @@4                        
???????? @@5                        ???????? @@12                       
???????? @@10                       ???????? _music_noise               
???????? _activate_drum             ???????? @@11                       
???????? _piano_instrument          ???????? _clarinet_instrument       
???????? _flute_instrument          ???????? _bass_instrument           
???????? _bass_volume               ???????? intybasic_music_volume     
???????? _global_volume             ???????? _piano_volume              
???????? _clarinet_vibrato          ???????? _clarinet_volume           
???????? _flute_vibrato             ???????? _flute_volume              
???????? _music_vol                 ???????? @@table                    
???????? _music_mode                ???????? intybasic_numbers          
???????? _PW10                      ???????? PRNUM16                    
???????? @@l                        ???????? @@l1                       
???????? @@z2                       ???????? @@b                        
???????? @@b1                       ???????? @@z                        
???????? @@z1                       ???????? @@lblnk                    
???????? @@llp                      ???????? @@ldone                    
???????? @@digit                    ???????? @@dig1                     
???????? @@done                     ???????? @@nxdig                    
???????? @@cont                     ???????? @@spcl                     
???????? @@div                      ???????? _AA                        
???????? _AA.end                    ???????? _AE1                       
???????? _AE1.end                   ???????? _AO                        
???????? _AO.end                    ???????? _AR                        
???????? _AR.end                    ???????? _AW                        
???????? _AW.end                    ???????? _AX                        
???????? _AX.end                    ???????? _AY                        
???????? _AY.end                    ???????? _BB1                       
???????? _BB1.end                   ???????? _BB2                       
???????? _BB2.end                   ???????? _CH                        
???????? _CH.end                    ???????? _DD1                       
???????? _DD1.end                   ???????? _DD2                       
???????? _DD2.end                   ???????? _DH1                       
???????? _DH1.end                   ???????? _DH2                       
???????? _DH2.end                   ???????? _EH                        
???????? _EH.end                    ???????? _EL                        
???????? _EL.end                    ???????? _ER1                       
???????? _ER1.end                   ???????? _ER2                       
???????? _ER2.end                   ???????? _EY                        
???????? _EY.end                    ???????? _FF                        
???????? _FF.end                    ???????? _GG1                       
???????? _GG1.end                   ???????? _GG2                       
???????? _GG2.end                   ???????? _GG3                       
???????? _GG3.end                   ???????? _HH1                       
???????? _HH1.end                   ???????? _HH2                       
???????? _HH2.end                   ???????? _IH                        
???????? _IH.end                    ???????? _IY                        
???????? _IY.end                    ???????? _JH                        
???????? _JH.end                    ???????? _KK1                       
???????? _KK1.end                   ???????? _KK2                       
???????? _KK2.end                   ???????? _KK3                       
???????? _KK3.end                   ???????? _LL                        
???????? _LL.end                    ???????? _MM                        
???????? _MM.end                    ???????? _NG1                       
???????? _NG1.end                   ???????? _NN1                       
???????? _NN1.end                   ???????? _NN2                       
???????? _NN2.end                   ???????? _OR2                       
???????? _OR2.end                   ???????? _OW                        
???????? _OW.end                    ???????? _OY                        
???????? _OY.end                    ???????? _PA1                       
???????? _PA1.end                   ???????? _PA2                       
???????? _PA2.end                   ???????? _PA3                       
???????? _PA3.end                   ???????? _PA4                       
???????? _PA4.end                   ???????? _PA5                       
???????? _PA5.end                   ???????? _PP                        
???????? _PP.end                    ???????? _RR1                       
???????? _RR1.end                   ???????? _RR2                       
???????? _RR2.end                   ???????? _SH                        
???????? _SH.end                    ???????? _SS                        
???????? _SS.end                    ???????? _TH                        
???????? _TH.end                    ???????? _TT1                       
???????? _TT1.end                   ???????? _TT2                       
???????? _TT2.end                   ???????? _UH                        
???????? _UH.end                    ???????? _UW1                       
???????? _UW1.end                   ???????? _UW2                       
???????? _UW2.end                   ???????? _VV                        
???????? _VV.end                    ???????? _WH                        
???????? _WH.end                    ???????? _WW                        
???????? _WW.end                    ???????? _XR2                       
???????? _XR2.end                   ???????? _YR                        
???????? _YR.end                    ???????? _YY1                       
???????? _YY1.end                   ???????? _YY2                       
???????? _YY2.end                   ???????? _ZH                        
???????? _ZH.end                    ???????? _ZZ                        
???????? _ZZ.end                    ???????? IV_INIT                    
???????? @@no_ivoice                ???????? IV.FPTR                    
???????? IV.PPTR                    ???????? IV.QH                      
???????? IV.QT                      ???????? @@ok                       
???????? @@ald_busy                 ???????? @@leave                    
???????? @@no_fifodata              ???????? @@fifo_fill                
???????? @@fifo_busy                ???????? IV.FLEN                    
???????? @@last_fifo                ???????? @@no_fifo_ald              
???????? @@next_phrase              ???????? @@process_phrase           
???????? IV.Q                       ???????? @@play_resrom_r4           
???????? @@new_phrase               ???????? @@play_fifo                
???????? @@play_resrom_r0           ???????? @@new_fifo_ok              
???????? @@qtok                     ???????? IV_PLAY                    
???????? IV_PLAYW                   ???????? IV_PLAY.leave              
???????? IV_PLAY.2                  ???????? IV_WAIT                    
???????? @@q_loop                   ???????? @@s_loop                   
???????? IV_SAYNUM16                ???????? @@zero                     
???????? @@thloop                   ???????? @@no_thousand              
???????? IV_SAYNUM16.recurse        ???????? @@no_hundred               
???????? @@hloop                    ???????? IV_PLAYW.1                 
???????? @@notrecurse               ???????? @@recurse                  
???????? @@teens                    ???????? @@tyloop                   
???????? intybasic_flash            ???????? JF.first                   
???????? JF.last                    ???????? JF.addr                    
???????? JF.row                     ???????? JF.wrcmd                   
???????? JF.rdcmd                   ???????? JF.ercmd                   
???????? JF.wrkey                   ???????? JF.rdkey                   
???????? JF.erkey                   ???????? JF.write                   
???????? JF.read                    ???????? JF.erase                   
???????? JF.INIT                    ???????? @@__code                   
???????? JF.SYSRAM                  ???????? JF.CMD                     
???????? JF.SV.R4                   ???????? JF.SV.R0                   
???????? JF.SV.R5                   ???????? JF.SV.ISR                  
0000642B QSQR8_TBL                  0000652A QSQR8_TBL.mid              
0000672E qs_mpy8.ok                 00006731 qs_mpy16                   
00006742 qs_mpy16.pos_ll            00006749 qs_mpy16.pos_lh            
00006750 qs_mpy16.pos_hl            ???????? intybasic_fastdiv          
???????? uf_udiv16                  ???????? @@13                       
???????? @@14                       ???????? @@16                       
???????? intybasic_ecs              00000200 Q2                         
0000033B _read                      00000359 _col1                      
0000035A _col2                      0000035B _col3                      
0000035C _col4                      0000035D _col5                      
0000035E _col6                      0000035F _col7                      
00000100 SCRATCH                    0000012C _SCRATCH                   
000002F0 SYSTEM                     00000310 _SYSTEM                    
                                	; IntyBASIC compiler v1.2.8 Oct/07/2016
                                        ;
                                        ; Prologue for IntyBASIC programs
                                        ; by Oscar Toledo G.  http://nanochess.org/
                                        ;
                                        ; Revision: Jan/30/2014. Spacing adjustment and more comments.
                                        ; Revision: Apr/01/2014. It now sets the starting screen pos. for PRINT
                                	    ; Revision: Aug/26/2014. Added PAL detection code.
                                	    ; Revision: Dec/12/2014. Added optimized constant multiplication routines
                                	    ;                        by James Pujals.
                                	    ; Revision: Jan/25/2015. Added marker for automatic title replacement.
                                	    ;                        (option --title of IntyBASIC)
                                	    ; Revision: Aug/06/2015. Turns off ECS sound. Seed random generator using
                                	    ;                        trash in 16-bit RAM. Solved bugs and optimized
                                	    ;                        macro for constant multiplication.
                                        ; Revision: Jan/12/2016. Solved bug in PAL detection.
                                        ; Revision: May/03/2016. Changed in _mode_select initialization.
                                	    ; Revision: Jul/31/2016. Solved bug in multiplication by 126 and 127.
                                	; Revision: Sep/08/2016. Now CLRSCR initializes screen position for PRINT, this
                                	;                        solves bug when user programs goes directly to PRINT.
                                        ;

                                        ROMW 16
0x5000                                  ORG $5000

                                        ; This macro will 'eat' SRCFILE directives if the assembler doesn't support the directive.
                                        IF ( DEFINED __FEATURE.SRCFILE ) = 0
                                            MACRO SRCFILE x, y
                                            ; macro must be non-empty, but a comment works fine.
                                            ENDM
                                        ENDI

                                        ;
                                        ; ROM header
                                        ;
5000   000D 0050                        BIDECLE _ZERO           ; MOB picture base
5002   000D 0050                        BIDECLE _ZERO           ; Process table
5004   0029 0050                        BIDECLE _MAIN           ; Program start
5006   000D 0050                        BIDECLE _ZERO           ; Background base image
5008   000F 0050                        BIDECLE _ONES           ; GRAM
500A   0020 0050                        BIDECLE _TITLE          ; Cartridge title and date
500C   03C0                             DECLE   $03C0           ; No ECS title, jump to code after title,
                                                                ; ... no clicks
                                                                
500D   0000                     _ZERO:  DECLE   $0000           ; Border control
500E   0000                             DECLE   $0000           ; 0 = color stack, 1 = f/b mode
                                        
500F   0001 0001                _ONES:  DECLE   $0001, $0001    ; Initial color stack 0 and 1: Blue
5011   0001 0001                        DECLE   $0001, $0001    ; Initial color stack 2 and 3: Blue
5013   0001                             DECLE   $0001           ; Initial border color: Blue

0x7                             C_WHT:  EQU $0007

5014   02BC 0200                CLRSCR: MVII #$200,R4           ; Used also for CLS
5016   0244 033E                	MVO R4,_screen		; Set up starting screen position for PRINT
5018   02B9 00F0                        MVII #$F0,R1
0x501A                          FILLZERO:
501A   01C0                             CLRR R0
0x501B                          MEMSET:
501B   0260                             MVO@ R0,R4
501C   0011                             DECR R1
501D   022C 0003                        BNE MEMSET
501F   00AF                             JR R5

                                        ;
                                        ; Title, Intellivision EXEC will jump over it and start
                                        ; execution directly in _MAIN
                                        ;
                                	; Note mark is for automatic replacement by IntyBASIC
0x5020                          _TITLE:
5020   0075 0072 0075 006E      	BYTE 117,'runnerZ',0
5024   006E 0065 0072 005A 0000 
                                        
                                        ;
                                        ; Main program
                                        ;
0x5029                          _MAIN:
5029   0003                             DIS
502A   02BE 02F0                        MVII #STACK,R6

0x502C                          _MAIN0:
                                        ;
                                        ; Clean memory
                                        ;
502C   02B9 000E                        MVII #$00e,R1           ; 14 of sound (ECS)
502E   02BC 00F0                        MVII #$0f0,R4           ; ECS PSG
5030   0004 0150 001A                   CALL FILLZERO
5033   02B9 00FE                        MVII #$0fe,R1           ; 240 words of 8 bits plus 14 of sound
5035   02BC 0100                        MVII #$100,R4           ; 8-bit scratch RAM
5037   0004 0150 001A                   CALL FILLZERO

                                	; Seed random generator using 16 bit RAM (not cleared by EXEC)
503A   01C0                     	CLRR R0
503B   02BC 02F0                	MVII #$02F0,R4
503D   02B9 0044                	MVII #$0110/4,R1        ; Includes phantom memory for extra randomness
0x503F                          _MAIN4:                         ; This loop is courtesy of GroovyBee
503F   02E0                     	ADD@ R4,R0
5040   02E0                     	ADD@ R4,R0
5041   02E0                     	ADD@ R4,R0
5042   02E0                     	ADD@ R4,R0
5043   0011                     	DECR R1
5044   022C 0006                	BNE _MAIN4
5046   0240 0104                	MVO R0,_rand

5048   02B9 0058                        MVII #$058,R1           ; 88 words of 16 bits
504A   02BC 0308                        MVII #$308,R4           ; 16-bit scratch RAM
504C   0004 0150 001A                   CALL FILLZERO

504F   0004 0150 0014                   CALL CLRSCR             ; Clean up screen

5052   02B8 632E                        MVII #_pal1_vector,R0 ; Points to interrupt vector
5054   0240 0100                        MVO R0,ISRVEC
5056   0040                             SWAP R0
5057   0240 0101                        MVO R0,ISRVEC+1

5059   0002                             EIS

505A   0280 0103                _MAIN1:	MVI _ntsc,R0
505C   0378 0003                	CMPI #3,R0
505E   022C 0005                	BNE _MAIN1
5060   01D2                     	CLRR R2
5061   000A                     _MAIN2:	INCR R2
5062   0280 0103                	MVI _ntsc,R0
5064   0378 0004                	CMPI #4,R0
5066   022C 0006                	BNE _MAIN2

                                        ; 596 for PAL in jzintv
                                        ; 444 for NTSC in jzintv
5068   037A 0208                        CMPI #520,R2
506A   02B8 0001                        MVII #1,R0
506C   0206 0001                        BLE _MAIN3
506E   01C0                             CLRR R0
506F   0240 0103                _MAIN3: MVO R0,_ntsc

5071   0004 0160 031A                   CALL _wait
5074   0004 0164 002A           	CALL _init_music
5077   02B8 0002                        MVII #2,R0
5079   0240 0109                        MVO R0,_mode_select
507B   02B8 0038                        MVII #$038,R0
507D   0240 01F8                        MVO R0,$01F8            ; Configures sound
507F   0240 00F8                        MVO R0,$00F8            ; Configures sound (ECS)
5081   0004 0160 031A                   CALL _wait

                                ;* ======================================================================== *;
                                ;*  These routines are placed into the public domain by their author.  All  *;
                                ;*  copyright rights are hereby relinquished on the routines and data in    *;
                                ;*  this file.  -- James Pujals (DZ-Jay), 2014                              *;
                                ;* ======================================================================== *;

                                ; Modified by Oscar Toledo G. (nanochess), Aug/06/2015
                                ; * Tested all multiplications with automated test.
                                ; * Accelerated multiplication by 7,14,15,28,31,60,62,63,112,120,124
                                ; * Solved bug in multiplication by 23,39,46,47,55,71,78,79,87,92,93,94,95,103,110,111,119
                                ; * Improved sequence of instructions to be more interruptible.

                                ;; ======================================================================== ;;
                                ;;  MULT reg, tmp, const                                                    ;;
                                ;;  Multiplies "reg" by constant "const" and using "tmp" for temporary      ;;
                                ;;  calculations.  The result is placed in "reg."  The multiplication is    ;;
                                ;;  performed by an optimal combination of shifts, additions, and           ;;
                                ;;  subtractions.                                                           ;;
                                ;;                                                                          ;;
                                ;;  NOTE:   The resulting contents of the "tmp" are undefined.              ;;
                                ;;                                                                          ;;
                                ;;  ARGUMENTS                                                               ;;
                                ;;      reg         A register containing the multiplicand.                 ;;
                                ;;      tmp         A register for temporary calculations.                  ;;
                                ;;      const       The constant multiplier.                                ;;
                                ;;                                                                          ;;
                                ;;  OUTPUT                                                                  ;;
                                ;;      reg         Output value.                                           ;;
                                ;;      tmp         Trashed.                                                ;;
                                ;;      .ERR.Failed True if operation failed.                               ;;
                                ;; ======================================================================== ;;
                                MACRO   MULT reg, tmp, const
                                ;
                                    LISTING "code"

                                _mul.const      QSET    %const%
                                _mul.done       QSET    0

                                        IF (%const% > $7F)
                                _mul.const      QSET    (_mul.const SHR 1)
                                                SLL     %reg%,  1
                                        ENDI

                                        ; Multiply by $00 (0)
                                        IF (_mul.const = $00)
                                _mul.done       QSET    -1
                                                CLRR    %reg%
                                        ENDI

                                        ; Multiply by $01 (1)
                                        IF (_mul.const = $01)
                                _mul.done       QSET    -1
                                                ; Nothing to do
                                        ENDI

                                        ; Multiply by $02 (2)
                                        IF (_mul.const = $02)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                        ENDI

                                        ; Multiply by $03 (3)
                                        IF (_mul.const = $03)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $04 (4)
                                        IF (_mul.const = $04)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                        ENDI

                                        ; Multiply by $05 (5)
                                        IF (_mul.const = $05)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $06 (6)
                                        IF (_mul.const = $06)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $07 (7)
                                        IF (_mul.const = $07)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $08 (8)
                                        IF (_mul.const = $08)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                        ENDI

                                        ; Multiply by $09 (9)
                                        IF (_mul.const = $09)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $0A (10)
                                        IF (_mul.const = $0A)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $0B (11)
                                        IF (_mul.const = $0B)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $0C (12)
                                        IF (_mul.const = $0C)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $0D (13)
                                        IF (_mul.const = $0D)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $0E (14)
                                        IF (_mul.const = $0E)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $0F (15)
                                        IF (_mul.const = $0F)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $10 (16)
                                        IF (_mul.const = $10)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                        ENDI

                                        ; Multiply by $11 (17)
                                        IF (_mul.const = $11)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $12 (18)
                                        IF (_mul.const = $12)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $13 (19)
                                        IF (_mul.const = $13)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $14 (20)
                                        IF (_mul.const = $14)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $15 (21)
                                        IF (_mul.const = $15)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $16 (22)
                                        IF (_mul.const = $16)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $17 (23)
                                        IF (_mul.const = $17)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $18 (24)
                                        IF (_mul.const = $18)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $19 (25)
                                        IF (_mul.const = $19)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $1A (26)
                                        IF (_mul.const = $1A)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $1B (27)
                                        IF (_mul.const = $1B)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $1C (28)
                                        IF (_mul.const = $1C)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $1D (29)
                                        IF (_mul.const = $1D)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $1E (30)
                                        IF (_mul.const = $1E)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $1F (31)
                                        IF (_mul.const = $1F)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                		ADDR	%reg%,	%reg%
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $20 (32)
                                        IF (_mul.const = $20)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                		ADDR	%reg%,	%reg%
                                        ENDI

                                        ; Multiply by $21 (33)
                                        IF (_mul.const = $21)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                		ADDR	%reg%,	%reg%
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $22 (34)
                                        IF (_mul.const = $22)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $23 (35)
                                        IF (_mul.const = $23)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $24 (36)
                                        IF (_mul.const = $24)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $25 (37)
                                        IF (_mul.const = $25)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $26 (38)
                                        IF (_mul.const = $26)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $27 (39)
                                        IF (_mul.const = $27)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                		SUBR	%tmp%,	%reg%
                                        ENDI

                                        ; Multiply by $28 (40)
                                        IF (_mul.const = $28)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $29 (41)
                                        IF (_mul.const = $29)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $2A (42)
                                        IF (_mul.const = $2A)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $2B (43)
                                        IF (_mul.const = $2B)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $2C (44)
                                        IF (_mul.const = $2C)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $2D (45)
                                        IF (_mul.const = $2D)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $2E (46)
                                        IF (_mul.const = $2E)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                		SUBR	%tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $2F (47)
                                        IF (_mul.const = $2F)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                		SUBR	%tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $30 (48)
                                        IF (_mul.const = $30)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $31 (49)
                                        IF (_mul.const = $31)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $32 (50)
                                        IF (_mul.const = $32)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $33 (51)
                                        IF (_mul.const = $33)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $34 (52)
                                        IF (_mul.const = $34)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $35 (53)
                                        IF (_mul.const = $35)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $36 (54)
                                        IF (_mul.const = $36)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $37 (55)
                                        IF (_mul.const = $37)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                		SLL	%reg%,	1
                                		SUBR	%tmp%,	%reg%
                                        ENDI

                                        ; Multiply by $38 (56)
                                        IF (_mul.const = $38)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $39 (57)
                                        IF (_mul.const = $39)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $3A (58)
                                        IF (_mul.const = $3A)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $3B (59)
                                        IF (_mul.const = $3B)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $3C (60)
                                        IF (_mul.const = $3C)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $3D (61)
                                        IF (_mul.const = $3D)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $3E (62)
                                        IF (_mul.const = $3E)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                		ADDR	%reg%,	%reg%
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $3F (63)
                                        IF (_mul.const = $3F)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $40 (64)
                                        IF (_mul.const = $40)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                        ENDI

                                        ; Multiply by $41 (65)
                                        IF (_mul.const = $41)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $42 (66)
                                        IF (_mul.const = $42)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                		ADDR	%reg%,	%reg%
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $43 (67)
                                        IF (_mul.const = $43)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                		ADDR	%reg%,	%reg%
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $44 (68)
                                        IF (_mul.const = $44)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $45 (69)
                                        IF (_mul.const = $45)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $46 (70)
                                        IF (_mul.const = $46)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $47 (71)
                                        IF (_mul.const = $47)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                		SUBR	%tmp%,	%reg%
                                        ENDI

                                        ; Multiply by $48 (72)
                                        IF (_mul.const = $48)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $49 (73)
                                        IF (_mul.const = $49)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $4A (74)
                                        IF (_mul.const = $4A)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $4B (75)
                                        IF (_mul.const = $4B)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $4C (76)
                                        IF (_mul.const = $4C)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $4D (77)
                                        IF (_mul.const = $4D)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $4E (78)
                                        IF (_mul.const = $4E)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                		SUBR	%tmp%,	%reg%
                                        ENDI

                                        ; Multiply by $4F (79)
                                        IF (_mul.const = $4F)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                		SUBR	%tmp%,	%reg%
                                        ENDI

                                        ; Multiply by $50 (80)
                                        IF (_mul.const = $50)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $51 (81)
                                        IF (_mul.const = $51)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $52 (82)
                                        IF (_mul.const = $52)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $53 (83)
                                        IF (_mul.const = $53)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $54 (84)
                                        IF (_mul.const = $54)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $55 (85)
                                        IF (_mul.const = $55)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $56 (86)
                                        IF (_mul.const = $56)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $57 (87)
                                        IF (_mul.const = $57)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                		SUBR    %reg%,	%tmp%
                                                SLL     %reg%,  2
                                		SUBR	%tmp%,	%reg%
                                        ENDI

                                        ; Multiply by $58 (88)
                                        IF (_mul.const = $58)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $59 (89)
                                        IF (_mul.const = $59)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $5A (90)
                                        IF (_mul.const = $5A)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $5B (91)
                                        IF (_mul.const = $5B)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $5C (92)
                                        IF (_mul.const = $5C)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                		SUBR	%tmp%,	%reg%
                                        ENDI

                                        ; Multiply by $5D (93)
                                        IF (_mul.const = $5D)
                                _mul.done       QSET    -1
                                		MOVR	%reg%,	%tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                		SUBR	%tmp%,	%reg%
                                        ENDI

                                        ; Multiply by $5E (94)
                                        IF (_mul.const = $5E)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                		SUBR	%tmp%,	%reg%
                                        ENDI

                                        ; Multiply by $5F (95)
                                        IF (_mul.const = $5F)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                ADDR	%reg%,	%reg%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                		SUBR	%tmp%,	%reg%
                                        ENDI

                                        ; Multiply by $60 (96)
                                        IF (_mul.const = $60)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                		ADDR	%reg%,	%reg%
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $61 (97)
                                        IF (_mul.const = $61)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $62 (98)
                                        IF (_mul.const = $62)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $63 (99)
                                        IF (_mul.const = $63)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $64 (100)
                                        IF (_mul.const = $64)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $65 (101)
                                        IF (_mul.const = $65)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $66 (102)
                                        IF (_mul.const = $66)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $67 (103)
                                        IF (_mul.const = $67)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $68 (104)
                                        IF (_mul.const = $68)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $69 (105)
                                        IF (_mul.const = $69)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $6A (106)
                                        IF (_mul.const = $6A)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $6B (107)
                                        IF (_mul.const = $6B)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $6C (108)
                                        IF (_mul.const = $6C)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $6D (109)
                                        IF (_mul.const = $6D)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $6E (110)
                                        IF (_mul.const = $6E)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                		SUBR	%tmp%,	%reg%
                                        ENDI

                                        ; Multiply by $6F (111)
                                        IF (_mul.const = $6F)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                		SUBR	%tmp%,	%reg%
                                        ENDI

                                        ; Multiply by $70 (112)
                                        IF (_mul.const = $70)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $71 (113)
                                        IF (_mul.const = $71)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $72 (114)
                                        IF (_mul.const = $72)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $73 (115)
                                        IF (_mul.const = $73)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $74 (116)
                                        IF (_mul.const = $74)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $75 (117)
                                        IF (_mul.const = $75)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $76 (118)
                                        IF (_mul.const = $76)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $77 (119)
                                        IF (_mul.const = $77)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $78 (120)
                                        IF (_mul.const = $78)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $79 (121)
                                        IF (_mul.const = $79)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $7A (122)
                                        IF (_mul.const = $7A)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $7B (123)
                                        IF (_mul.const = $7B)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $7C (124)
                                        IF (_mul.const = $7C)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                		ADDR	%reg%,	%reg%
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $7D (125)
                                        IF (_mul.const = $7D)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                		ADDR	%reg%,	%reg%
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $7E (126)
                                        IF (_mul.const = $7E)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $7F (127)
                                        IF (_mul.const = $7F)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        IF  (_mul.done = 0)
                                            ERR $("Invalid multiplication constant \'%const%\', must be between 0 and ", $#($7F), ".")
                                        ENDI

                                    LISTING "prev"
                                ENDM

                                ;; ======================================================================== ;;
                                ;;  EOF: pm:mac:lang:mult                                                   ;;
                                ;; ======================================================================== ;;

                                	;FILE C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS
                                	;[1] ' =========================================================================
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",1
                                	;[2] ' IntyBASIC SDK Project: runnerZ
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",2
                                	;[3] ' -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",3
                                	;[4] '     Programmer: Josue N Rivera
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",4
                                	;[5] '     Created:    12/14/2017
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",5
                                	;[6] '     Updated:    12/14/2017
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",6
                                	;[7] '
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",7
                                	;[8] '     Project automatically generated by INTYNEW.
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",8
                                	;[9] ' -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",9
                                	;[10] ' History:
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",10
                                	;[11] ' 12/14/2017 - runnerZ project created.
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",11
                                	;[12] ' 12/15/2017 - power ups added and the ability to jump.
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",12
                                	;[13] ' 12/16/2017 - animation for level ups and power ups.
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",13
                                	;[14] ' 12/17/2017 - inprovement to animation and power ups.
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",14
                                	;[15] ' =========================================================================
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",15
                                	;[16] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",16
                                	;[17] INCLUDE "constants.bas"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",17
                                	;FILE C:\IntyBASIC SDK\lib\constants.bas
                                	;[1] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",1
                                	;[2] REM HEADER - CONSTANTS.BAS
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",2
                                	;[3] REM
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",3
                                	;[4] REM Started by Mark Ball, July 2015
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",4
                                	;[5] REM
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",5
                                	;[6] REM Constants for use in IntyBASIC
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",6
                                	;[7] REM
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",7
                                	;[8] REM HISTORY
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",8
                                	;[9] REM -------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",9
                                	;[10] REM 1.00F 05/07/15 - First version.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",10
                                	;[11] REM 1.01F 07/07/15 - Added disc directions.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",11
                                	;[12] REM                - Added background modes.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",12
                                	;[13] REM                - Minor comment changes.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",13
                                	;[14] REM 1.02F 08/07/15 - Renamed constants.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",14
                                	;[15] REM                - Added background access information.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",15
                                	;[16] REM                - Adjustments to layout.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",16
                                	;[17] REM 1.03F 08/07/15 - Fixed comment delimiter.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",17
                                	;[18] REM 1.04F 11/07/15 - Added useful functions.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",18
                                	;[19] REM                - Added controller movement mask.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",19
                                	;[20] REM 1.05F 11/07/15 - Added BACKGROUND constants.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",20
                                	;[21] REM 1.06F 11/07/15 - Changed Y, X order to X, Y in DEF FN functions.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",21
                                	;[22] REM 1.07F 11/07/15 - Added colour stack advance.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",22
                                	;[23] REM 1.08F 12/07/15 - Added functions for sprite position handling.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",23
                                	;[24] REM 1.09F 12/07/15 - Added a function for resetting a sprite.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",24
                                	;[25] REM 1.10F 13/07/15 - Added keypad constants.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",25
                                	;[26] REM 1.11F 13/07/15 - Added side button constants.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",26
                                	;[27] REM 1.12F 13/07/15 - Updated sprite functions.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",27
                                	;[28] REM 1.13F 19/07/15 - Added border masking constants.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",28
                                	;[29] REM 1.14F 20/07/15 - Added a combined border masking constant.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",29
                                	;[30] REM 1.15F 20/07/15 - Renamed border masking constants to BORDER_HIDE_xxxx.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",30
                                	;[31] REM 1.16F 28/09/15 - Fixed disc direction typos.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",31
                                	;[32] REM 1.17F 30/09/15 - Fixed DISC_SOUTH_WEST value.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",32
                                	;[33] REM 1.18F 05/12/15 - Fixed BG_XXXX colours.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",33
                                	;[34] REM 1.19F 01/01/16 - Changed name of BACKTAB constant to avoid confusion with #BACKTAB array.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",34
                                	;[35] REM                - Added pause key constants.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",35
                                	;[36] REM 1.20F 14/01/16 - Added coloured squares mode's pixel colours.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",36
                                	;[37] REM 1.21F 15/01/16 - Added coloured squares mode's X and Y limits.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",37
                                	;[38] REM 1.22F 23/01/16 - Added PSG constants.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",38
                                	;[39] REM 1.23F 24/01/16 - Fixed typo in PSG comments.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",39
                                	;[40] REM 1.24F 16/11/16 - Added toggle DEF FN's for sprite's BEHIND, HIT and VISIBLE.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",40
                                	;[41] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",41
                                	;[42] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",42
                                	;[43] REM /////////////////////////////////////////////////////////////////////////
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",43
                                	;[44] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",44
                                	;[45] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",45
                                	;[46] REM Background information.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",46
                                	;[47] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",47
                                	;[48] CONST BACKTAB_ADDR					= $0200		' Start of the BACKground TABle (BACKTAB) in RAM.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",48
                                	;[49] CONST BACKGROUND_ROWS				= 12		' Height of the background in cards.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",49
                                	;[50] CONST BACKGROUND_COLUMNS			= 20		' Width of the background in cards.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",50
                                	;[51] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",51
                                	;[52] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",52
                                	;[53] REM Background GRAM cards.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",53
                                	;[54] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",54
                                	;[55] CONST BG00							= $0800
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",55
                                	;[56] CONST BG01							= $0808
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",56
                                	;[57] CONST BG02							= $0810
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",57
                                	;[58] CONST BG03							= $0818
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",58
                                	;[59] CONST BG04							= $0820
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",59
                                	;[60] CONST BG05							= $0828
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",60
                                	;[61] CONST BG06							= $0830
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",61
                                	;[62] CONST BG07							= $0838
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",62
                                	;[63] CONST BG08							= $0840
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",63
                                	;[64] CONST BG09							= $0848
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",64
                                	;[65] CONST BG10							= $0850
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",65
                                	;[66] CONST BG11							= $0858
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",66
                                	;[67] CONST BG12							= $0860
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",67
                                	;[68] CONST BG13							= $0868
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",68
                                	;[69] CONST BG14							= $0870
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",69
                                	;[70] CONST BG15							= $0878
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",70
                                	;[71] CONST BG16							= $0880
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",71
                                	;[72] CONST BG17							= $0888
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",72
                                	;[73] CONST BG18							= $0890
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",73
                                	;[74] CONST BG19							= $0898
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",74
                                	;[75] CONST BG20							= $08A0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",75
                                	;[76] CONST BG21							= $08A8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",76
                                	;[77] CONST BG22							= $08B0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",77
                                	;[78] CONST BG23							= $08B8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",78
                                	;[79] CONST BG24							= $08C0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",79
                                	;[80] CONST BG25							= $08C8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",80
                                	;[81] CONST BG26							= $08D0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",81
                                	;[82] CONST BG27							= $08D8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",82
                                	;[83] CONST BG28							= $08E0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",83
                                	;[84] CONST BG29							= $08E8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",84
                                	;[85] CONST BG30							= $08F0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",85
                                	;[86] CONST BG31							= $08F8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",86
                                	;[87] CONST BG32							= $0900
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",87
                                	;[88] CONST BG33							= $0908
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",88
                                	;[89] CONST BG34							= $0910
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",89
                                	;[90] CONST BG35							= $0918
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",90
                                	;[91] CONST BG36							= $0920
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",91
                                	;[92] CONST BG37							= $0928
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",92
                                	;[93] CONST BG38							= $0930
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",93
                                	;[94] CONST BG39							= $0938
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",94
                                	;[95] CONST BG40							= $0940
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",95
                                	;[96] CONST BG41							= $0948
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",96
                                	;[97] CONST BG42							= $0950
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",97
                                	;[98] CONST BG43							= $0958
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",98
                                	;[99] CONST BG44							= $0960
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",99
                                	;[100] CONST BG45							= $0968
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",100
                                	;[101] CONST BG46							= $0970
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",101
                                	;[102] CONST BG47							= $0978
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",102
                                	;[103] CONST BG48							= $0980
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",103
                                	;[104] CONST BG49							= $0988
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",104
                                	;[105] CONST BG50							= $0990
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",105
                                	;[106] CONST BG51							= $0998
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",106
                                	;[107] CONST BG52							= $09A0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",107
                                	;[108] CONST BG53							= $09A8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",108
                                	;[109] CONST BG54							= $09B0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",109
                                	;[110] CONST BG55							= $09B8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",110
                                	;[111] CONST BG56							= $09C0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",111
                                	;[112] CONST BG57							= $09C8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",112
                                	;[113] CONST BG58							= $09D0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",113
                                	;[114] CONST BG59							= $09D8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",114
                                	;[115] CONST BG60							= $09E0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",115
                                	;[116] CONST BG61							= $09E8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",116
                                	;[117] CONST BG62							= $09F0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",117
                                	;[118] CONST BG63							= $09F8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",118
                                	;[119] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",119
                                	;[120] REM /////////////////////////////////////////////////////////////////////////
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",120
                                	;[121] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",121
                                	;[122] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",122
                                	;[123] REM GRAM card index numbers.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",123
                                	;[124] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",124
                                	;[125] REM Note: For use with the "define" command.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",125
                                	;[126] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",126
                                	;[127] CONST DEF00							= $0000
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",127
                                	;[128] CONST DEF01							= $0001
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",128
                                	;[129] CONST DEF02							= $0002
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",129
                                	;[130] CONST DEF03							= $0003
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",130
                                	;[131] CONST DEF04							= $0004
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",131
                                	;[132] CONST DEF05							= $0005
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",132
                                	;[133] CONST DEF06							= $0006
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",133
                                	;[134] CONST DEF07							= $0007
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",134
                                	;[135] CONST DEF08							= $0008
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",135
                                	;[136] CONST DEF09							= $0009
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",136
                                	;[137] CONST DEF10							= $000A
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",137
                                	;[138] CONST DEF11							= $000B
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",138
                                	;[139] CONST DEF12							= $000C
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",139
                                	;[140] CONST DEF13							= $000D
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",140
                                	;[141] CONST DEF14							= $000E
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",141
                                	;[142] CONST DEF15							= $000F
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",142
                                	;[143] CONST DEF16							= $0010
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",143
                                	;[144] CONST DEF17							= $0011
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",144
                                	;[145] CONST DEF18							= $0012
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",145
                                	;[146] CONST DEF19							= $0013
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",146
                                	;[147] CONST DEF20							= $0014
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",147
                                	;[148] CONST DEF21							= $0015
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",148
                                	;[149] CONST DEF22							= $0016
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",149
                                	;[150] CONST DEF23							= $0017
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",150
                                	;[151] CONST DEF24							= $0018
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",151
                                	;[152] CONST DEF25							= $0019
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",152
                                	;[153] CONST DEF26							= $001A
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",153
                                	;[154] CONST DEF27							= $001B
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",154
                                	;[155] CONST DEF28							= $001C
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",155
                                	;[156] CONST DEF29							= $001D
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",156
                                	;[157] CONST DEF30							= $001E
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",157
                                	;[158] CONST DEF31							= $001F
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",158
                                	;[159] CONST DEF32							= $0020
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",159
                                	;[160] CONST DEF33							= $0021
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",160
                                	;[161] CONST DEF34							= $0022
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",161
                                	;[162] CONST DEF35							= $0023
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",162
                                	;[163] CONST DEF36							= $0024
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",163
                                	;[164] CONST DEF37							= $0025
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",164
                                	;[165] CONST DEF38							= $0026
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",165
                                	;[166] CONST DEF39							= $0027
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",166
                                	;[167] CONST DEF40							= $0028
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",167
                                	;[168] CONST DEF41							= $0029
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",168
                                	;[169] CONST DEF42							= $002A
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",169
                                	;[170] CONST DEF43							= $002B
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",170
                                	;[171] CONST DEF44							= $002C
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",171
                                	;[172] CONST DEF45							= $002D
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",172
                                	;[173] CONST DEF46							= $002E
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",173
                                	;[174] CONST DEF47							= $002F
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",174
                                	;[175] CONST DEF48							= $0030
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",175
                                	;[176] CONST DEF49							= $0031
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",176
                                	;[177] CONST DEF50							= $0032
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",177
                                	;[178] CONST DEF51							= $0033
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",178
                                	;[179] CONST DEF52							= $0034
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",179
                                	;[180] CONST DEF53							= $0035
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",180
                                	;[181] CONST DEF54							= $0036
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",181
                                	;[182] CONST DEF55							= $0037
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",182
                                	;[183] CONST DEF56							= $0038
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",183
                                	;[184] CONST DEF57							= $0039
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",184
                                	;[185] CONST DEF58							= $003A
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",185
                                	;[186] CONST DEF59							= $003B
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",186
                                	;[187] CONST DEF60							= $003C
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",187
                                	;[188] CONST DEF61							= $003D
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",188
                                	;[189] CONST DEF62							= $003E
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",189
                                	;[190] CONST DEF63							= $003F
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",190
                                	;[191] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",191
                                	;[192] REM /////////////////////////////////////////////////////////////////////////
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",192
                                	;[193] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",193
                                	;[194] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",194
                                	;[195] REM Screen modes.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",195
                                	;[196] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",196
                                	;[197] REM Note: For use with the "mode" command.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",197
                                	;[198] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",198
                                	;[199] CONST SCREEN_COLOR_STACK			= $0000
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",199
                                	;[200] CONST SCREEN_FOREGROUND_BACKGROUND	= $0001
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",200
                                	;[201] REM Abbreviated versions.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",201
                                	;[202] CONST SCREEN_FB						= $0001
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",202
                                	;[203] CONST SCREEN_CS						= $0000
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",203
                                	;[204] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",204
                                	;[205] REM /////////////////////////////////////////////////////////////////////////
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",205
                                	;[206] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",206
                                	;[207] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",207
                                	;[208] REM COLORS - Border.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",208
                                	;[209] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",209
                                	;[210] REM Notes:
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",210
                                	;[211] REM - For use with the commands "mode 0" and "mode 1".
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",211
                                	;[212] REM - For use with the "border" command.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",212
                                	;[213] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",213
                                	;[214] CONST BORDER_BLACK					= $0000
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",214
                                	;[215] CONST BORDER_BLUE					= $0001
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",215
                                	;[216] CONST BORDER_RED					= $0002
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",216
                                	;[217] CONST BORDER_TAN					= $0003
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",217
                                	;[218] CONST BORDER_DARKGREEN				= $0004
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",218
                                	;[219] CONST BORDER_GREEN					= $0005
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",219
                                	;[220] CONST BORDER_YELLOW					= $0006
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",220
                                	;[221] CONST BORDER_WHITE					= $0007
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",221
                                	;[222] CONST BORDER_GREY					= $0008
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",222
                                	;[223] CONST BORDER_CYAN					= $0009
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",223
                                	;[224] CONST BORDER_ORANGE					= $000A
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",224
                                	;[225] CONST BORDER_BROWN					= $000B
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",225
                                	;[226] CONST BORDER_PINK					= $000C
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",226
                                	;[227] CONST BORDER_LIGHTBLUE				= $000D
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",227
                                	;[228] CONST BORDER_YELLOWGREEN			= $000E
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",228
                                	;[229] CONST BORDER_PURPLE					= $000F
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",229
                                	;[230] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",230
                                	;[231] REM /////////////////////////////////////////////////////////////////////////
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",231
                                	;[232] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",232
                                	;[233] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",233
                                	;[234] REM BORDER - Edge masks.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",234
                                	;[235] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",235
                                	;[236] REM Note: For use with the "border color, edge" command.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",236
                                	;[237] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",237
                                	;[238] CONST BORDER_HIDE_LEFT_EDGE			= $0001		' Hide the leftmost column of the background.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",238
                                	;[239] CONST BORDER_HIDE_TOP_EDGE			= $0002		' Hide the topmost row of the background.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",239
                                	;[240] CONST BORDER_HIDE_TOP_LEFT_EDGE		= $0003		' Hide both the topmost row and leftmost column of the background.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",240
                                	;[241] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",241
                                	;[242] REM /////////////////////////////////////////////////////////////////////////
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",242
                                	;[243] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",243
                                	;[244] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",244
                                	;[245] REM COLORS - Mode 0 (Color Stack).
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",245
                                	;[246] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",246
                                	;[247] REM Stack
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",247
                                	;[248] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",248
                                	;[249] REM Note: For use as the last 4 parameters used in the "mode 1" command.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",249
                                	;[250] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",250
                                	;[251] CONST STACK_BLACK					= $0000
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",251
                                	;[252] CONST STACK_BLUE					= $0001
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",252
                                	;[253] CONST STACK_RED						= $0002
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",253
                                	;[254] CONST STACK_TAN						= $0003
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",254
                                	;[255] CONST STACK_DARKGREEN				= $0004
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",255
                                	;[256] CONST STACK_GREEN					= $0005
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",256
                                	;[257] CONST STACK_YELLOW					= $0006
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",257
                                	;[258] CONST STACK_WHITE					= $0007
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",258
                                	;[259] CONST STACK_GREY					= $0008
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",259
                                	;[260] CONST STACK_CYAN					= $0009
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",260
                                	;[261] CONST STACK_ORANGE					= $000A
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",261
                                	;[262] CONST STACK_BROWN					= $000B
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",262
                                	;[263] CONST STACK_PINK					= $000C
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",263
                                	;[264] CONST STACK_LIGHTBLUE				= $000D
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",264
                                	;[265] CONST STACK_YELLOWGREEN				= $000E
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",265
                                	;[266] CONST STACK_PURPLE					= $000F
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",266
                                	;[267] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",267
                                	;[268] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",268
                                	;[269] REM Foreground.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",269
                                	;[270] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",270
                                	;[271] REM Notes:
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",271
                                	;[272] REM - For use with "peek/poke" commands that access BACKTAB.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",272
                                	;[273] REM - Only one foreground colour permitted per background card.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",273
                                	;[274] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",274
                                	;[275] CONST CS_BLACK						= $0000
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",275
                                	;[276] CONST CS_BLUE						= $0001
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",276
                                	;[277] CONST CS_RED						= $0002
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",277
                                	;[278] CONST CS_TAN						= $0003
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",278
                                	;[279] CONST CS_DARKGREEN					= $0004
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",279
                                	;[280] CONST CS_GREEN						= $0005
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",280
                                	;[281] CONST CS_YELLOW						= $0006
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",281
                                	;[282] CONST CS_WHITE						= $0007
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",282
                                	;[283] CONST CS_GREY						= $1000
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",283
                                	;[284] CONST CS_CYAN						= $1001
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",284
                                	;[285] CONST CS_ORANGE						= $1002
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",285
                                	;[286] CONST CS_BROWN						= $1003
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",286
                                	;[287] CONST CS_PINK						= $1004
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",287
                                	;[288] CONST CS_LIGHTBLUE					= $1005
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",288
                                	;[289] CONST CS_YELLOWGREEN				= $1006
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",289
                                	;[290] CONST CS_PURPLE						= $1007
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",290
                                	;[291] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",291
                                	;[292] CONST CS_CARD_DATA_MASK				= $07F8		' Mask to get the background card's data.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",292
                                	;[293] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",293
                                	;[294] CONST CS_ADVANCE					= $2000		' Advance the colour stack by one position.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",294
                                	;[295] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",295
                                	;[296] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",296
                                	;[297] REM Coloured squares mode.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",297
                                	;[298] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",298
                                	;[299] REM Notes :
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",299
                                	;[300] REM - Only available in colour stack mode.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",300
                                	;[301] REM - Pixels in each BACKTAB card are arranged in the following manner:
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",301
                                	;[302] REM +-------+-------+
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",302
                                	;[303] REM | Pixel | Pixel |
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",303
                                	;[304] REM |   0   |   1   !
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",304
                                	;[305] REM +-------+-------+
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",305
                                	;[306] REM | Pixel | Pixel |
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",306
                                	;[307] REM |   2   |   3   !
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",307
                                	;[308] REM +-------+-------+
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",308
                                	;[309] REM
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",309
                                	;[310] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",310
                                	;[311] CONST CS_COLOUR_SQUARES_ENABLE		= $1000
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",311
                                	;[312] CONST CS_PIX0_BLACK					= 0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",312
                                	;[313] CONST CS_PIX0_BLUE					= 1
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",313
                                	;[314] CONST CS_PIX0_RED					= 2
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",314
                                	;[315] CONST CS_PIX0_TAN					= 3
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",315
                                	;[316] CONST CS_PIX0_DARKGREEN				= 4
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",316
                                	;[317] CONST CS_PIX0_GREEN					= 5
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",317
                                	;[318] CONST CS_PIX0_YELLOW				= 6
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",318
                                	;[319] CONST CS_PIX0_BACKGROUND			= 7
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",319
                                	;[320] CONST CS_PIX1_BLACK					= 0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",320
                                	;[321] CONST CS_PIX1_BLUE					= 1*8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",321
                                	;[322] CONST CS_PIX1_RED					= 2*8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",322
                                	;[323] CONST CS_PIX1_TAN					= 3*8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",323
                                	;[324] CONST CS_PIX1_DARKGREEN				= 4*8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",324
                                	;[325] CONST CS_PIX1_GREEN					= 5*8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",325
                                	;[326] CONST CS_PIX1_YELLOW				= 6*8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",326
                                	;[327] CONST CS_PIX1_BACKGROUND			= 7*8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",327
                                	;[328] CONST CS_PIX2_BLACK					= 0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",328
                                	;[329] CONST CS_PIX2_BLUE					= 1*64
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",329
                                	;[330] CONST CS_PIX2_RED					= 2*64
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",330
                                	;[331] CONST CS_PIX2_TAN					= 3*64
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",331
                                	;[332] CONST CS_PIX2_DARKGREEN				= 4*64
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",332
                                	;[333] CONST CS_PIX2_GREEN					= 5*64
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",333
                                	;[334] CONST CS_PIX2_YELLOW				= 6*64
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",334
                                	;[335] CONST CS_PIX2_BACKGROUND			= 7*64
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",335
                                	;[336] CONST CS_PIX3_BLACK					= 0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",336
                                	;[337] CONST CS_PIX3_BLUE					= $0200
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",337
                                	;[338] CONST CS_PIX3_RED					= $0400
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",338
                                	;[339] CONST CS_PIX3_TAN					= $0600
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",339
                                	;[340] CONST CS_PIX3_DARKGREEN				= $2000
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",340
                                	;[341] CONST CS_PIX3_GREEN					= $2200
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",341
                                	;[342] CONST CS_PIX3_YELLOW				= $2400
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",342
                                	;[343] CONST CS_PIX3_BACKGROUND			= $2600
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",343
                                	;[344] CONST CS_PIX_MASK					= CS_COLOUR_SQUARES_ENABLE+CS_PIX0_BACKGROUND+CS_PIX1_BACKGROUND+CS_PIX2_BACKGROUND+CS_PIX3_BACKGROUND
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",344
                                	;[345] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",345
                                	;[346] CONST CS_PIX_X_MIN					= 0		' Minimum x coordinate.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",346
                                	;[347] CONST CS_PIX_X_MAX					= 39	' Maximum x coordinate.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",347
                                	;[348] CONST CS_PIX_Y_MIN					= 0		' Minimum Y coordinate.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",348
                                	;[349] CONST CS_PIX_Y_MAX					= 23	' Maximum Y coordinate.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",349
                                	;[350] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",350
                                	;[351] REM /////////////////////////////////////////////////////////////////////////
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",351
                                	;[352] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",352
                                	;[353] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",353
                                	;[354] REM COLORS - Mode 1 (Foreground Background)
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",354
                                	;[355] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",355
                                	;[356] REM Foreground.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",356
                                	;[357] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",357
                                	;[358] REM Notes:
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",358
                                	;[359] REM - For use with "peek/poke" commands that access BACKTAB.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",359
                                	;[360] REM - Only one foreground colour permitted per background card.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",360
                                	;[361] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",361
                                	;[362] CONST FG_BLACK						= $0000
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",362
                                	;[363] CONST FG_BLUE						= $0001
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",363
                                	;[364] CONST FG_RED						= $0002
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",364
                                	;[365] CONST FG_TAN						= $0003
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",365
                                	;[366] CONST FG_DARKGREEN					= $0004
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",366
                                	;[367] CONST FG_GREEN						= $0005
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",367
                                	;[368] CONST FG_YELLOW						= $0006
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",368
                                	;[369] CONST FG_WHITE						= $0007
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",369
                                	;[370] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",370
                                	;[371] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",371
                                	;[372] REM Background.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",372
                                	;[373] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",373
                                	;[374] REM Notes:
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",374
                                	;[375] REM - For use with "peek/poke" commands that access BACKTAB.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",375
                                	;[376] REM - Only one background colour permitted per background card.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",376
                                	;[377] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",377
                                	;[378] CONST BG_BLACK						= $0000
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",378
                                	;[379] CONST BG_BLUE						= $0200
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",379
                                	;[380] CONST BG_RED						= $0400
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",380
                                	;[381] CONST BG_TAN						= $0600
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",381
                                	;[382] CONST BG_DARKGREEN					= $2000
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",382
                                	;[383] CONST BG_GREEN						= $2200
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",383
                                	;[384] CONST BG_YELLOW						= $2400
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",384
                                	;[385] CONST BG_WHITE						= $2600
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",385
                                	;[386] CONST BG_GREY						= $1000
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",386
                                	;[387] CONST BG_CYAN						= $1200
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",387
                                	;[388] CONST BG_ORANGE						= $1400
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",388
                                	;[389] CONST BG_BROWN						= $1600
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",389
                                	;[390] CONST BG_PINK						= $3000
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",390
                                	;[391] CONST BG_LIGHTBLUE					= $3200
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",391
                                	;[392] CONST BG_YELLOWGREEN				= $3400
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",392
                                	;[393] CONST BG_PURPLE						= $3600
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",393
                                	;[394] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",394
                                	;[395] CONST FGBG_CARD_DATA_MASK			= $01F8		' Mask to get the background card's data.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",395
                                	;[396] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",396
                                	;[397] REM /////////////////////////////////////////////////////////////////////////
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",397
                                	;[398] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",398
                                	;[399] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",399
                                	;[400] REM Sprites.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",400
                                	;[401] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",401
                                	;[402] REM Note: For use with "sprite" command.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",402
                                	;[403] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",403
                                	;[404] REM X
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",404
                                	;[405] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",405
                                	;[406] REM Note: Add these constants to the sprite command's X parameter.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",406
                                	;[407] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",407
                                	;[408] CONST HIT							= $0100		' Enable the sprite's collision detection.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",408
                                	;[409] CONST VISIBLE						= $0200		' Make the sprite visible.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",409
                                	;[410] CONST ZOOMX2						= $0400		' Make the sprite twice the width.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",410
                                	;[411] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",411
                                	;[412] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",412
                                	;[413] REM Y
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",413
                                	;[414] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",414
                                	;[415] REM Note: Add these constants to the sprite command's Y parameter.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",415
                                	;[416] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",416
                                	;[417] CONST DOUBLEY						= $0080		' Make a double height sprite (with 2 GRAM cards).
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",417
                                	;[418] CONST ZOOMY2						= $0100		' Make the sprite twice (x2) the normal height.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",418
                                	;[419] CONST ZOOMY4						= $0200		' Make the sprite quadruple (x4) the normal height.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",419
                                	;[420] CONST ZOOMY8						= $0300		' Make the sprite octuple (x8) the normal height.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",420
                                	;[421] CONST FLIPX							= $0400		' Flip/mirror the sprite in X.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",421
                                	;[422] CONST FLIPY							= $0800		' Flip/mirror the sprite in Y.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",422
                                	;[423] CONST MIRROR						= $0C00		' Flip/mirror the sprite in both X and Y.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",423
                                	;[424] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",424
                                	;[425] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",425
                                	;[426] REM A
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",426
                                	;[427] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",427
                                	;[428] REM Notes:
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",428
                                	;[429] REM - Combine to create the sprite command's A parameter.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",429
                                	;[430] REM - Only one colour per sprite.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",430
                                	;[431] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",431
                                	;[432] CONST GRAM							= $0800		' Sprite's data is located in GRAM.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",432
                                	;[433] CONST BEHIND						= $2000		' Sprite is behind the background.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",433
                                	;[434] CONST SPR_BLACK						= $0000
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",434
                                	;[435] CONST SPR_BLUE						= $0001
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",435
                                	;[436] CONST SPR_RED						= $0002
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",436
                                	;[437] CONST SPR_TAN						= $0003
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",437
                                	;[438] CONST SPR_DARKGREEN					= $0004
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",438
                                	;[439] CONST SPR_GREEN						= $0005
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",439
                                	;[440] CONST SPR_YELLOW					= $0006
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",440
                                	;[441] CONST SPR_WHITE						= $0007
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",441
                                	;[442] CONST SPR_GREY						= $1000
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",442
                                	;[443] CONST SPR_CYAN						= $1001
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",443
                                	;[444] CONST SPR_ORANGE					= $1002
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",444
                                	;[445] CONST SPR_BROWN						= $1003
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",445
                                	;[446] CONST SPR_PINK						= $1004
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",446
                                	;[447] CONST SPR_LIGHTBLUE					= $1005
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",447
                                	;[448] CONST SPR_YELLOWGREEN				= $1006
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",448
                                	;[449] CONST SPR_PURPLE					= $1007
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",449
                                	;[450] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",450
                                	;[451] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",451
                                	;[452] REM GRAM numbers.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",452
                                	;[453] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",453
                                	;[454] REM Note: For use in the sprite command's parameter A.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",454
                                	;[455] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",455
                                	;[456] CONST SPR00							= $0800
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",456
                                	;[457] CONST SPR01							= $0808
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",457
                                	;[458] CONST SPR02							= $0810
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",458
                                	;[459] CONST SPR03							= $0818
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",459
                                	;[460] CONST SPR04							= $0820
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",460
                                	;[461] CONST SPR05							= $0828
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",461
                                	;[462] CONST SPR06							= $0830
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",462
                                	;[463] CONST SPR07							= $0838
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",463
                                	;[464] CONST SPR08							= $0840
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",464
                                	;[465] CONST SPR09							= $0848
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",465
                                	;[466] CONST SPR10							= $0850
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",466
                                	;[467] CONST SPR11							= $0858
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",467
                                	;[468] CONST SPR12							= $0860
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",468
                                	;[469] CONST SPR13							= $0868
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",469
                                	;[470] CONST SPR14							= $0870
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",470
                                	;[471] CONST SPR15							= $0878
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",471
                                	;[472] CONST SPR16							= $0880
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",472
                                	;[473] CONST SPR17							= $0888
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",473
                                	;[474] CONST SPR18							= $0890
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",474
                                	;[475] CONST SPR19							= $0898
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",475
                                	;[476] CONST SPR20							= $08A0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",476
                                	;[477] CONST SPR21							= $08A8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",477
                                	;[478] CONST SPR22							= $08B0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",478
                                	;[479] CONST SPR23							= $08B8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",479
                                	;[480] CONST SPR24							= $08C0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",480
                                	;[481] CONST SPR25							= $08C8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",481
                                	;[482] CONST SPR26							= $08D0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",482
                                	;[483] CONST SPR27							= $08D8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",483
                                	;[484] CONST SPR28							= $08E0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",484
                                	;[485] CONST SPR29							= $08E8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",485
                                	;[486] CONST SPR30							= $08F0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",486
                                	;[487] CONST SPR31							= $08F8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",487
                                	;[488] CONST SPR32							= $0900
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",488
                                	;[489] CONST SPR33							= $0908
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",489
                                	;[490] CONST SPR34							= $0910
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",490
                                	;[491] CONST SPR35							= $0918
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",491
                                	;[492] CONST SPR36							= $0920
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",492
                                	;[493] CONST SPR37							= $0928
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",493
                                	;[494] CONST SPR38							= $0930
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",494
                                	;[495] CONST SPR39							= $0938
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",495
                                	;[496] CONST SPR40							= $0940
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",496
                                	;[497] CONST SPR41							= $0948
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",497
                                	;[498] CONST SPR42							= $0950
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",498
                                	;[499] CONST SPR43							= $0958
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",499
                                	;[500] CONST SPR44							= $0960
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",500
                                	;[501] CONST SPR45							= $0968
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",501
                                	;[502] CONST SPR46							= $0970
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",502
                                	;[503] CONST SPR47							= $0978
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",503
                                	;[504] CONST SPR48							= $0980
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",504
                                	;[505] CONST SPR49							= $0988
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",505
                                	;[506] CONST SPR50							= $0990
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",506
                                	;[507] CONST SPR51							= $0998
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",507
                                	;[508] CONST SPR52							= $09A0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",508
                                	;[509] CONST SPR53							= $09A8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",509
                                	;[510] CONST SPR54							= $09B0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",510
                                	;[511] CONST SPR55							= $09B8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",511
                                	;[512] CONST SPR56							= $09C0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",512
                                	;[513] CONST SPR57							= $09C8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",513
                                	;[514] CONST SPR58							= $09D0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",514
                                	;[515] CONST SPR59							= $09D8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",515
                                	;[516] CONST SPR60							= $09E0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",516
                                	;[517] CONST SPR61							= $09E8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",517
                                	;[518] CONST SPR62							= $09F0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",518
                                	;[519] CONST SPR63							= $09F8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",519
                                	;[520] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",520
                                	;[521] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",521
                                	;[522] REM Sprite collision.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",522
                                	;[523] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",523
                                	;[524] REM Notes:
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",524
                                	;[525] REM - For use with variables COL0, COL1, COL2, COL3, COL4, COL5, COL6 and COL7.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",525
                                	;[526] REM - More than one collision can occur simultaneously.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",526
                                	;[527] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",527
                                	;[528] CONST HIT_SPRITE0					= $0001		' Sprite collided with sprite 0.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",528
                                	;[529] CONST HIT_SPRITE1					= $0002		' Sprite collided with sprite 1.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",529
                                	;[530] CONST HIT_SPRITE2					= $0004		' Sprite collided with sprite 2.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",530
                                	;[531] CONST HIT_SPRITE3					= $0008		' Sprite collided with sprite 3.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",531
                                	;[532] CONST HIT_SPRITE4					= $0010		' Sprite collided with sprite 4.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",532
                                	;[533] CONST HIT_SPRITE5					= $0020		' Sprite collided with sprite 5.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",533
                                	;[534] CONST HIT_SPRITE6					= $0040		' Sprite collided with sprite 6.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",534
                                	;[535] CONST HIT_SPRITE7					= $0080		' Sprite collided with sprite 7.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",535
                                	;[536] CONST HIT_BACKGROUND				= $0100		' Sprite collided with a background pixel.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",536
                                	;[537] CONST HIT_BORDER					= $0200		' Sprite collided with the top/bottom/left/right border.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",537
                                	;[538] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",538
                                	;[539] REM /////////////////////////////////////////////////////////////////////////
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",539
                                	;[540] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",540
                                	;[541] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",541
                                	;[542] REM DISC - Compass.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",542
                                	;[543] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",543
                                	;[544] REM   NW         N         NE
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",544
                                	;[545] REM     \   NNW  |  NNE   /
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",545
                                	;[546] REM       \      |      /
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",546
                                	;[547] REM         \    |    /
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",547
                                	;[548] REM    WNW    \  |  /    ENE
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",548
                                	;[549] REM             \|/
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",549
                                	;[550] REM  W ----------+---------- E
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",550
                                	;[552] REM             /|REM    WSW    /  |  \    ESE
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",552
                                	;[556] REM         /    |    REM       /      |      REM     /   SSW  |  SSE   REM   SW         S         SE
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",556
                                	;[557] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",557
                                	;[558] REM Notes:
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",558
                                	;[559] REM - North points upwards on the hand controller.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",559
                                	;[560] REM - Directions are listed in a clockwise manner.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",560
                                	;[561] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",561
                                	;[562] CONST DISC_NORTH					= $0004
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",562
                                	;[563] CONST DISC_NORTH_NORTH_EAST 		= $0014
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",563
                                	;[564] CONST DISC_NORTH_EAST				= $0016
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",564
                                	;[565] CONST DISC_EAST_NORTH_EAST			= $0006
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",565
                                	;[566] CONST DISC_EAST						= $0002
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",566
                                	;[567] CONST DISC_EAST_SOUTH_EAST			= $0012
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",567
                                	;[568] CONST DISC_SOUTH_EAST				= $0013
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",568
                                	;[569] CONST DISC_SOUTH_SOUTH_EAST			= $0003
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",569
                                	;[570] CONST DISC_SOUTH					= $0001
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",570
                                	;[571] CONST DISC_SOUTH_SOUTH_WEST			= $0011
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",571
                                	;[572] CONST DISC_SOUTH_WEST				= $0019
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",572
                                	;[573] CONST DISC_WEST_SOUTH_WEST			= $0009
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",573
                                	;[574] CONST DISC_WEST						= $0008
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",574
                                	;[575] CONST DISC_WEST_NORTH_WEST			= $0018
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",575
                                	;[576] CONST DISC_NORTH_WEST				= $001C
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",576
                                	;[577] CONST DISC_NORTH_NORTH_WEST			= $000C
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",577
                                	;[578] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",578
                                	;[579] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",579
                                	;[580] REM DISC - Compass abbreviated versions.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",580
                                	;[581] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",581
                                	;[582] CONST DISC_N						= $0004
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",582
                                	;[583] CONST DISC_NNE						= $0014
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",583
                                	;[584] CONST DISC_NE						= $0016
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",584
                                	;[585] CONST DISC_ENE						= $0006
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",585
                                	;[586] CONST DISC_E						= $0002
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",586
                                	;[587] CONST DISC_ESE						= $0012
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",587
                                	;[588] CONST DISC_SE						= $0013
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",588
                                	;[589] CONST DISC_SSE						= $0003
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",589
                                	;[590] CONST DISC_S						= $0001
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",590
                                	;[591] CONST DISC_SSW						= $0011
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",591
                                	;[592] CONST DISC_SW						= $0019
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",592
                                	;[593] CONST DISC_WSW						= $0009
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",593
                                	;[594] CONST DISC_W						= $0008
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",594
                                	;[595] CONST DISC_WNW						= $0018
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",595
                                	;[596] CONST DISC_NW						= $001C
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",596
                                	;[597] CONST DISC_NNW						= $000C
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",597
                                	;[598] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",598
                                	;[599] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",599
                                	;[600] REM DISC - Directions.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",600
                                	;[601] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",601
                                	;[602] CONST DISC_UP						= $0004
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",602
                                	;[603] CONST DISC_UP_RIGHT					= $0016		' Up and right diagonal.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",603
                                	;[604] CONST DISC_RIGHT					= $0002
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",604
                                	;[605] CONST DISC_DOWN_RIGHT				= $0013		' Down  and right diagonal.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",605
                                	;[606] CONST DISC_DOWN						= $0001
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",606
                                	;[607] CONST DISC_DOWN_LEFT				= $0019		' Down and left diagonal.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",607
                                	;[608] CONST DISC_LEFT						= $0008
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",608
                                	;[609] CONST DISC_UP_LEFT					= $001C		' Up and left diagonal.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",609
                                	;[610] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",610
                                	;[611] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",611
                                	;[612] REM DISK - Mask.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",612
                                	;[613] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",613
                                	;[614] CONST DISK_MASK						= $001F
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",614
                                	;[615] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",615
                                	;[616] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",616
                                	;[617] REM Controller - Keypad.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",617
                                	;[618] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",618
                                	;[619] CONST KEYPAD_0						= 72
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",619
                                	;[620] CONST KEYPAD_1						= 129
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",620
                                	;[621] CONST KEYPAD_2						= 65
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",621
                                	;[622] CONST KEYPAD_3						= 33
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",622
                                	;[623] CONST KEYPAD_4						= 130
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",623
                                	;[624] CONST KEYPAD_5						= 66
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",624
                                	;[625] CONST KEYPAD_6						= 34
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",625
                                	;[626] CONST KEYPAD_7						= 132
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",626
                                	;[627] CONST KEYPAD_8						= 68
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",627
                                	;[628] CONST KEYPAD_9						= 36
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",628
                                	;[629] CONST KEYPAD_CLEAR					= 136
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",629
                                	;[630] CONST KEYPAD_ENTER					= 40
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",630
                                	;[631] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",631
                                	;[632] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",632
                                	;[633] REM Controller - Pause buttons (1+9 or 3+7 held down simultaneously).
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",633
                                	;[634] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",634
                                	;[635] REM Notes:
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",635
                                	;[636] REM - Key codes for 3+7 and 1+9 are the same (165).
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",636
                                	;[637] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",637
                                	;[638] CONST KEYPAD_PAUSE					= (KEYPAD_1 XOR KEYPAD_9)
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",638
                                	;[639] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",639
                                	;[640] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",640
                                	;[641] REM Controller - Side buttons.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",641
                                	;[642] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",642
                                	;[643] CONST BUTTON_TOP_LEFT				= $A0		' Top left and top right are the same button.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",643
                                	;[644] CONST BUTTON_TOP_RIGHT				= $A0		' Note: Bit 6 is low.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",644
                                	;[645] CONST BUTTON_BOTTOM_LEFT			= $60		' Note: Bit 7 is low.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",645
                                	;[646] CONST BUTTON_BOTTOM_RIGHT			= $C0		' Note: Bit 5 is low
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",646
                                	;[647] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",647
                                	;[648] REM Abbreviated versions.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",648
                                	;[649] CONST BUTTON_1						= $A0		' Top left or top right.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",649
                                	;[650] CONST BUTTON_2						= $60		' Bottom left.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",650
                                	;[651] CONST BUTTON_3						= $C0		' Bottom right.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",651
                                	;[652] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",652
                                	;[653] REM Mask.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",653
                                	;[654] CONST BUTTON_MASK					= $E0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",654
                                	;[655] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",655
                                	;[656] REM /////////////////////////////////////////////////////////////////////////
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",656
                                	;[657] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",657
                                	;[658] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",658
                                	;[659] REM Programmable Sound Generator (PSG)
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",659
                                	;[660] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",660
                                	;[661] REM Notes:
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",661
                                	;[662] REM - For use with the SOUND command
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",662
                                	;[663] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",663
                                	;[664] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",664
                                	;[665] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",665
                                	;[666] REM Internal sound hardware.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",666
                                	;[667] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",667
                                	;[668] CONST PSG_CHANNELA					= 0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",668
                                	;[669] CONST PSG_CHANNELB					= 1
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",669
                                	;[670] CONST PSG_CHANNELC					= 2
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",670
                                	;[671] CONST PSG_ENVELOPE					= 3
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",671
                                	;[672] CONST PSG_MIXER						= 4
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",672
                                	;[673] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",673
                                	;[674] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",674
                                	;[675] REM ECS sound hardware.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",675
                                	;[676] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",676
                                	;[677] CONST PSG_ECS_CHANNELA				= 5
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",677
                                	;[678] CONST PSG_ECS_CHANNELB				= 6
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",678
                                	;[679] CONST PSG_ECS_CHANNELC				= 7
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",679
                                	;[680] CONST PSG_ECS_ENVELOPE				= 8
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",680
                                	;[681] CONST PSG_ECS_MIXER					= 9
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",681
                                	;[682] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",682
                                	;[683] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",683
                                	;[684] REM PSG - Volume control.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",684
                                	;[685] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",685
                                	;[686] REM Notes:
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",686
                                	;[687] REM - For use in the volume field of the SOUND command.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",687
                                	;[688] REM - Internal channels: PSG_CHANNELA, PSG_CHANNELB, PSG_CHANNELC
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",688
                                	;[689] REM - ECS channels: PSG_ECS_CHANNELA, PSG_ECS_CHANNELB, PSG_ECS_CHANNELC
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",689
                                	;[690] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",690
                                	;[691] CONST PSG_VOLUME_MAX				= 15	' Maximum channel volume.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",691
                                	;[692] CONST PSG_ENVELOPE_ENABLE			= 48	' Channel volume is controlled by envelope generator.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",692
                                	;[693] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",693
                                	;[694] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",694
                                	;[695] REM PSG - Mixer control.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",695
                                	;[696] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",696
                                	;[697] REM Notes:
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",697
                                	;[698] REM - Internal channel: PSG_MIXER
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",698
                                	;[699] REM - ECS channel: PSG_ECS_MIXER
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",699
                                	;[700] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",700
                                	;[701] CONST PSG_TONE_CHANNELA_DISABLE		= $01	' Disable channel A tone.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",701
                                	;[702] CONST PSG_TONE_CHANNELB_DISABLE		= $02	' Disable channel B tone.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",702
                                	;[703] CONST PSG_TONE_CHANNELC_DISABLE		= $04	' Disable channel C tone.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",703
                                	;[704] CONST PSG_NOISE_CHANNELA_DISABLE	= $08	' Disable channel A noise.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",704
                                	;[705] CONST PSG_NOISE_CHANNELB_DISABLE	= $10	' Disable channel B noise.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",705
                                	;[706] CONST PSG_NOISE_CHANNELC_DISABLE	= $20	' Disable channel C noise.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",706
                                	;[707] CONST PSG_MIXER_DEFAULT				= $38 	' All notes enabled. all noise disabled.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",707
                                	;[708] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",708
                                	;[709] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",709
                                	;[710] REM PSG - Envelope control.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",710
                                	;[711] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",711
                                	;[712] REM Notes:
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",712
                                	;[713] REM - Internal channel: PSG_ENVELOPE
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",713
                                	;[714] REM - ECS channel: PSG_ECS_ENVELOPE
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",714
                                	;[715] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",715
                                	;[716] CONST PSG_ENVELOPE_HOLD								= $01
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",716
                                	;[717] CONST PSG_ENVELOPE_ALTERNATE						= $02
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",717
                                	;[718] CONST PSG_ENVELOPE_ATTACK							= $04
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",718
                                	;[719] CONST PSG_ENVELOPE_CONTINUE							= $08
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",719
                                	;[720] CONST PSG_ENVELOPE_SINGLE_SHOT_RAMP_DOWN_AND_OFF	= $00 '\______
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",720
                                	;[721] CONST PSG_ENVELOPE_SINGLE_SHOT_RAMP_UP_AND_OFF		= $04 '/______
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",721
                                	;[724] CONST PSG_ENVELOPE_CYCLE_RAMP_DOWN_SAWTOOTH			= $08 '\\\\\\CONST PSG_ENVELOPE_CYCLE_RAMP_DOWN_TRIANGLE			= $0A '\/\/\/CONST PSG_ENVELOPE_SINGLE_SHOT_RAMP_DOWN_AND_MAX	= $0B '\^^^^^^
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",724
                                	;[725] CONST PSG_ENVELOPE_CYCLE_RAMP_UP_SAWTOOTH			= $0C '///////
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",725
                                	;[726] CONST PSG_ENVELOPE_SINGLE_SHOT_RAMP_UP_AND_MAX		= $0D '/^^^^^^
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",726
                                	;[727] CONST PSG_ENVELOPE_CYCLE_RAMP_UP_TRIANGLE			= $0E '/\/\/\/
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",727
                                	;[728] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",728
                                	;[729] REM /////////////////////////////////////////////////////////////////////////
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",729
                                	;[730] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",730
                                	;[731] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",731
                                	;[732] REM Useful functions.
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",732
                                	;[733] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",733
                                	;[734] DEF FN screenpos(aColumn, aRow)				=               (((aRow)*BACKGROUND_COLUMNS)+(aColumn))
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",734
                                	;[735] DEF FN screenaddr(aColumn, aRow)			= (BACKTAB_ADDR+(((aRow)*BACKGROUND_COLUMNS)+(aColumn)))
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",735
                                	;[736] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",736
                                	;[737] DEF FN setspritex(aSpriteNo,anXPosition)	= #mobshadow(aSpriteNo  )=(#mobshadow(aSpriteNo  ) and $ff00)+anXPosition
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",737
                                	;[738] DEF FN setspritey(aSpriteNo,aYPosition)		= #mobshadow(aSpriteNo+8)=(#mobshadow(aSpriteNo+8) and $ff80)+aYPosition
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",738
                                	;[739] DEF FN resetsprite(aSpriteNo)				= sprite aSpriteNo, 0, 0, 0
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",739
                                	;[740] DEF FN togglespritevisible(aSpriteNo)		= #mobshadow(aSpriteNo   )=#mobshadow(aSpriteNo)    xor VISIBLE
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",740
                                	;[741] DEF FN togglespritehit(aSpriteNo)			= #mobshadow(aSpriteNo   )=#mobshadow(aSpriteNo)    xor HIT
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",741
                                	;[742] DEF FN togglespritebehind(aSpriteNo)		= #mobshadow(aSpriteNo+16)=#mobshadow(aSpriteNo+16) xor BEHIND
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",742
                                	;[743] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",743
                                	;[744] REM /////////////////////////////////////////////////////////////////////////
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",744
                                	;[745] 
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",745
                                	;[746] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",746
                                	;[747] REM END
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",747
                                	;[748] REM -------------------------------------------------------------------------
                                	SRCFILE "C:\IntyBASIC SDK\lib\constants.bas",748
                                	;ENDFILE
                                	;FILE C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS
                                	;[18] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",18
                                	;[19] CONST CARD_WIDTH       = 8		' Width of a background card, in pixels
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",19
                                	;[20] CONST CARD_HEIGHT      = 8		' Height of a background card, in pixels
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",20
                                	;[21] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",21
                                	;[22] dim objectX(3), objectY(3), object(3)
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",22
                                	;[23] dim #objectColor(4)
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",23
                                	;[24] ' 0 = nothing
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",24
                                	;[25] ' 1 = rock
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",25
                                	;[26] ' 2 = coin
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",26
                                	;[27] ' 3 = apple (extra live)
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",27
                                	;[28] ' 4 - 6 = power up
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",28
                                	;[29] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",29
                                	;[30] #objectColor(0) = SPR_GREEN
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",30
5084   02B8 0005                	MVII #5,R0
5086   0240 030C                	MVO R0,Q6
                                	;[31] #objectColor(1) = SPR_GREY
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",31
5088   02B8 1000                	MVII #4096,R0
508A   0240 030D                	MVO R0,Q6+1
                                	;[32] #objectColor(2) = SPR_YELLOW
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",32
508C   02B8 0006                	MVII #6,R0
508E   0240 030E                	MVO R0,Q6+2
                                	;[33] #objectColor(3) = SPR_RED
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",33
5090   02B8 0002                	MVII #2,R0
5092   0240 030F                	MVO R0,Q6+3
                                	;[34] #objectColor(4) = SPR_BLUE
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",34
5094   02B8 0001                	MVII #1,R0
5096   0240 0310                	MVO R0,Q6+4
                                	;[35] #objectColor(5) = SPR_BLACK
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",35
5098   01C0                     	CLRR R0
5099   0240 0311                	MVO R0,Q6+5
                                	;[36] #objectColor(6) = SPR_GREEN
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",36
509B   02B8 0005                	MVII #5,R0
509D   0240 0312                	MVO R0,Q6+6
                                	;[37] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",37
                                	;[38] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",38
                                	;[39] objectX(0) = 4
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",39
509F   02B8 0004                	MVII #4,R0
50A1   0240 0121                	MVO R0,Q3
                                	;[40] objectX(1) = 7
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",40
50A3   02B8 0007                	MVII #7,R0
50A5   0240 0122                	MVO R0,Q3+1
                                	;[41] objectX(2) = 9
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",41
50A7   02B8 0009                	MVII #9,R0
50A9   0240 0123                	MVO R0,Q3+2
                                	;[42] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",42
                                	;[43] for a = 0 to 2
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",43
50AB   01C0                     	CLRR R0
50AC   0240 010C                	MVO R0,V1
0x50AE                          T1:
                                	;[44]     objectY(a) = random(3)
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",44
50AE   02B9 0003                	MVII #3,R1
50B0   0004 0160 03FD           	CALL _next_random
50B3   0004 0164 0329           	CALL qs_mpy8
50B6   0040                     	SWAP R0
50B7   03B8 00FF                	ANDI #255,R0
50B9   02BB 0124                	MVII #Q4,R3
50BB   02C3 010C                	ADD V1,R3
50BD   0258                     	MVO@ R0,R3
                                	;[45] 	object(a) = 2
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",45
50BE   02B8 0002                	MVII #2,R0
50C0   02FB FFFA                	ADDI #(Q5-Q4) AND $FFFF,R3
50C2   0258                     	MVO@ R0,R3
                                	;[46] next a
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",46
50C3   0280 010C                	MVI V1,R0
50C5   0008                     	INCR R0
50C6   0240 010C                	MVO R0,V1
50C8   0378 0002                	CMPI #2,R0
50CA   0226 001D                	BLE T1
                                	;[47] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",47
                                	;[48] playerX = random(3)
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",48
50CC   02B9 0003                	MVII #3,R1
50CE   0004 0160 03FD           	CALL _next_random
50D1   0004 0164 0329           	CALL qs_mpy8
50D4   0040                     	SWAP R0
50D5   03B8 00FF                	ANDI #255,R0
50D7   0240 0119                	MVO R0,V2
                                	;[49] #playerColor = SPR_RED
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",49
50D9   02B8 0002                	MVII #2,R0
50DB   0240 0309                	MVO R0,V3
                                	;[50] playerDX = 1
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",50
50DD   02B8 0001                	MVII #1,R0
50DF   0240 0117                	MVO R0,V4
                                	;[51] playerY = 10
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",51
50E1   02B8 000A                	MVII #10,R0
50E3   0240 011A                	MVO R0,V5
                                	;[52] playerF = 2
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",52
50E5   02B8 0002                	MVII #2,R0
50E7   0240 0118                	MVO R0,V6
                                	;[53] invisible = 0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",53
50E9   01C0                     	CLRR R0
50EA   0240 0113                	MVO R0,V7
                                	;[54] bonus_exp = 0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",54
50EC   0240 010D                	MVO R0,V8
                                	;[55] bonus_lives = 0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",55
50EE   0034                     	NOP
50EF   0240 010E                	MVO R0,V9
                                	;[56] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",56
                                	;[57] chance = 0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",57
50F1   0240 010F                	MVO R0,V10
                                	;[58] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",58
                                	;[59] 'Level ajustament
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",59
                                	;[60] dificulty = 1
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",60
50F3   02B8 0001                	MVII #1,R0
50F5   0240 0110                	MVO R0,V11
                                	;[61] #maximunScore = 100
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",61
50F7   02B8 0064                	MVII #100,R0
50F9   0240 0308                	MVO R0,V12
                                	;[62] dim percentage(5)
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",62
                                	;[63] percentage(0) = 48/100
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",63
50FB   01C0                     	CLRR R0
50FC   0240 0127                	MVO R0,Q7
                                	;[64] percentage(1) = 23/100
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",64
50FE   0240 0128                	MVO R0,Q7+1
                                	;[65] percentage(2) = 23/100
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",65
5100   0034                     	NOP
5101   0240 0129                	MVO R0,Q7+2
                                	;[66] percentage(3) = 4/100
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",66
5103   0240 012A                	MVO R0,Q7+3
                                	;[67] percentage(4) = 2/100
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",67
5105   0034                     	NOP
5106   0240 012B                	MVO R0,Q7+4
                                	;[68] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",68
                                	;[69] highestDifficulty = 7
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",69
5108   02B8 0007                	MVII #7,R0
510A   0240 0112                	MVO R0,V13
                                	;[70] scene = 0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",70
510C   01C0                     	CLRR R0
510D   0240 011C                	MVO R0,V14
                                	;[71] jump = 0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",71
510F   0240 0114                	MVO R0,V15
                                	;[72] #score = 0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",72
5111   0034                     	NOP
5112   0240 030A                	MVO R0,V16
                                	;[73] heartrate = 0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",73
5114   0240 0111                	MVO R0,V17
                                	;[74] lives = 3
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",74
5116   02B8 0003                	MVII #3,R0
5118   0240 0116                	MVO R0,V18
                                	;[75] level = 1
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",75
511A   02B8 0001                	MVII #1,R0
511C   0240 0115                	MVO R0,V19
                                	;[76] #univclock=0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",76
511E   01C0                     	CLRR R0
511F   0240 030B                	MVO R0,V20
                                	;[77] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",77
                                	;[78] street_lineY = 0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",78
5121   0240 011D                	MVO R0,V21
                                	;[79] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",79
                                	;[80] MODE   SCREEN_COLOR_STACK, STACK_GREEN, STACK_BLACK, STACK_GREEN, STACK_BLACK
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",80
5123   02B8 5005                	MVII #20485,R0
5125   0240 033F                	MVO R0,_color
5127   02B8 0002                	MVII #2,R0
5129   0240 0109                	MVO R0,_mode_select
                                	;[81] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",81
                                	;[82] wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",82
512B   0004 0160 031A           	CALL _wait
                                	;[83] DEFINE 0,16,screen_bitmaps_0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",83
512E   01C0                     	CLRR R0
512F   0240 0105                	MVO R0,_gram_target
5131   02B8 0010                	MVII #16,R0
5133   0240 0106                	MVO R0,_gram_total
5135   02B8 613A                	MVII #Q8,R0
5137   0240 033C                	MVO R0,_gram_bitmap
                                	;[84] wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",84
5139   0004 0160 031A           	CALL _wait
                                	;[85] DEFINE 16,16,screen_bitmaps_1
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",85
513C   02B8 0010                	MVII #16,R0
513E   0240 0105                	MVO R0,_gram_target
5140   0240 0106                	MVO R0,_gram_total
5142   02B8 617A                	MVII #Q9,R0
5144   0240 033C                	MVO R0,_gram_bitmap
                                	;[86] wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",86
5146   0004 0160 031A           	CALL _wait
                                	;[87] DEFINE 32,16,screen_bitmaps_2
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",87
5149   02B8 0020                	MVII #32,R0
514B   0240 0105                	MVO R0,_gram_target
514D   02B8 0010                	MVII #16,R0
514F   0240 0106                	MVO R0,_gram_total
5151   02B8 61BA                	MVII #Q10,R0
5153   0240 033C                	MVO R0,_gram_bitmap
                                	;[88] wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",88
5155   0004 0160 031A           	CALL _wait
                                	;[89] DEFINE 48,4,screen_bitmaps_3
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",89
5158   02B8 0030                	MVII #48,R0
515A   0240 0105                	MVO R0,_gram_target
515C   02B8 0004                	MVII #4,R0
515E   0240 0106                	MVO R0,_gram_total
5160   02B8 61FA                	MVII #Q11,R0
5162   0240 033C                	MVO R0,_gram_bitmap
                                	;[90] wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",90
5164   0004 0160 031A           	CALL _wait
                                	;[91] define 52,5, player
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",91
5167   02B8 0034                	MVII #52,R0
5169   0240 0105                	MVO R0,_gram_target
516B   02B8 0005                	MVII #5,R0
516D   0240 0106                	MVO R0,_gram_total
516F   02B8 6102                	MVII #Q12,R0
5171   0240 033C                	MVO R0,_gram_bitmap
                                	;[92] wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",92
5173   0004 0160 031A           	CALL _wait
                                	;[93] define 57,2, tiles
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",93
5176   02B8 0039                	MVII #57,R0
5178   0240 0105                	MVO R0,_gram_target
517A   02B8 0002                	MVII #2,R0
517C   0240 0106                	MVO R0,_gram_total
517E   02B8 6116                	MVII #Q13,R0
5180   0240 033C                	MVO R0,_gram_bitmap
                                	;[94] wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",94
5182   0004 0160 031A           	CALL _wait
                                	;[95] define 59,3, street
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",95
5185   02B8 003B                	MVII #59,R0
5187   0240 0105                	MVO R0,_gram_target
5189   02B8 0003                	MVII #3,R0
518B   0240 0106                	MVO R0,_gram_total
518D   02B8 611E                	MVII #Q14,R0
518F   0240 033C                	MVO R0,_gram_bitmap
                                	;[96] wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",96
5191   0004 0160 031A           	CALL _wait
                                	;[97] define 62,1, nothing
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",97
5194   02B8 003E                	MVII #62,R0
5196   0240 0105                	MVO R0,_gram_target
5198   02B8 0001                	MVII #1,R0
519A   0240 0106                	MVO R0,_gram_total
519C   02B8 612E                	MVII #Q15,R0
519E   0240 033C                	MVO R0,_gram_bitmap
                                	;[98] wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",98
51A0   0004 0160 031A           	CALL _wait
                                	;[99] define 63,1, rock
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",99
51A3   02B8 003F                	MVII #63,R0
51A5   0240 0105                	MVO R0,_gram_target
51A7   02B8 0001                	MVII #1,R0
51A9   0240 0106                	MVO R0,_gram_total
51AB   02B8 6132                	MVII #Q16,R0
51AD   0240 033C                	MVO R0,_gram_bitmap
                                	;[100] wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",100
51AF   0004 0160 031A           	CALL _wait
                                	;[101] define 64,1, coin
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",101
51B2   02B8 0040                	MVII #64,R0
51B4   0240 0105                	MVO R0,_gram_target
51B6   02B8 0001                	MVII #1,R0
51B8   0240 0106                	MVO R0,_gram_total
51BA   02B8 6136                	MVII #Q17,R0
51BC   0240 033C                	MVO R0,_gram_bitmap
                                	;[102] wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",102
51BE   0004 0160 031A           	CALL _wait
                                	;[103] define 65,1, apple
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",103
51C1   02B8 0041                	MVII #65,R0
51C3   0240 0105                	MVO R0,_gram_target
51C5   02B8 0001                	MVII #1,R0
51C7   0240 0106                	MVO R0,_gram_total
51C9   02B8 612A                	MVII #Q18,R0
51CB   0240 033C                	MVO R0,_gram_bitmap
                                	;[104] wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",104
51CD   0004 0160 031A           	CALL _wait
                                	;[105] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",105
                                	;[106] DEF FN SpritePosX(aColumn, anOffset) = ((aColumn + 1) * CARD_WIDTH ) + anOffset
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",106
                                	;[107] DEF FN SpritePosY(aRow, anOffset)    = ((aRow    + 1) * CARD_HEIGHT) + anOffset
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",107
                                	;[108] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",108
                                	;[109] cls
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",109
51D0   0004 0150 0014           	CALL CLRSCR
                                	;[110] main:
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",110
                                	; MAIN
0x51D3                          Q19:	;[111] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",111
                                	;[112] 	IF scene = 0 THEN GOSUB scene1
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",112
51D3   0280 011C                	MVI V14,R0
51D5   0080                     	TSTR R0
51D6   020C 0003                	BNE T2
51D8   0004 0150 01FD           	CALL Q20
0x51DB                          T2:
                                	;[113] 	IF scene = 1 THEN GOSUB scene2
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",113
51DB   0280 011C                	MVI V14,R0
51DD   0378 0001                	CMPI #1,R0
51DF   020C 0003                	BNE T3
51E1   0004 0150 039E           	CALL Q21
0x51E4                          T3:
                                	;[114] 	IF scene = 2 THEN GOSUB scene3
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",114
51E4   0280 011C                	MVI V14,R0
51E6   0378 0002                	CMPI #2,R0
51E8   020C 0003                	BNE T4
51EA   0004 0150 03EC           	CALL Q22
0x51ED                          T4:
                                	;[115] 	IF scene = 3 THEN GOSUB scene4
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",115
51ED   0280 011C                	MVI V14,R0
51EF   0378 0003                	CMPI #3,R0
51F1   020C 0003                	BNE T5
51F3   0004 0154 01DF           	CALL Q23
0x51F6                          T5:
                                	;[116] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",116
                                	;[117] 	#univclock = #univclock + 1
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",117
51F6   0280 030B                	MVI V20,R0
51F8   0008                     	INCR R0
51F9   0240 030B                	MVO R0,V20
                                	;[118] goto main
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",118
51FB   0220 0029                	B Q19
                                	;[119] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",119
                                	;[120] scene1: procedure
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",120
                                	; SCENE1
0x51FD                          Q20:	PROC
51FD   0275                     	BEGIN
                                	;[121] 	wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",121
51FE   0004 0160 031A           	CALL _wait
                                	;[122] 	print at SCREENPOS(1, 0) color CS_WHITE,"- RunnerZ"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",122
5201   02B8 0201                	MVII #513,R0
5203   0240 033E                	MVO R0,_screen
5205   02B8 0007                	MVII #7,R0
5207   0240 033F                	MVO R0,_color
5209   0284 033E                	MVI _screen,R4
520B   02B8 0068                	MVII #104,R0
520D   03C0 033F                	XOR _color,R0
520F   0260                     	MVO@ R0,R4
5210   03F8 0068                	XORI #104,R0
5212   0260                     	MVO@ R0,R4
5213   03F8 0190                	XORI #400,R0
5215   0260                     	MVO@ R0,R4
5216   03F8 0338                	XORI #824,R0
5218   0260                     	MVO@ R0,R4
5219   03F8 00D8                	XORI #216,R0
521B   0260                     	MVO@ R0,R4
521C   0260                     	MVO@ R0,R4
521D   03F8 0058                	XORI #88,R0
521F   0260                     	MVO@ R0,R4
5220   03F8 00B8                	XORI #184,R0
5222   0260                     	MVO@ R0,R4
5223   03F8 0340                	XORI #832,R0
5225   0260                     	MVO@ R0,R4
5226   0244 033E                	MVO R4,_screen
                                	;[123] 	print at SCREENPOS(1, 1) color CS_WHITE,"- v0.5"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",123
5228   02B8 0215                	MVII #533,R0
522A   0240 033E                	MVO R0,_screen
522C   02B8 0007                	MVII #7,R0
522E   0240 033F                	MVO R0,_color
5230   0284 033E                	MVI _screen,R4
5232   02B8 0068                	MVII #104,R0
5234   03C0 033F                	XOR _color,R0
5236   0260                     	MVO@ R0,R4
5237   03F8 0068                	XORI #104,R0
5239   0260                     	MVO@ R0,R4
523A   03F8 02B0                	XORI #688,R0
523C   0260                     	MVO@ R0,R4
523D   03F8 0230                	XORI #560,R0
523F   0260                     	MVO@ R0,R4
5240   03F8 00F0                	XORI #240,R0
5242   0260                     	MVO@ R0,R4
5243   03F8 00D8                	XORI #216,R0
5245   0260                     	MVO@ R0,R4
5246   0244 033E                	MVO R4,_screen
                                	;[124] 	print at SCREENPOS(1, 2) color CS_WHITE,"- Made by: Josue"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",124
5248   02B8 0229                	MVII #553,R0
524A   0240 033E                	MVO R0,_screen
524C   02B8 0007                	MVII #7,R0
524E   0240 033F                	MVO R0,_color
5250   0284 033E                	MVI _screen,R4
5252   02B8 0068                	MVII #104,R0
5254   03C0 033F                	XOR _color,R0
5256   0260                     	MVO@ R0,R4
5257   03F8 0068                	XORI #104,R0
5259   0260                     	MVO@ R0,R4
525A   03F8 0168                	XORI #360,R0
525C   0260                     	MVO@ R0,R4
525D   03F8 0360                	XORI #864,R0
525F   0260                     	MVO@ R0,R4
5260   03F8 0028                	XORI #40,R0
5262   0260                     	MVO@ R0,R4
5263   03F8 0008                	XORI #8,R0
5265   0260                     	MVO@ R0,R4
5266   03F8 0228                	XORI #552,R0
5268   0260                     	MVO@ R0,R4
5269   03F8 0210                	XORI #528,R0
526B   0260                     	MVO@ R0,R4
526C   03F8 00D8                	XORI #216,R0
526E   0260                     	MVO@ R0,R4
526F   03F8 0218                	XORI #536,R0
5271   0260                     	MVO@ R0,R4
5272   03F8 00D0                	XORI #208,R0
5274   0260                     	MVO@ R0,R4
5275   03F8 0150                	XORI #336,R0
5277   0260                     	MVO@ R0,R4
5278   03F8 0328                	XORI #808,R0
527A   0260                     	MVO@ R0,R4
527B   03F8 00E0                	XORI #224,R0
527D   0260                     	MVO@ R0,R4
527E   03F8 0030                	XORI #48,R0
5280   0260                     	MVO@ R0,R4
5281   03F8 0080                	XORI #128,R0
5283   0260                     	MVO@ R0,R4
5284   0244 033E                	MVO R4,_screen
                                	;[125] 	print at SCREENPOS(1, 3) color CS_WHITE,"- Github: JosueCom"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",125
5286   02B8 023D                	MVII #573,R0
5288   0240 033E                	MVO R0,_screen
528A   02B8 0007                	MVII #7,R0
528C   0240 033F                	MVO R0,_color
528E   0284 033E                	MVI _screen,R4
5290   02B8 0068                	MVII #104,R0
5292   03C0 033F                	XOR _color,R0
5294   0260                     	MVO@ R0,R4
5295   03F8 0068                	XORI #104,R0
5297   0260                     	MVO@ R0,R4
5298   03F8 0138                	XORI #312,R0
529A   0260                     	MVO@ R0,R4
529B   03F8 0370                	XORI #880,R0
529D   0260                     	MVO@ R0,R4
529E   03F8 00E8                	XORI #232,R0
52A0   0260                     	MVO@ R0,R4
52A1   03F8 00E0                	XORI #224,R0
52A3   0260                     	MVO@ R0,R4
52A4   03F8 00E8                	XORI #232,R0
52A6   0260                     	MVO@ R0,R4
52A7   03F8 00B8                	XORI #184,R0
52A9   0260                     	MVO@ R0,R4
52AA   03F8 02C0                	XORI #704,R0
52AC   0260                     	MVO@ R0,R4
52AD   03F8 00D0                	XORI #208,R0
52AF   0260                     	MVO@ R0,R4
52B0   03F8 0150                	XORI #336,R0
52B2   0260                     	MVO@ R0,R4
52B3   03F8 0328                	XORI #808,R0
52B5   0260                     	MVO@ R0,R4
52B6   03F8 00E0                	XORI #224,R0
52B8   0260                     	MVO@ R0,R4
52B9   03F8 0030                	XORI #48,R0
52BB   0260                     	MVO@ R0,R4
52BC   03F8 0080                	XORI #128,R0
52BE   0260                     	MVO@ R0,R4
52BF   03F8 0330                	XORI #816,R0
52C1   0260                     	MVO@ R0,R4
52C2   03F8 0360                	XORI #864,R0
52C4   0260                     	MVO@ R0,R4
52C5   03F8 0010                	XORI #16,R0
52C7   0260                     	MVO@ R0,R4
52C8   0244 033E                	MVO R4,_screen
                                	;[126] 	print at SCREENPOS(0, 10) color CS_WHITE, "'Right' to continue"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",126
52CA   02B8 02C8                	MVII #712,R0
52CC   0240 033E                	MVO R0,_screen
52CE   02B8 0007                	MVII #7,R0
52D0   0240 033F                	MVO R0,_color
52D2   0284 033E                	MVI _screen,R4
52D4   02B8 0038                	MVII #56,R0
52D6   03C0 033F                	XOR _color,R0
52D8   0260                     	MVO@ R0,R4
52D9   03F8 01A8                	XORI #424,R0
52DB   0260                     	MVO@ R0,R4
52DC   03F8 03D8                	XORI #984,R0
52DE   0260                     	MVO@ R0,R4
52DF   03F8 0070                	XORI #112,R0
52E1   0260                     	MVO@ R0,R4
52E2   03F8 0078                	XORI #120,R0
52E4   0260                     	MVO@ R0,R4
52E5   03F8 00E0                	XORI #224,R0
52E7   0260                     	MVO@ R0,R4
52E8   03F8 0298                	XORI #664,R0
52EA   0260                     	MVO@ R0,R4
52EB   03F8 0038                	XORI #56,R0
52ED   0260                     	MVO@ R0,R4
52EE   03F8 02A0                	XORI #672,R0
52F0   0260                     	MVO@ R0,R4
52F1   03F8 00D8                	XORI #216,R0
52F3   0260                     	MVO@ R0,R4
52F4   03F8 0278                	XORI #632,R0
52F6   0260                     	MVO@ R0,R4
52F7   03F8 0218                	XORI #536,R0
52F9   0260                     	MVO@ R0,R4
52FA   03F8 0060                	XORI #96,R0
52FC   0260                     	MVO@ R0,R4
52FD   03F8 0008                	XORI #8,R0
52FF   0260                     	MVO@ R0,R4
5300   03F8 00D0                	XORI #208,R0
5302   0260                     	MVO@ R0,R4
5303   03F8 00E8                	XORI #232,R0
5305   0260                     	MVO@ R0,R4
5306   03F8 0038                	XORI #56,R0
5308   0260                     	MVO@ R0,R4
5309   03F8 00D8                	XORI #216,R0
530B   0260                     	MVO@ R0,R4
530C   03F8 0080                	XORI #128,R0
530E   0260                     	MVO@ R0,R4
530F   0244 033E                	MVO R4,_screen
                                	;[127] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",127
                                	;[128] 	if #univclock%15 = 0 then heartrate = (heartrate + 1) % 2 : playerF = playerF + playerDX : if playerF >= 4 OR playerF <= 0 then playerDX = playerDX * -1
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",128
5311   0280 030B                	MVI V20,R0
0x5313                          T7:
5313   0338 000F                	SUBI #15,R0
5315   0221 0003                	BC T7
5317   02F8 000F                	ADDI #15,R0
5319   020C 003B                	BNE T6
531B   0280 0111                	MVI V17,R0
531D   0008                     	INCR R0
531E   03B8 0001                	ANDI #1,R0
5320   0240 0111                	MVO R0,V17
5322   0280 0118                	MVI V6,R0
5324   02C0 0117                	ADD V4,R0
5326   0240 0118                	MVO R0,V6
5328   0280 0118                	MVI V6,R0
532A   0378 0004                	CMPI #4,R0
532C   02B8 FFFF                	MVII #-1,R0
532E   020D 0001                	BGE $+3
5330   0008                     	INCR R0
5331   0281 0118                	MVI V6,R1
5333   0379 0000                	CMPI #0,R1
5335   02B9 FFFF                	MVII #-1,R1
5337   0206 0001                	BLE $+3
5339   0009                     	INCR R1
533A   0019                     	COMR R1
533B   0188                     	ANDR R1,R0
533C   0019                     	COMR R1
533D   01C8                     	XORR R1,R0
533E   0204 0016                	BEQ T8
5340   0280 0117                	MVI V4,R0
5342   02BD FFFF                	MVII #65535,R5
5344   01E4                     	CLRR R4
5345   0006                     	CLRC
5346   0070                     	RRC R0,1
5347   0204 0007                	BEQ T10
0x5349                          T9:
5349   0209 0001                	BNC $+3
534B   00EC                     	ADDR R5,R4
534C   00ED                     	ADDR R5,R5
534D   0078                     	SARC R0,1
534E   022C 0006                	BNE T9
0x5350                          T10:
5350   0209 0001                	BNC $+3
5352   00EC                     	ADDR R5,R4
5353   00A0                     	MOVR R4,R0
5354   0240 0117                	MVO R0,V4
0x5356                          T8:
0x5356                          T6:
                                	;[129] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",129
                                	;[130] 	SPRITE 0, SpritePosX(9, 0) + VISIBLE + ZOOMX2, SpritePosY(5, 0) + VISIBLE + ZOOMY2, SPR52 + (8)*playerF + SPR_RED
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",130
5356   02B8 0650                	MVII #1616,R0
5358   0240 0340                	MVO R0,_mobs
535A   02B8 0330                	MVII #816,R0
535C   0240 0348                	MVO R0,_mobs+8
535E   0280 0118                	MVI V6,R0
5360   004C                     	SLL R0,2
5361   00C0                     	ADDR R0,R0
5362   02F8 09A2                	ADDI #2466,R0
5364   0240 0350                	MVO R0,_mobs+16
                                	;[131] 	if heartrate then print at SCREENPOS(19, 11) color CS_WHITE,">" else print at SCREENPOS(19, 11) color CS_WHITE," "
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",131
5366   0280 0111                	MVI V17,R0
5368   0080                     	TSTR R0
5369   0204 0013                	BEQ T11
536B   02B8 02EF                	MVII #751,R0
536D   0240 033E                	MVO R0,_screen
536F   02B8 0007                	MVII #7,R0
5371   0240 033F                	MVO R0,_color
5373   0284 033E                	MVI _screen,R4
5375   02B8 00F0                	MVII #240,R0
5377   03C0 033F                	XOR _color,R0
5379   0260                     	MVO@ R0,R4
537A   0244 033E                	MVO R4,_screen
537C   0200 000D                	B T12
0x537E                          T11:
537E   02B8 02EF                	MVII #751,R0
5380   0240 033E                	MVO R0,_screen
5382   02B8 0007                	MVII #7,R0
5384   0240 033F                	MVO R0,_color
5386   0284 033E                	MVI _screen,R4
5388   0260                     	MVO@ R0,R4
5389   0244 033E                	MVO R4,_screen
0x538B                          T12:
                                	;[132] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",132
                                	;[133] 	IF cont1.right THEN scene = 1: mode 1 : gosub levelupAnimation
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",133
538B   0280 01FF                	MVI 511,R0
538D   0018                     	COMR R0
538E   03B8 0002                	ANDI #2,R0
5390   0204 000B                	BEQ T13
5392   02B8 0001                	MVII #1,R0
5394   0240 011C                	MVO R0,V14
5396   02B8 0003                	MVII #3,R0
5398   0240 0109                	MVO R0,_mode_select
539A   0004 0154 03B6           	CALL Q25
0x539D                          T13:
                                	;[134] 	return
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",134
539D   02B7                     	RETURN
                                	;[135] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",135
                                	;[136] end
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",136
                                	ENDP
                                	;[137] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",137
                                	;[138] scene2: procedure
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",138
                                	; SCENE2
0x539E                          Q21:	PROC
539E   0275                     	BEGIN
                                	;[139] 	SCREEN screen_cards
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",139
539F   02BB 61FE                	MVII #Q27,R3
53A1   02BA 0200                	MVII #512,R2
53A3   02B9 0014                	MVII #20,R1
53A5   02B8 000C                	MVII #12,R0
53A7   0004 0160 0308           	CALL CPYBLK
                                	;[140] 	gosub determinelevel
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",140
53AA   0004 015C 0231           	CALL Q28
                                	;[141] 	gosub background
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",141
53AD   0004 015C 0373           	CALL Q29
                                	;[142] 	gosub drawObjects
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",142
53B0   0004 0158 025E           	CALL Q30
                                	;[143] 	gosub drawPlayer
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",143
53B3   0004 0158 030D           	CALL Q31
                                	;[144] 	'IF FRAME AND 1 THEN GOSUB move_player
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",144
                                	;[145] 	'IF FRAME AND 1 THEN GOSUB enemy
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",145
                                	;[146] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",146
                                	;[147] 	if lives <= 0 then gosub clearAll : gosub clearPower : scene = 2
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",147
53B6   0280 0116                	MVI V18,R0
53B8   0378 0000                	CMPI #0,R0
53BA   020E 000A                	BGT T14
53BC   0004 015C 03D5           	CALL Q32
53BF   0004 0160 0016           	CALL Q33
53C2   02B8 0002                	MVII #2,R0
53C4   0240 011C                	MVO R0,V14
0x53C6                          T14:
                                	;[148] 	if lives > 99 then lives = 10 : invisible = 100
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",148
53C6   0280 0116                	MVI V18,R0
53C8   0378 0063                	CMPI #99,R0
53CA   0206 0008                	BLE T15
53CC   02B8 000A                	MVII #10,R0
53CE   0240 0116                	MVO R0,V18
53D0   02B8 0064                	MVII #100,R0
53D2   0240 0113                	MVO R0,V7
0x53D4                          T15:
                                	;[149] 	if #score >= #maximunScore then level = level + 1 : gosub clearPower : #score = 0 : gosub levelupAnimation
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",149
53D4   0280 030A                	MVI V16,R0
53D6   0340 0308                	CMP V12,R0
53D8   0205 000E                	BLT T16
53DA   0280 0115                	MVI V19,R0
53DC   0008                     	INCR R0
53DD   0240 0115                	MVO R0,V19
53DF   0004 0160 0016           	CALL Q33
53E2   01C0                     	CLRR R0
53E3   0240 030A                	MVO R0,V16
53E5   0004 0154 03B6           	CALL Q25
0x53E8                          T16:
                                	;[150] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",150
                                	;[151] 	wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",151
53E8   0004 0160 031A           	CALL _wait
                                	;[152] 	return
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",152
53EB   02B7                     	RETURN
                                	;[153] end
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",153
                                	ENDP
                                	;[154] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",154
                                	;[155] scene3: procedure
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",155
                                	; SCENE3
0x53EC                          Q22:	PROC
53EC   0275                     	BEGIN
                                	;[156] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",156
                                	;[157] 	MODE   SCREEN_COLOR_STACK, STACK_BLACK, STACK_BLACK, STACK_GREEN, STACK_BLACK
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",157
53ED   02B8 5000                	MVII #20480,R0
53EF   0240 033F                	MVO R0,_color
53F1   02B8 0002                	MVII #2,R0
53F3   0240 0109                	MVO R0,_mode_select
                                	;[158] 	wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",158
53F5   0004 0160 031A           	CALL _wait
                                	;[159] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",159
                                	;[160] 	print at SCREENPOS(2, 2) color CS_BLUE,"Made by: Josue"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",160
53F8   02B8 022A                	MVII #554,R0
53FA   0240 033E                	MVO R0,_screen
53FC   02B8 0001                	MVII #1,R0
53FE   0240 033F                	MVO R0,_color
5400   0284 033E                	MVI _screen,R4
5402   02B8 0168                	MVII #360,R0
5404   03C0 033F                	XOR _color,R0
5406   0260                     	MVO@ R0,R4
5407   03F8 0360                	XORI #864,R0
5409   0260                     	MVO@ R0,R4
540A   03F8 0028                	XORI #40,R0
540C   0260                     	MVO@ R0,R4
540D   03F8 0008                	XORI #8,R0
540F   0260                     	MVO@ R0,R4
5410   03F8 0228                	XORI #552,R0
5412   0260                     	MVO@ R0,R4
5413   03F8 0210                	XORI #528,R0
5415   0260                     	MVO@ R0,R4
5416   03F8 00D8                	XORI #216,R0
5418   0260                     	MVO@ R0,R4
5419   03F8 0218                	XORI #536,R0
541B   0260                     	MVO@ R0,R4
541C   03F8 00D0                	XORI #208,R0
541E   0260                     	MVO@ R0,R4
541F   03F8 0150                	XORI #336,R0
5421   0260                     	MVO@ R0,R4
5422   03F8 0328                	XORI #808,R0
5424   0260                     	MVO@ R0,R4
5425   03F8 00E0                	XORI #224,R0
5427   0260                     	MVO@ R0,R4
5428   03F8 0030                	XORI #48,R0
542A   0260                     	MVO@ R0,R4
542B   03F8 0080                	XORI #128,R0
542D   0260                     	MVO@ R0,R4
542E   0244 033E                	MVO R4,_screen
                                	;[161] 	print at SCREENPOS(2, 3) color CS_WHITE,"Press 'Right' To:"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",161
5430   02B8 023E                	MVII #574,R0
5432   0240 033E                	MVO R0,_screen
5434   02B8 0007                	MVII #7,R0
5436   0240 033F                	MVO R0,_color
5438   0284 033E                	MVI _screen,R4
543A   02B8 0180                	MVII #384,R0
543C   03C0 033F                	XOR _color,R0
543E   0260                     	MVO@ R0,R4
543F   03F8 0310                	XORI #784,R0
5441   0260                     	MVO@ R0,R4
5442   03F8 00B8                	XORI #184,R0
5444   0260                     	MVO@ R0,R4
5445   03F8 00B0                	XORI #176,R0
5447   0260                     	MVO@ R0,R4
5448   0260                     	MVO@ R0,R4
5449   03F8 0298                	XORI #664,R0
544B   0260                     	MVO@ R0,R4
544C   03F8 0038                	XORI #56,R0
544E   0260                     	MVO@ R0,R4
544F   03F8 01A8                	XORI #424,R0
5451   0260                     	MVO@ R0,R4
5452   03F8 03D8                	XORI #984,R0
5454   0260                     	MVO@ R0,R4
5455   03F8 0070                	XORI #112,R0
5457   0260                     	MVO@ R0,R4
5458   03F8 0078                	XORI #120,R0
545A   0260                     	MVO@ R0,R4
545B   03F8 00E0                	XORI #224,R0
545D   0260                     	MVO@ R0,R4
545E   03F8 0298                	XORI #664,R0
5460   0260                     	MVO@ R0,R4
5461   03F8 0038                	XORI #56,R0
5463   0260                     	MVO@ R0,R4
5464   03F8 01A0                	XORI #416,R0
5466   0260                     	MVO@ R0,R4
5467   03F8 03D8                	XORI #984,R0
5469   0260                     	MVO@ R0,R4
546A   03F8 02A8                	XORI #680,R0
546C   0260                     	MVO@ R0,R4
546D   0244 033E                	MVO R4,_screen
                                	;[162] 	print at SCREENPOS(2, 4) color CS_WHITE,"> Play Again"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",162
546F   02B8 0252                	MVII #594,R0
5471   0240 033E                	MVO R0,_screen
5473   02B8 0007                	MVII #7,R0
5475   0240 033F                	MVO R0,_color
5477   0284 033E                	MVI _screen,R4
5479   02B8 00F0                	MVII #240,R0
547B   03C0 033F                	XOR _color,R0
547D   0260                     	MVO@ R0,R4
547E   03F8 00F0                	XORI #240,R0
5480   0260                     	MVO@ R0,R4
5481   03F8 0180                	XORI #384,R0
5483   0260                     	MVO@ R0,R4
5484   03F8 03E0                	XORI #992,R0
5486   0260                     	MVO@ R0,R4
5487   03F8 0068                	XORI #104,R0
5489   0260                     	MVO@ R0,R4
548A   03F8 00C0                	XORI #192,R0
548C   0260                     	MVO@ R0,R4
548D   03F8 02C8                	XORI #712,R0
548F   0260                     	MVO@ R0,R4
5490   03F8 0108                	XORI #264,R0
5492   0260                     	MVO@ R0,R4
5493   03F8 0330                	XORI #816,R0
5495   0260                     	MVO@ R0,R4
5496   03F8 0030                	XORI #48,R0
5498   0260                     	MVO@ R0,R4
5499   03F8 0040                	XORI #64,R0
549B   0260                     	MVO@ R0,R4
549C   03F8 0038                	XORI #56,R0
549E   0260                     	MVO@ R0,R4
549F   0244 033E                	MVO R4,_screen
                                	;[163] 	print at SCREENPOS(2, 5) color CS_WHITE,"Press 'Left' To:"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",163
54A1   02B8 0266                	MVII #614,R0
54A3   0240 033E                	MVO R0,_screen
54A5   02B8 0007                	MVII #7,R0
54A7   0240 033F                	MVO R0,_color
54A9   0284 033E                	MVI _screen,R4
54AB   02B8 0180                	MVII #384,R0
54AD   03C0 033F                	XOR _color,R0
54AF   0260                     	MVO@ R0,R4
54B0   03F8 0310                	XORI #784,R0
54B2   0260                     	MVO@ R0,R4
54B3   03F8 00B8                	XORI #184,R0
54B5   0260                     	MVO@ R0,R4
54B6   03F8 00B0                	XORI #176,R0
54B8   0260                     	MVO@ R0,R4
54B9   0260                     	MVO@ R0,R4
54BA   03F8 0298                	XORI #664,R0
54BC   0260                     	MVO@ R0,R4
54BD   03F8 0038                	XORI #56,R0
54BF   0260                     	MVO@ R0,R4
54C0   03F8 0158                	XORI #344,R0
54C2   0260                     	MVO@ R0,R4
54C3   03F8 0348                	XORI #840,R0
54C5   0260                     	MVO@ R0,R4
54C6   03F8 0018                	XORI #24,R0
54C8   0260                     	MVO@ R0,R4
54C9   03F8 0090                	XORI #144,R0
54CB   0260                     	MVO@ R0,R4
54CC   03F8 0298                	XORI #664,R0
54CE   0260                     	MVO@ R0,R4
54CF   03F8 0038                	XORI #56,R0
54D1   0260                     	MVO@ R0,R4
54D2   03F8 01A0                	XORI #416,R0
54D4   0260                     	MVO@ R0,R4
54D5   03F8 03D8                	XORI #984,R0
54D7   0260                     	MVO@ R0,R4
54D8   03F8 02A8                	XORI #680,R0
54DA   0260                     	MVO@ R0,R4
54DB   0244 033E                	MVO R4,_screen
                                	;[164] 	print at SCREENPOS(2, 6) color CS_WHITE,"> Quit"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",164
54DD   02B8 027A                	MVII #634,R0
54DF   0240 033E                	MVO R0,_screen
54E1   02B8 0007                	MVII #7,R0
54E3   0240 033F                	MVO R0,_color
54E5   0284 033E                	MVI _screen,R4
54E7   02B8 00F0                	MVII #240,R0
54E9   03C0 033F                	XOR _color,R0
54EB   0260                     	MVO@ R0,R4
54EC   03F8 00F0                	XORI #240,R0
54EE   0260                     	MVO@ R0,R4
54EF   03F8 0188                	XORI #392,R0
54F1   0260                     	MVO@ R0,R4
54F2   03F8 0320                	XORI #800,R0
54F4   0260                     	MVO@ R0,R4
54F5   03F8 00E0                	XORI #224,R0
54F7   0260                     	MVO@ R0,R4
54F8   03F8 00E8                	XORI #232,R0
54FA   0260                     	MVO@ R0,R4
54FB   0244 033E                	MVO R4,_screen
                                	;[165] 	if #univclock%15 = 0 then heartrate = (heartrate + 1) % 2 : playerF = playerF + playerDX : if playerF >= 4 OR playerF <= 0 then playerDX = playerDX * -1
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",165
54FD   0280 030B                	MVI V20,R0
0x54FF                          T18:
54FF   0338 000F                	SUBI #15,R0
5501   0221 0003                	BC T18
5503   02F8 000F                	ADDI #15,R0
5505   020C 003B                	BNE T17
5507   0280 0111                	MVI V17,R0
5509   0008                     	INCR R0
550A   03B8 0001                	ANDI #1,R0
550C   0240 0111                	MVO R0,V17
550E   0280 0118                	MVI V6,R0
5510   02C0 0117                	ADD V4,R0
5512   0240 0118                	MVO R0,V6
5514   0280 0118                	MVI V6,R0
5516   0378 0004                	CMPI #4,R0
5518   02B8 FFFF                	MVII #-1,R0
551A   020D 0001                	BGE $+3
551C   0008                     	INCR R0
551D   0281 0118                	MVI V6,R1
551F   0379 0000                	CMPI #0,R1
5521   02B9 FFFF                	MVII #-1,R1
5523   0206 0001                	BLE $+3
5525   0009                     	INCR R1
5526   0019                     	COMR R1
5527   0188                     	ANDR R1,R0
5528   0019                     	COMR R1
5529   01C8                     	XORR R1,R0
552A   0204 0016                	BEQ T19
552C   0280 0117                	MVI V4,R0
552E   02BD FFFF                	MVII #65535,R5
5530   01E4                     	CLRR R4
5531   0006                     	CLRC
5532   0070                     	RRC R0,1
5533   0204 0007                	BEQ T21
0x5535                          T20:
5535   0209 0001                	BNC $+3
5537   00EC                     	ADDR R5,R4
5538   00ED                     	ADDR R5,R5
5539   0078                     	SARC R0,1
553A   022C 0006                	BNE T20
0x553C                          T21:
553C   0209 0001                	BNC $+3
553E   00EC                     	ADDR R5,R4
553F   00A0                     	MOVR R4,R0
5540   0240 0117                	MVO R0,V4
0x5542                          T19:
0x5542                          T17:
                                	;[166] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",166
                                	;[167] 	SPRITE 0, SpritePosX(9, 0) + VISIBLE + ZOOMX2, SpritePosY(7, 0) + VISIBLE + ZOOMY2, SPR52 + (8)*playerF + SPR_RED
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",167
5542   02B8 0650                	MVII #1616,R0
5544   0240 0340                	MVO R0,_mobs
5546   02B8 0340                	MVII #832,R0
5548   0240 0348                	MVO R0,_mobs+8
554A   0280 0118                	MVI V6,R0
554C   004C                     	SLL R0,2
554D   00C0                     	ADDR R0,R0
554E   02F8 09A2                	ADDI #2466,R0
5550   0240 0350                	MVO R0,_mobs+16
                                	;[168] 	if heartrate then print at SCREENPOS(19, 11) color CS_WHITE,">" else print at SCREENPOS(19, 11) color CS_WHITE," "
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",168
5552   0280 0111                	MVI V17,R0
5554   0080                     	TSTR R0
5555   0204 0013                	BEQ T22
5557   02B8 02EF                	MVII #751,R0
5559   0240 033E                	MVO R0,_screen
555B   02B8 0007                	MVII #7,R0
555D   0240 033F                	MVO R0,_color
555F   0284 033E                	MVI _screen,R4
5561   02B8 00F0                	MVII #240,R0
5563   03C0 033F                	XOR _color,R0
5565   0260                     	MVO@ R0,R4
5566   0244 033E                	MVO R4,_screen
5568   0200 000D                	B T23
0x556A                          T22:
556A   02B8 02EF                	MVII #751,R0
556C   0240 033E                	MVO R0,_screen
556E   02B8 0007                	MVII #7,R0
5570   0240 033F                	MVO R0,_color
5572   0284 033E                	MVI _screen,R4
5574   0260                     	MVO@ R0,R4
5575   0244 033E                	MVO R4,_screen
0x5577                          T23:
                                	;[169] 	if heartrate then print at SCREENPOS(0, 11) color CS_WHITE,"<" else print at SCREENPOS(0, 11) color CS_WHITE," "
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",169
5577   0280 0111                	MVI V17,R0
5579   0080                     	TSTR R0
557A   0204 0013                	BEQ T24
557C   02B8 02DC                	MVII #732,R0
557E   0240 033E                	MVO R0,_screen
5580   02B8 0007                	MVII #7,R0
5582   0240 033F                	MVO R0,_color
5584   0284 033E                	MVI _screen,R4
5586   02B8 00E0                	MVII #224,R0
5588   03C0 033F                	XOR _color,R0
558A   0260                     	MVO@ R0,R4
558B   0244 033E                	MVO R4,_screen
558D   0200 000D                	B T25
0x558F                          T24:
558F   02B8 02DC                	MVII #732,R0
5591   0240 033E                	MVO R0,_screen
5593   02B8 0007                	MVII #7,R0
5595   0240 033F                	MVO R0,_color
5597   0284 033E                	MVI _screen,R4
5599   0260                     	MVO@ R0,R4
559A   0244 033E                	MVO R4,_screen
0x559C                          T25:
                                	;[170] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",170
                                	;[171] 	if cont1.right then gosub clearAll : #score = 0 : lives = 3 : scene = 0 : level = 1 : wait : wait : wait : wait : wait : wait : wait : wait : wait : wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",171
559C   0280 01FF                	MVI 511,R0
559E   0018                     	COMR R0
559F   03B8 0002                	ANDI #2,R0
55A1   0204 002F                	BEQ T26
55A3   0004 015C 03D5           	CALL Q32
55A6   01C0                     	CLRR R0
55A7   0240 030A                	MVO R0,V16
55A9   02B8 0003                	MVII #3,R0
55AB   0240 0116                	MVO R0,V18
55AD   01C0                     	CLRR R0
55AE   0240 011C                	MVO R0,V14
55B0   02B8 0001                	MVII #1,R0
55B2   0240 0115                	MVO R0,V19
55B4   0004 0160 031A           	CALL _wait
55B7   0004 0160 031A           	CALL _wait
55BA   0004 0160 031A           	CALL _wait
55BD   0004 0160 031A           	CALL _wait
55C0   0004 0160 031A           	CALL _wait
55C3   0004 0160 031A           	CALL _wait
55C6   0004 0160 031A           	CALL _wait
55C9   0004 0160 031A           	CALL _wait
55CC   0004 0160 031A           	CALL _wait
55CF   0004 0160 031A           	CALL _wait
0x55D2                          T26:
                                	;[172] 	if cont1.left then gosub clearAll :goto end
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",172
55D2   0280 01FF                	MVI 511,R0
55D4   0018                     	COMR R0
55D5   03B8 0008                	ANDI #8,R0
55D7   0204 0005                	BEQ T27
55D9   0004 015C 03D5           	CALL Q32
55DC   0200 0AF8                	B Q35
0x55DE                          T27:
                                	;[173] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",173
                                	;[174] end
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",174
55DE   02B7                     	RETURN
                                	ENDP
                                	;[175] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",175
                                	;[176] scene4: procedure
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",176
                                	; SCENE4
0x55DF                          Q23:	PROC
55DF   0275                     	BEGIN
                                	;[177] 	MODE   SCREEN_COLOR_STACK, STACK_BLACK, STACK_BLACK, STACK_GREEN, STACK_BLACK
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",177
55E0   02B8 5000                	MVII #20480,R0
55E2   0240 033F                	MVO R0,_color
55E4   02B8 0002                	MVII #2,R0
55E6   0240 0109                	MVO R0,_mode_select
                                	;[178] 	wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",178
55E8   0004 0160 031A           	CALL _wait
                                	;[179] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",179
                                	;[180] 	print at SCREENPOS(4, 2) color CS_RED,"PAUSED"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",180
55EB   02B8 022C                	MVII #556,R0
55ED   0240 033E                	MVO R0,_screen
55EF   02B8 0002                	MVII #2,R0
55F1   0240 033F                	MVO R0,_color
55F3   0284 033E                	MVI _screen,R4
55F5   02B8 0180                	MVII #384,R0
55F7   03C0 033F                	XOR _color,R0
55F9   0260                     	MVO@ R0,R4
55FA   03F8 0088                	XORI #136,R0
55FC   0260                     	MVO@ R0,R4
55FD   03F8 00A0                	XORI #160,R0
55FF   0260                     	MVO@ R0,R4
5600   03F8 0030                	XORI #48,R0
5602   0260                     	MVO@ R0,R4
5603   03F8 00B0                	XORI #176,R0
5605   0260                     	MVO@ R0,R4
5606   03F8 0008                	XORI #8,R0
5608   0260                     	MVO@ R0,R4
5609   0244 033E                	MVO R4,_screen
                                	;[181] 	print at SCREENPOS(2, 3) color CS_WHITE,"Press 'Right' To:"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",181
560B   02B8 023E                	MVII #574,R0
560D   0240 033E                	MVO R0,_screen
560F   02B8 0007                	MVII #7,R0
5611   0240 033F                	MVO R0,_color
5613   0284 033E                	MVI _screen,R4
5615   02B8 0180                	MVII #384,R0
5617   03C0 033F                	XOR _color,R0
5619   0260                     	MVO@ R0,R4
561A   03F8 0310                	XORI #784,R0
561C   0260                     	MVO@ R0,R4
561D   03F8 00B8                	XORI #184,R0
561F   0260                     	MVO@ R0,R4
5620   03F8 00B0                	XORI #176,R0
5622   0260                     	MVO@ R0,R4
5623   0260                     	MVO@ R0,R4
5624   03F8 0298                	XORI #664,R0
5626   0260                     	MVO@ R0,R4
5627   03F8 0038                	XORI #56,R0
5629   0260                     	MVO@ R0,R4
562A   03F8 01A8                	XORI #424,R0
562C   0260                     	MVO@ R0,R4
562D   03F8 03D8                	XORI #984,R0
562F   0260                     	MVO@ R0,R4
5630   03F8 0070                	XORI #112,R0
5632   0260                     	MVO@ R0,R4
5633   03F8 0078                	XORI #120,R0
5635   0260                     	MVO@ R0,R4
5636   03F8 00E0                	XORI #224,R0
5638   0260                     	MVO@ R0,R4
5639   03F8 0298                	XORI #664,R0
563B   0260                     	MVO@ R0,R4
563C   03F8 0038                	XORI #56,R0
563E   0260                     	MVO@ R0,R4
563F   03F8 01A0                	XORI #416,R0
5641   0260                     	MVO@ R0,R4
5642   03F8 03D8                	XORI #984,R0
5644   0260                     	MVO@ R0,R4
5645   03F8 02A8                	XORI #680,R0
5647   0260                     	MVO@ R0,R4
5648   0244 033E                	MVO R4,_screen
                                	;[182] 	print at SCREENPOS(2, 4) color CS_WHITE,"> Continue"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",182
564A   02B8 0252                	MVII #594,R0
564C   0240 033E                	MVO R0,_screen
564E   02B8 0007                	MVII #7,R0
5650   0240 033F                	MVO R0,_color
5652   0284 033E                	MVI _screen,R4
5654   02B8 00F0                	MVII #240,R0
5656   03C0 033F                	XOR _color,R0
5658   0260                     	MVO@ R0,R4
5659   03F8 00F0                	XORI #240,R0
565B   0260                     	MVO@ R0,R4
565C   03F8 0118                	XORI #280,R0
565E   0260                     	MVO@ R0,R4
565F   03F8 0360                	XORI #864,R0
5661   0260                     	MVO@ R0,R4
5662   03F8 0008                	XORI #8,R0
5664   0260                     	MVO@ R0,R4
5665   03F8 00D0                	XORI #208,R0
5667   0260                     	MVO@ R0,R4
5668   03F8 00E8                	XORI #232,R0
566A   0260                     	MVO@ R0,R4
566B   03F8 0038                	XORI #56,R0
566D   0260                     	MVO@ R0,R4
566E   03F8 00D8                	XORI #216,R0
5670   0260                     	MVO@ R0,R4
5671   03F8 0080                	XORI #128,R0
5673   0260                     	MVO@ R0,R4
5674   0244 033E                	MVO R4,_screen
                                	;[183] 	print at SCREENPOS(2, 5) color CS_WHITE,"Press 'Left' To:"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",183
5676   02B8 0266                	MVII #614,R0
5678   0240 033E                	MVO R0,_screen
567A   02B8 0007                	MVII #7,R0
567C   0240 033F                	MVO R0,_color
567E   0284 033E                	MVI _screen,R4
5680   02B8 0180                	MVII #384,R0
5682   03C0 033F                	XOR _color,R0
5684   0260                     	MVO@ R0,R4
5685   03F8 0310                	XORI #784,R0
5687   0260                     	MVO@ R0,R4
5688   03F8 00B8                	XORI #184,R0
568A   0260                     	MVO@ R0,R4
568B   03F8 00B0                	XORI #176,R0
568D   0260                     	MVO@ R0,R4
568E   0260                     	MVO@ R0,R4
568F   03F8 0298                	XORI #664,R0
5691   0260                     	MVO@ R0,R4
5692   03F8 0038                	XORI #56,R0
5694   0260                     	MVO@ R0,R4
5695   03F8 0158                	XORI #344,R0
5697   0260                     	MVO@ R0,R4
5698   03F8 0348                	XORI #840,R0
569A   0260                     	MVO@ R0,R4
569B   03F8 0018                	XORI #24,R0
569D   0260                     	MVO@ R0,R4
569E   03F8 0090                	XORI #144,R0
56A0   0260                     	MVO@ R0,R4
56A1   03F8 0298                	XORI #664,R0
56A3   0260                     	MVO@ R0,R4
56A4   03F8 0038                	XORI #56,R0
56A6   0260                     	MVO@ R0,R4
56A7   03F8 01A0                	XORI #416,R0
56A9   0260                     	MVO@ R0,R4
56AA   03F8 03D8                	XORI #984,R0
56AC   0260                     	MVO@ R0,R4
56AD   03F8 02A8                	XORI #680,R0
56AF   0260                     	MVO@ R0,R4
56B0   0244 033E                	MVO R4,_screen
                                	;[184] 	print at SCREENPOS(2, 6) color CS_WHITE,"> Quit"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",184
56B2   02B8 027A                	MVII #634,R0
56B4   0240 033E                	MVO R0,_screen
56B6   02B8 0007                	MVII #7,R0
56B8   0240 033F                	MVO R0,_color
56BA   0284 033E                	MVI _screen,R4
56BC   02B8 00F0                	MVII #240,R0
56BE   03C0 033F                	XOR _color,R0
56C0   0260                     	MVO@ R0,R4
56C1   03F8 00F0                	XORI #240,R0
56C3   0260                     	MVO@ R0,R4
56C4   03F8 0188                	XORI #392,R0
56C6   0260                     	MVO@ R0,R4
56C7   03F8 0320                	XORI #800,R0
56C9   0260                     	MVO@ R0,R4
56CA   03F8 00E0                	XORI #224,R0
56CC   0260                     	MVO@ R0,R4
56CD   03F8 00E8                	XORI #232,R0
56CF   0260                     	MVO@ R0,R4
56D0   0244 033E                	MVO R4,_screen
                                	;[185] 	if #univclock%15 = 0 then heartrate = (heartrate + 1) % 2 : playerF = playerF + playerDX : if playerF >= 4 OR playerF <= 0 then playerDX = playerDX * -1
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",185
56D2   0280 030B                	MVI V20,R0
0x56D4                          T29:
56D4   0338 000F                	SUBI #15,R0
56D6   0221 0003                	BC T29
56D8   02F8 000F                	ADDI #15,R0
56DA   020C 003B                	BNE T28
56DC   0280 0111                	MVI V17,R0
56DE   0008                     	INCR R0
56DF   03B8 0001                	ANDI #1,R0
56E1   0240 0111                	MVO R0,V17
56E3   0280 0118                	MVI V6,R0
56E5   02C0 0117                	ADD V4,R0
56E7   0240 0118                	MVO R0,V6
56E9   0280 0118                	MVI V6,R0
56EB   0378 0004                	CMPI #4,R0
56ED   02B8 FFFF                	MVII #-1,R0
56EF   020D 0001                	BGE $+3
56F1   0008                     	INCR R0
56F2   0281 0118                	MVI V6,R1
56F4   0379 0000                	CMPI #0,R1
56F6   02B9 FFFF                	MVII #-1,R1
56F8   0206 0001                	BLE $+3
56FA   0009                     	INCR R1
56FB   0019                     	COMR R1
56FC   0188                     	ANDR R1,R0
56FD   0019                     	COMR R1
56FE   01C8                     	XORR R1,R0
56FF   0204 0016                	BEQ T30
5701   0280 0117                	MVI V4,R0
5703   02BD FFFF                	MVII #65535,R5
5705   01E4                     	CLRR R4
5706   0006                     	CLRC
5707   0070                     	RRC R0,1
5708   0204 0007                	BEQ T32
0x570A                          T31:
570A   0209 0001                	BNC $+3
570C   00EC                     	ADDR R5,R4
570D   00ED                     	ADDR R5,R5
570E   0078                     	SARC R0,1
570F   022C 0006                	BNE T31
0x5711                          T32:
5711   0209 0001                	BNC $+3
5713   00EC                     	ADDR R5,R4
5714   00A0                     	MOVR R4,R0
5715   0240 0117                	MVO R0,V4
0x5717                          T30:
0x5717                          T28:
                                	;[186] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",186
                                	;[187] 	SPRITE 0, SpritePosX(9, 0) + VISIBLE + ZOOMX2, SpritePosY(7, 0) + VISIBLE + ZOOMY2, SPR52 + (8)*playerF + SPR_RED
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",187
5717   02B8 0650                	MVII #1616,R0
5719   0240 0340                	MVO R0,_mobs
571B   02B8 0340                	MVII #832,R0
571D   0240 0348                	MVO R0,_mobs+8
571F   0280 0118                	MVI V6,R0
5721   004C                     	SLL R0,2
5722   00C0                     	ADDR R0,R0
5723   02F8 09A2                	ADDI #2466,R0
5725   0240 0350                	MVO R0,_mobs+16
                                	;[188] 	if heartrate then print at SCREENPOS(19, 11) color CS_WHITE,">" else print at SCREENPOS(19, 11) color CS_WHITE," "
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",188
5727   0280 0111                	MVI V17,R0
5729   0080                     	TSTR R0
572A   0204 0013                	BEQ T33
572C   02B8 02EF                	MVII #751,R0
572E   0240 033E                	MVO R0,_screen
5730   02B8 0007                	MVII #7,R0
5732   0240 033F                	MVO R0,_color
5734   0284 033E                	MVI _screen,R4
5736   02B8 00F0                	MVII #240,R0
5738   03C0 033F                	XOR _color,R0
573A   0260                     	MVO@ R0,R4
573B   0244 033E                	MVO R4,_screen
573D   0200 000D                	B T34
0x573F                          T33:
573F   02B8 02EF                	MVII #751,R0
5741   0240 033E                	MVO R0,_screen
5743   02B8 0007                	MVII #7,R0
5745   0240 033F                	MVO R0,_color
5747   0284 033E                	MVI _screen,R4
5749   0260                     	MVO@ R0,R4
574A   0244 033E                	MVO R4,_screen
0x574C                          T34:
                                	;[189] 	if heartrate then print at SCREENPOS(0, 11) color CS_WHITE,"<" else print at SCREENPOS(0, 11) color CS_WHITE," "
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",189
574C   0280 0111                	MVI V17,R0
574E   0080                     	TSTR R0
574F   0204 0013                	BEQ T35
5751   02B8 02DC                	MVII #732,R0
5753   0240 033E                	MVO R0,_screen
5755   02B8 0007                	MVII #7,R0
5757   0240 033F                	MVO R0,_color
5759   0284 033E                	MVI _screen,R4
575B   02B8 00E0                	MVII #224,R0
575D   03C0 033F                	XOR _color,R0
575F   0260                     	MVO@ R0,R4
5760   0244 033E                	MVO R4,_screen
5762   0200 000D                	B T36
0x5764                          T35:
5764   02B8 02DC                	MVII #732,R0
5766   0240 033E                	MVO R0,_screen
5768   02B8 0007                	MVII #7,R0
576A   0240 033F                	MVO R0,_color
576C   0284 033E                	MVI _screen,R4
576E   0260                     	MVO@ R0,R4
576F   0244 033E                	MVO R4,_screen
0x5771                          T36:
                                	;[190] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",190
                                	;[191] 	if cont1.left then gosub clearAll : #score = 0 : lives = 3 : scene = 0 : level = 1 : #univclock = 0 : wait : wait : wait : wait : wait : wait : wait : wait : wait : wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",191
5771   0280 01FF                	MVI 511,R0
5773   0018                     	COMR R0
5774   03B8 0008                	ANDI #8,R0
5776   0204 0032                	BEQ T37
5778   0004 015C 03D5           	CALL Q32
577B   01C0                     	CLRR R0
577C   0240 030A                	MVO R0,V16
577E   02B8 0003                	MVII #3,R0
5780   0240 0116                	MVO R0,V18
5782   01C0                     	CLRR R0
5783   0240 011C                	MVO R0,V14
5785   02B8 0001                	MVII #1,R0
5787   0240 0115                	MVO R0,V19
5789   01C0                     	CLRR R0
578A   0240 030B                	MVO R0,V20
578C   0004 0160 031A           	CALL _wait
578F   0004 0160 031A           	CALL _wait
5792   0004 0160 031A           	CALL _wait
5795   0004 0160 031A           	CALL _wait
5798   0004 0160 031A           	CALL _wait
579B   0004 0160 031A           	CALL _wait
579E   0004 0160 031A           	CALL _wait
57A1   0004 0160 031A           	CALL _wait
57A4   0004 0160 031A           	CALL _wait
57A7   0004 0160 031A           	CALL _wait
0x57AA                          T37:
                                	;[192] 	if cont1.right then scene = 1
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",192
57AA   0280 01FF                	MVI 511,R0
57AC   0018                     	COMR R0
57AD   03B8 0002                	ANDI #2,R0
57AF   0204 0004                	BEQ T38
57B1   02B8 0001                	MVII #1,R0
57B3   0240 011C                	MVO R0,V14
0x57B5                          T38:
                                	;[193] end
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",193
57B5   02B7                     	RETURN
                                	ENDP
                                	;[194] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",194
                                	;[195] levelupAnimation: procedure
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",195
                                	; LEVELUPANIMATION
0x57B6                          Q25:	PROC
57B6   0275                     	BEGIN
                                	;[196] 	wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",196
57B7   0004 0160 031A           	CALL _wait
                                	;[197] 	gosub clearAll
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",197
57BA   0004 015C 03D5           	CALL Q32
                                	;[198] 	for a = 0 to 75
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",198
57BD   01C0                     	CLRR R0
57BE   0240 010C                	MVO R0,V1
0x57C0                          T39:
                                	;[199] 		if a%3 = 0 then heartrate = (heartrate + 1) % 2 : playerF = playerF + playerDX : if playerF >= 4 OR playerF <= 0 then playerDX = playerDX * -1
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",199
57C0   0280 010C                	MVI V1,R0
0x57C2                          T41:
57C2   0338 0003                	SUBI #3,R0
57C4   0221 0003                	BC T41
57C6   02F8 0003                	ADDI #3,R0
57C8   020C 003B                	BNE T40
57CA   0280 0111                	MVI V17,R0
57CC   0008                     	INCR R0
57CD   03B8 0001                	ANDI #1,R0
57CF   0240 0111                	MVO R0,V17
57D1   0280 0118                	MVI V6,R0
57D3   02C0 0117                	ADD V4,R0
57D5   0240 0118                	MVO R0,V6
57D7   0280 0118                	MVI V6,R0
57D9   0378 0004                	CMPI #4,R0
57DB   02B8 FFFF                	MVII #-1,R0
57DD   020D 0001                	BGE $+3
57DF   0008                     	INCR R0
57E0   0281 0118                	MVI V6,R1
57E2   0379 0000                	CMPI #0,R1
57E4   02B9 FFFF                	MVII #-1,R1
57E6   0206 0001                	BLE $+3
57E8   0009                     	INCR R1
57E9   0019                     	COMR R1
57EA   0188                     	ANDR R1,R0
57EB   0019                     	COMR R1
57EC   01C8                     	XORR R1,R0
57ED   0204 0016                	BEQ T42
57EF   0280 0117                	MVI V4,R0
57F1   02BD FFFF                	MVII #65535,R5
57F3   01E4                     	CLRR R4
57F4   0006                     	CLRC
57F5   0070                     	RRC R0,1
57F6   0204 0007                	BEQ T44
0x57F8                          T43:
57F8   0209 0001                	BNC $+3
57FA   00EC                     	ADDR R5,R4
57FB   00ED                     	ADDR R5,R5
57FC   0078                     	SARC R0,1
57FD   022C 0006                	BNE T43
0x57FF                          T44:
57FF   0209 0001                	BNC $+3
5801   00EC                     	ADDR R5,R4
5802   00A0                     	MOVR R4,R0
5803   0240 0117                	MVO R0,V4
0x5805                          T42:
0x5805                          T40:
                                	;[200] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",200
                                	;[201] 		SPRITE 0, SpritePosX(9, 0) + VISIBLE + ZOOMX2, SpritePosY(3, 0) + VISIBLE + ZOOMY2, SPR52 + (8)*playerF + SPR_RED
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",201
5805   02B8 0650                	MVII #1616,R0
5807   0240 0340                	MVO R0,_mobs
5809   02B8 0320                	MVII #800,R0
580B   0240 0348                	MVO R0,_mobs+8
580D   0280 0118                	MVI V6,R0
580F   004C                     	SLL R0,2
5810   00C0                     	ADDR R0,R0
5811   02F8 09A2                	ADDI #2466,R0
5813   0240 0350                	MVO R0,_mobs+16
                                	;[202] 		
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",202
                                	;[203] 		print at (SCREENPOS(7, 5)) color CS_RED, (level%10+16)*8+6
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",203
5815   02B8 026B                	MVII #619,R0
5817   0240 033E                	MVO R0,_screen
5819   02B8 0002                	MVII #2,R0
581B   0240 033F                	MVO R0,_color
581D   0280 0115                	MVI V19,R0
0x581F                          T45:
581F   0338 000A                	SUBI #10,R0
5821   0221 0003                	BC T45
5823   02F8 001A                	ADDI #26,R0
5825   004C                     	SLL R0,2
5826   00C0                     	ADDR R0,R0
5827   02F8 0006                	ADDI #6,R0
5829   0284 033E                	MVI _screen,R4
582B   0260                     	MVO@ R0,R4
582C   0244 033E                	MVO R4,_screen
                                	;[204] 		print at (SCREENPOS(12, 5)) color CS_RED, (level%10+16)*8+6
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",204
582E   02B8 0270                	MVII #624,R0
5830   0240 033E                	MVO R0,_screen
5832   02B8 0002                	MVII #2,R0
5834   0240 033F                	MVO R0,_color
5836   0280 0115                	MVI V19,R0
0x5838                          T46:
5838   0338 000A                	SUBI #10,R0
583A   0221 0003                	BC T46
583C   02F8 001A                	ADDI #26,R0
583E   004C                     	SLL R0,2
583F   00C0                     	ADDR R0,R0
5840   02F8 0006                	ADDI #6,R0
5842   0284 033E                	MVI _screen,R4
5844   0260                     	MVO@ R0,R4
5845   0244 033E                	MVO R4,_screen
                                	;[205] 		wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",205
5847   0004 0160 031A           	CALL _wait
                                	;[206] 		wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",206
584A   0004 0160 031A           	CALL _wait
                                	;[207] 		wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",207
584D   0004 0160 031A           	CALL _wait
                                	;[208] 	next a
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",208
5850   0280 010C                	MVI V1,R0
5852   0008                     	INCR R0
5853   0240 010C                	MVO R0,V1
5855   0378 004B                	CMPI #75,R0
5857   0226 0098                	BLE T39
                                	;[209] 	gosub clearAll
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",209
5859   0004 015C 03D5           	CALL Q32
                                	;[210] end
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",210
585C   02B7                     	RETURN
                                	ENDP
                                	;[211] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",211
                                	;[212] powerupAnimation: procedure
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",212
                                	; POWERUPANIMATION
0x585D                          Q38:	PROC
585D   0275                     	BEGIN
                                	;[213] 	wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",213
585E   0004 0160 031A           	CALL _wait
                                	;[214] 	gosub clearAll
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",214
5861   0004 015C 03D5           	CALL Q32
                                	;[215] 	MODE SCREEN_COLOR_STACK, STACK_BLACK, STACK_BLACK, STACK_GREEN, STACK_BLACK
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",215
5864   02B8 5000                	MVII #20480,R0
5866   0240 033F                	MVO R0,_color
5868   02B8 0002                	MVII #2,R0
586A   0240 0109                	MVO R0,_mode_select
                                	;[216] 	wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",216
586C   0004 0160 031A           	CALL _wait
                                	;[217] 	for a = 0 to 75
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",217
586F   01C0                     	CLRR R0
5870   0240 010C                	MVO R0,V1
0x5872                          T47:
                                	;[218] 		if a%3 = 0 then heartrate = (heartrate + 1) % 2 : playerF = playerF + playerDX : if playerF >= 4 OR playerF <= 0 then playerDX = playerDX * -1
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",218
5872   0280 010C                	MVI V1,R0
0x5874                          T49:
5874   0338 0003                	SUBI #3,R0
5876   0221 0003                	BC T49
5878   02F8 0003                	ADDI #3,R0
587A   020C 003B                	BNE T48
587C   0280 0111                	MVI V17,R0
587E   0008                     	INCR R0
587F   03B8 0001                	ANDI #1,R0
5881   0240 0111                	MVO R0,V17
5883   0280 0118                	MVI V6,R0
5885   02C0 0117                	ADD V4,R0
5887   0240 0118                	MVO R0,V6
5889   0280 0118                	MVI V6,R0
588B   0378 0004                	CMPI #4,R0
588D   02B8 FFFF                	MVII #-1,R0
588F   020D 0001                	BGE $+3
5891   0008                     	INCR R0
5892   0281 0118                	MVI V6,R1
5894   0379 0000                	CMPI #0,R1
5896   02B9 FFFF                	MVII #-1,R1
5898   0206 0001                	BLE $+3
589A   0009                     	INCR R1
589B   0019                     	COMR R1
589C   0188                     	ANDR R1,R0
589D   0019                     	COMR R1
589E   01C8                     	XORR R1,R0
589F   0204 0016                	BEQ T50
58A1   0280 0117                	MVI V4,R0
58A3   02BD FFFF                	MVII #65535,R5
58A5   01E4                     	CLRR R4
58A6   0006                     	CLRC
58A7   0070                     	RRC R0,1
58A8   0204 0007                	BEQ T52
0x58AA                          T51:
58AA   0209 0001                	BNC $+3
58AC   00EC                     	ADDR R5,R4
58AD   00ED                     	ADDR R5,R5
58AE   0078                     	SARC R0,1
58AF   022C 0006                	BNE T51
0x58B1                          T52:
58B1   0209 0001                	BNC $+3
58B3   00EC                     	ADDR R5,R4
58B4   00A0                     	MOVR R4,R0
58B5   0240 0117                	MVO R0,V4
0x58B7                          T50:
0x58B7                          T48:
                                	;[219] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",219
                                	;[220] 		SPRITE 0, SpritePosX(9, 0) + VISIBLE + ZOOMX2, SpritePosY(3, 0) + VISIBLE + ZOOMY2, SPR52 + (8)*playerF + SPR_BLUE
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",220
58B7   02B8 0650                	MVII #1616,R0
58B9   0240 0340                	MVO R0,_mobs
58BB   02B8 0320                	MVII #800,R0
58BD   0240 0348                	MVO R0,_mobs+8
58BF   0280 0118                	MVI V6,R0
58C1   004C                     	SLL R0,2
58C2   00C0                     	ADDR R0,R0
58C3   02F8 09A1                	ADDI #2465,R0
58C5   0240 0350                	MVO R0,_mobs+16
                                	;[221] 		
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",221
                                	;[222] 		if power = 4 then print at (SCREENPOS(7, 5)) color CS_BLUE, "\319" : print at (SCREENPOS(12, 5)) color CS_BLUE, "\319"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",222
58C7   0280 011B                	MVI V22,R0
58C9   0378 0004                	CMPI #4,R0
58CB   020C 0022                	BNE T53
58CD   02B8 026B                	MVII #619,R0
58CF   0240 033E                	MVO R0,_screen
58D1   02B8 0001                	MVII #1,R0
58D3   0240 033F                	MVO R0,_color
58D5   0284 033E                	MVI _screen,R4
58D7   02B8 09F8                	MVII #2552,R0
58D9   03C0 033F                	XOR _color,R0
58DB   0260                     	MVO@ R0,R4
58DC   0244 033E                	MVO R4,_screen
58DE   02B8 0270                	MVII #624,R0
58E0   0240 033E                	MVO R0,_screen
58E2   02B8 0001                	MVII #1,R0
58E4   0240 033F                	MVO R0,_color
58E6   0284 033E                	MVI _screen,R4
58E8   02B8 09F8                	MVII #2552,R0
58EA   03C0 033F                	XOR _color,R0
58EC   0260                     	MVO@ R0,R4
58ED   0244 033E                	MVO R4,_screen
0x58EF                          T53:
                                	;[223] 		if power = 5 then print at (SCREENPOS(7, 5)) color CS_WHITE, "\320" : print at (SCREENPOS(12, 5)) color CS_WHITE, "\320"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",223
58EF   0280 011B                	MVI V22,R0
58F1   0378 0005                	CMPI #5,R0
58F3   020C 0022                	BNE T54
58F5   02B8 026B                	MVII #619,R0
58F7   0240 033E                	MVO R0,_screen
58F9   02B8 0007                	MVII #7,R0
58FB   0240 033F                	MVO R0,_color
58FD   0284 033E                	MVI _screen,R4
58FF   02B8 0A00                	MVII #2560,R0
5901   03C0 033F                	XOR _color,R0
5903   0260                     	MVO@ R0,R4
5904   0244 033E                	MVO R4,_screen
5906   02B8 0270                	MVII #624,R0
5908   0240 033E                	MVO R0,_screen
590A   02B8 0007                	MVII #7,R0
590C   0240 033F                	MVO R0,_color
590E   0284 033E                	MVI _screen,R4
5910   02B8 0A00                	MVII #2560,R0
5912   03C0 033F                	XOR _color,R0
5914   0260                     	MVO@ R0,R4
5915   0244 033E                	MVO R4,_screen
0x5917                          T54:
                                	;[224] 		if power = 6 then print at (SCREENPOS(7, 5)) color CS_GREEN, "\321" : print at (SCREENPOS(12, 5)) color CS_GREEN, "\321"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",224
5917   0280 011B                	MVI V22,R0
5919   0378 0006                	CMPI #6,R0
591B   020C 0022                	BNE T55
591D   02B8 026B                	MVII #619,R0
591F   0240 033E                	MVO R0,_screen
5921   02B8 0005                	MVII #5,R0
5923   0240 033F                	MVO R0,_color
5925   0284 033E                	MVI _screen,R4
5927   02B8 0A08                	MVII #2568,R0
5929   03C0 033F                	XOR _color,R0
592B   0260                     	MVO@ R0,R4
592C   0244 033E                	MVO R4,_screen
592E   02B8 0270                	MVII #624,R0
5930   0240 033E                	MVO R0,_screen
5932   02B8 0005                	MVII #5,R0
5934   0240 033F                	MVO R0,_color
5936   0284 033E                	MVI _screen,R4
5938   02B8 0A08                	MVII #2568,R0
593A   03C0 033F                	XOR _color,R0
593C   0260                     	MVO@ R0,R4
593D   0244 033E                	MVO R4,_screen
0x593F                          T55:
                                	;[225] 		
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",225
                                	;[226] 		wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",226
593F   0004 0160 031A           	CALL _wait
                                	;[227] 		wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",227
5942   0004 0160 031A           	CALL _wait
                                	;[228] 		wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",228
5945   0004 0160 031A           	CALL _wait
                                	;[229] 	next a
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",229
5948   0280 010C                	MVI V1,R0
594A   0008                     	INCR R0
594B   0240 010C                	MVO R0,V1
594D   0378 004B                	CMPI #75,R0
594F   0226 00DE                	BLE T47
                                	;[230] 	gosub clearAll
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",230
5951   0004 015C 03D5           	CALL Q32
                                	;[231] 	mode 1
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",231
5954   02B8 0003                	MVII #3,R0
5956   0240 0109                	MVO R0,_mode_select
                                	;[232] 	wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",232
5958   0004 0160 031A           	CALL _wait
                                	;[233] end
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",233
595B   02B7                     	RETURN
                                	ENDP
                                	;[234] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",234
                                	;[235] writescore: procedure
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",235
                                	; WRITESCORE
0x595C                          Q39:	PROC
595C   0275                     	BEGIN
                                	;[236] 	if #score < 0 then #score = 0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",236
595D   0280 030A                	MVI V16,R0
595F   0378 0000                	CMPI #0,R0
5961   020D 0003                	BGE T56
5963   01C0                     	CLRR R0
5964   0240 030A                	MVO R0,V16
0x5966                          T56:
                                	;[237] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",237
                                	;[238] 	print at (SCREENPOS(16, 2)) color CS_RED, (#score/100%10+16)*8+6
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",238
5966   02B8 0238                	MVII #568,R0
5968   0240 033E                	MVO R0,_screen
596A   02B8 0002                	MVII #2,R0
596C   0240 033F                	MVO R0,_color
596E   0280 030A                	MVI V16,R0
5970   02BC FFFF                	MVII #-1,R4
0x5972                          T57:
5972   000C                     	INCR R4
5973   0338 0064                	SUBI #100,R0
5975   0221 0004                	BC T57
5977   00A0                     	MOVR R4,R0
0x5978                          T58:
5978   0338 000A                	SUBI #10,R0
597A   0221 0003                	BC T58
597C   02F8 001A                	ADDI #26,R0
597E   004C                     	SLL R0,2
597F   00C0                     	ADDR R0,R0
5980   02F8 0006                	ADDI #6,R0
5982   0284 033E                	MVI _screen,R4
5984   0260                     	MVO@ R0,R4
5985   0244 033E                	MVO R4,_screen
                                	;[239] 	print at (SCREENPOS(17, 2)) color CS_RED,(#score/10%10+16)*8+6
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",239
5987   02B8 0239                	MVII #569,R0
5989   0240 033E                	MVO R0,_screen
598B   02B8 0002                	MVII #2,R0
598D   0240 033F                	MVO R0,_color
598F   0280 030A                	MVI V16,R0
5991   02BC FFFF                	MVII #-1,R4
0x5993                          T59:
5993   000C                     	INCR R4
5994   0338 000A                	SUBI #10,R0
5996   0221 0004                	BC T59
5998   00A0                     	MOVR R4,R0
0x5999                          T60:
5999   0338 000A                	SUBI #10,R0
599B   0221 0003                	BC T60
599D   02F8 001A                	ADDI #26,R0
599F   004C                     	SLL R0,2
59A0   00C0                     	ADDR R0,R0
59A1   02F8 0006                	ADDI #6,R0
59A3   0284 033E                	MVI _screen,R4
59A5   0260                     	MVO@ R0,R4
59A6   0244 033E                	MVO R4,_screen
                                	;[240] 	print at (SCREENPOS(18, 2)) color CS_RED,(#score%10+16)*8+6
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",240
59A8   02B8 023A                	MVII #570,R0
59AA   0240 033E                	MVO R0,_screen
59AC   02B8 0002                	MVII #2,R0
59AE   0240 033F                	MVO R0,_color
59B0   0280 030A                	MVI V16,R0
0x59B2                          T61:
59B2   0338 000A                	SUBI #10,R0
59B4   0221 0003                	BC T61
59B6   02F8 001A                	ADDI #26,R0
59B8   004C                     	SLL R0,2
59B9   00C0                     	ADDR R0,R0
59BA   02F8 0006                	ADDI #6,R0
59BC   0284 033E                	MVI _screen,R4
59BE   0260                     	MVO@ R0,R4
59BF   0244 033E                	MVO R4,_screen
                                	;[241] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",241
                                	;[242] 	return
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",242
59C1   02B7                     	RETURN
                                	;[243] end
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",243
                                	ENDP
                                	;[244] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",244
                                	;[245] chooseObject: procedure
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",245
                                	; CHOOSEOBJECT
0x59C2                          Q40:	PROC
59C2   0275                     	BEGIN
                                	;[246] 	chance = RAND % (percentage(0) + percentage(1) + percentage(2) + percentage(3) + percentage(4))
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",246
59C3   0280 0127                	MVI Q7,R0
59C5   0281 0128                	MVI Q7+1,R1
59C7   00C8                     	ADDR R1,R0
59C8   0281 0129                	MVI Q7+2,R1
59CA   00C8                     	ADDR R1,R0
59CB   0281 012A                	MVI Q7+3,R1
59CD   00C8                     	ADDR R1,R0
59CE   0281 012B                	MVI Q7+4,R1
59D0   00C8                     	ADDR R1,R0
59D1   0281 0104                	MVI _rand,R1
59D3   0080                     	TSTR R0
59D4   0204 0004                	BEQ T62
0x59D6                          T63:
59D6   0101                     	SUBR R0,R1
59D7   0221 0002                	BC T63
59D9   00C1                     	ADDR R0,R1
0x59DA                          T62:
59DA   0088                     	MOVR R1,R0
59DB   0240 010F                	MVO R0,V10
                                	;[247] 	if chance < percentage(0) then 'nothing chances
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",247
59DD   0280 010F                	MVI V10,R0
59DF   0281 0127                	MVI Q7,R1
59E1   0148                     	CMPR R1,R0
59E2   020D 0005                	BGE T64
                                	;[248] 		chance = 0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",248
59E4   01C0                     	CLRR R0
59E5   0240 010F                	MVO R0,V10
                                	;[249] 	elseif chance < percentage(0) + percentage(1) then 'rock chances
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",249
59E7   0200 005B                	B T65
0x59E9                          T64:
59E9   0280 0127                	MVI Q7,R0
59EB   0281 0128                	MVI Q7+1,R1
59ED   00C8                     	ADDR R1,R0
59EE   0281 010F                	MVI V10,R1
59F0   0148                     	CMPR R1,R0
59F1   0206 0006                	BLE T66
                                	;[250] 		chance = 1
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",250
59F3   02B8 0001                	MVII #1,R0
59F5   0240 010F                	MVO R0,V10
                                	;[251] 	elseif chance < percentage(0) + percentage(1) + percentage(2) then 'coin chances
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",251
59F7   0200 004B                	B T65
0x59F9                          T66:
59F9   0280 0127                	MVI Q7,R0
59FB   0281 0128                	MVI Q7+1,R1
59FD   00C8                     	ADDR R1,R0
59FE   0281 0129                	MVI Q7+2,R1
5A00   00C8                     	ADDR R1,R0
5A01   0281 010F                	MVI V10,R1
5A03   0148                     	CMPR R1,R0
5A04   0206 0006                	BLE T67
                                	;[252] 		chance = 2
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",252
5A06   02B8 0002                	MVII #2,R0
5A08   0240 010F                	MVO R0,V10
                                	;[253] 	elseif chance < percentage(0) + percentage(1) + percentage(2) + percentage(3) then 'apple chances
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",253
5A0A   0200 0038                	B T65
0x5A0C                          T67:
5A0C   0280 0127                	MVI Q7,R0
5A0E   0281 0128                	MVI Q7+1,R1
5A10   00C8                     	ADDR R1,R0
5A11   0281 0129                	MVI Q7+2,R1
5A13   00C8                     	ADDR R1,R0
5A14   0281 012A                	MVI Q7+3,R1
5A16   00C8                     	ADDR R1,R0
5A17   0281 010F                	MVI V10,R1
5A19   0148                     	CMPR R1,R0
5A1A   0206 0006                	BLE T68
                                	;[254] 		chance = 3
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",254
5A1C   02B8 0003                	MVII #3,R0
5A1E   0240 010F                	MVO R0,V10
                                	;[255] 	elseif chance < percentage(0) + percentage(1) + percentage(2) + percentage(3) + percentage(4) then 'apple chances
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",255
5A20   0200 0022                	B T65
0x5A22                          T68:
5A22   0280 0127                	MVI Q7,R0
5A24   0281 0128                	MVI Q7+1,R1
5A26   00C8                     	ADDR R1,R0
5A27   0281 0129                	MVI Q7+2,R1
5A29   00C8                     	ADDR R1,R0
5A2A   0281 012A                	MVI Q7+3,R1
5A2C   00C8                     	ADDR R1,R0
5A2D   0281 012B                	MVI Q7+4,R1
5A2F   00C8                     	ADDR R1,R0
5A30   0281 010F                	MVI V10,R1
5A32   0148                     	CMPR R1,R0
5A33   0206 000C                	BLE T69
                                	;[256] 		chance = RAND%3 + 4 'Powerup
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",256
5A35   0280 0104                	MVI _rand,R0
0x5A37                          T70:
5A37   0338 0003                	SUBI #3,R0
5A39   0221 0003                	BC T70
5A3B   02F8 0007                	ADDI #7,R0
5A3D   0240 010F                	MVO R0,V10
                                	;[257] 	else
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",257
5A3F   0200 0003                	B T65
0x5A41                          T69:
                                	;[258] 		chance = 0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",258
5A41   01C0                     	CLRR R0
5A42   0240 010F                	MVO R0,V10
                                	;[259] 	end if
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",259
0x5A44                          T65:
                                	;[260] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",260
                                	;[261] 	if invisible > 0 AND a = 1 then chance = 2
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",261
5A44   0280 0113                	MVI V7,R0
5A46   0378 0000                	CMPI #0,R0
5A48   02B8 FFFF                	MVII #-1,R0
5A4A   020E 0001                	BGT $+3
5A4C   0008                     	INCR R0
5A4D   0281 010C                	MVI V1,R1
5A4F   0379 0001                	CMPI #1,R1
5A51   02B9 FFFF                	MVII #-1,R1
5A53   0204 0001                	BEQ $+3
5A55   0009                     	INCR R1
5A56   0188                     	ANDR R1,R0
5A57   0204 0004                	BEQ T71
5A59   02B8 0002                	MVII #2,R0
5A5B   0240 010F                	MVO R0,V10
0x5A5D                          T71:
                                	;[262] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",262
                                	;[263] 	return
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",263
5A5D   02B7                     	RETURN
                                	;[264] end
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",264
                                	ENDP
                                	;[265] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",265
                                	;[266] drawObjects: procedure
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",266
                                	; DRAWOBJECTS
0x5A5E                          Q30:	PROC
5A5E   0275                     	BEGIN
                                	;[267] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",267
                                	;[268] 	for a = 0 to 2
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",268
5A5F   01C0                     	CLRR R0
5A60   0240 010C                	MVO R0,V1
0x5A62                          T72:
                                	;[269] 		if (#univclock % (highestDifficulty-dificulty)) = 0 then 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",269
5A62   0280 030B                	MVI V20,R0
5A64   0281 0112                	MVI V13,R1
5A66   0301 0110                	SUB V11,R1
5A68   0204 0004                	BEQ T74
0x5A6A                          T75:
5A6A   0108                     	SUBR R1,R0
5A6B   0221 0002                	BC T75
5A6D   00C8                     	ADDR R1,R0
0x5A6E                          T74:
5A6E   0080                     	TSTR R0
5A6F   020C 0017                	BNE T73
                                	;[270] 			objectY(a) = (objectY(a) + 1) % 8
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",270
5A71   02BB 0124                	MVII #Q4,R3
5A73   02C3 010C                	ADD V1,R3
5A75   0298                     	MVI@ R3,R0
5A76   0008                     	INCR R0
5A77   03B8 0007                	ANDI #7,R0
5A79   0258                     	MVO@ R0,R3
                                	;[271] 			if objectY(a) = 0 then gosub chooseObject : object(a) = chance
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",271
5A7A   0298                     	MVI@ R3,R0
5A7B   0080                     	TSTR R0
5A7C   020C 000A                	BNE T76
5A7E   0004 0158 01C2           	CALL Q40
5A81   0280 010F                	MVI V10,R0
5A83   02BB 011E                	MVII #Q5,R3
5A85   02C3 010C                	ADD V1,R3
5A87   0258                     	MVO@ R0,R3
0x5A88                          T76:
                                	;[272] 		end if
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",272
0x5A88                          T73:
                                	;[273] 		
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",273
                                	;[274] 	next a
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",274
5A88   0280 010C                	MVI V1,R0
5A8A   0008                     	INCR R0
5A8B   0240 010C                	MVO R0,V1
5A8D   0378 0002                	CMPI #2,R0
5A8F   0226 002E                	BLE T72
                                	;[275] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",275
                                	;[276] 	objectX(0) = 4 - objectY(0)/2
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",276
5A91   02B8 0004                	MVII #4,R0
5A93   0281 0124                	MVI Q4,R1
5A95   0061                     	SLR R1,1
5A96   0108                     	SUBR R1,R0
5A97   0240 0121                	MVO R0,Q3
                                	;[277] 	objectX(2) = 9 + objectY(2)/2
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",277
5A99   0280 0126                	MVI Q4+2,R0
5A9B   0060                     	SLR R0,1
5A9C   02F8 0009                	ADDI #9,R0
5A9E   0240 0123                	MVO R0,Q3+2
                                	;[278] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",278
                                	;[279] 	for a = 1 to 3
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",279
5AA0   02B8 0001                	MVII #1,R0
5AA2   0240 010C                	MVO R0,V1
0x5AA4                          T77:
                                	;[280] 		if object(a - 1) >= 4 then
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",280
5AA4   02BB 011D                	MVII #Q5-1,R3
5AA6   02C3 010C                	ADD V1,R3
5AA8   0298                     	MVI@ R3,R0
5AA9   0378 0004                	CMPI #4,R0
5AAB   0205 002C                	BLT T78
                                	;[281] 			SPRITE a, SpritePosX(objectX(a - 1), 0) + VISIBLE, SpritePosY(4 + objectY(a - 1), 0) + ZOOMY2, SPR62 + (object(a - 1) - 3)* 8 + #objectColor(object(a - 1))
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",281
5AAD   02B8 0340                	MVII #Q1,R0
5AAF   02C0 010C                	ADD V1,R0
5AB1   0084                     	MOVR R0,R4
5AB2   02FB 0003                	ADDI #(Q3-Q5) AND $FFFF,R3
5AB4   0298                     	MVI@ R3,R0
5AB5   0008                     	INCR R0
5AB6   004C                     	SLL R0,2
5AB7   00C0                     	ADDR R0,R0
5AB8   02F8 0200                	ADDI #512,R0
5ABA   0260                     	MVO@ R0,R4
5ABB   02FB 0003                	ADDI #(Q4-Q3) AND $FFFF,R3
5ABD   0298                     	MVI@ R3,R0
5ABE   02F8 0005                	ADDI #5,R0
5AC0   004C                     	SLL R0,2
5AC1   00C0                     	ADDR R0,R0
5AC2   02F8 0100                	ADDI #256,R0
5AC4   02FC 0007                	ADDI #7,R4
5AC6   0260                     	MVO@ R0,R4
5AC7   02FB FFFA                	ADDI #(Q5-Q4) AND $FFFF,R3
5AC9   0298                     	MVI@ R3,R0
5ACA   0338 0003                	SUBI #3,R0
5ACC   004C                     	SLL R0,2
5ACD   00C0                     	ADDR R0,R0
5ACE   02F8 09F0                	ADDI #2544,R0
5AD0   02B9 030C                	MVII #Q6,R1
5AD2   02D9                     	ADD@ R3,R1
5AD3   02C8                     	ADD@ R1,R0
5AD4   02FC 0007                	ADDI #7,R4
5AD6   0260                     	MVO@ R0,R4
                                	;[282] 			'if object(a - 1) = 4 then print to SCREENPOS(12 + object(a - 4), 9) color #objectColor(object(a - 1)), "\319"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",282
                                	;[283] 			'if object(a - 1) = 5 then print to SCREENPOS(12 + object(a - 4), 9) color #objectColor(object(a - 1)), "\320"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",283
                                	;[284] 			'if object(a - 1) = 6 then print to SCREENPOS(12 + object(a - 4), 9) color #objectColor(object(a - 1)), "\321"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",284
                                	;[285] 		else
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",285
5AD7   0200 002A                	B T79
0x5AD9                          T78:
                                	;[286] 			SPRITE a, SpritePosX(objectX(a - 1), 0) + VISIBLE, SpritePosY(4 + objectY(a - 1), 0) + ZOOMY2, SPR62 + object(a - 1) * 8 + #objectColor(object(a - 1))
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",286
5AD9   02B8 0340                	MVII #Q1,R0
5ADB   02C0 010C                	ADD V1,R0
5ADD   0084                     	MOVR R0,R4
5ADE   02BB 0120                	MVII #Q3-1,R3
5AE0   02C3 010C                	ADD V1,R3
5AE2   0298                     	MVI@ R3,R0
5AE3   0008                     	INCR R0
5AE4   004C                     	SLL R0,2
5AE5   00C0                     	ADDR R0,R0
5AE6   02F8 0200                	ADDI #512,R0
5AE8   0260                     	MVO@ R0,R4
5AE9   02FB 0003                	ADDI #(Q4-Q3) AND $FFFF,R3
5AEB   0298                     	MVI@ R3,R0
5AEC   02F8 0005                	ADDI #5,R0
5AEE   004C                     	SLL R0,2
5AEF   00C0                     	ADDR R0,R0
5AF0   02F8 0100                	ADDI #256,R0
5AF2   02FC 0007                	ADDI #7,R4
5AF4   0260                     	MVO@ R0,R4
5AF5   02FB FFFA                	ADDI #(Q5-Q4) AND $FFFF,R3
5AF7   0298                     	MVI@ R3,R0
5AF8   004C                     	SLL R0,2
5AF9   00C0                     	ADDR R0,R0
5AFA   02F8 09F0                	ADDI #2544,R0
5AFC   02B9 030C                	MVII #Q6,R1
5AFE   02D9                     	ADD@ R3,R1
5AFF   02C8                     	ADD@ R1,R0
5B00   02FC 0007                	ADDI #7,R4
5B02   0260                     	MVO@ R0,R4
                                	;[287] 		end if
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",287
0x5B03                          T79:
                                	;[288] 	next a
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",288
5B03   0280 010C                	MVI V1,R0
5B05   0008                     	INCR R0
5B06   0240 010C                	MVO R0,V1
5B08   0378 0003                	CMPI #3,R0
5B0A   0226 0067                	BLE T77
                                	;[289] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",289
                                	;[290] 	return
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",290
5B0C   02B7                     	RETURN
                                	;[291] end
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",291
                                	ENDP
                                	;[292] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",292
                                	;[293] drawPlayer: procedure
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",293
                                	; DRAWPLAYER
0x5B0D                          Q31:	PROC
5B0D   0275                     	BEGIN
                                	;[294] 	if cont1.left AND #univclock%3 = 0 then playerX = playerX - 1
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",294
5B0E   0280 01FF                	MVI 511,R0
5B10   0018                     	COMR R0
5B11   03B8 0008                	ANDI #8,R0
5B13   0281 030B                	MVI V20,R1
0x5B15                          T81:
5B15   0339 0003                	SUBI #3,R1
5B17   0221 0003                	BC T81
5B19   02F9 0003                	ADDI #3,R1
5B1B   02B9 FFFF                	MVII #-1,R1
5B1D   0204 0001                	BEQ $+3
5B1F   0009                     	INCR R1
5B20   0188                     	ANDR R1,R0
5B21   0204 0005                	BEQ T80
5B23   0280 0119                	MVI V2,R0
5B25   0010                     	DECR R0
5B26   0240 0119                	MVO R0,V2
0x5B28                          T80:
                                	;[295] 	if cont1.right AND #univclock%3 = 0 then playerX = playerX + 1
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",295
5B28   0280 01FF                	MVI 511,R0
5B2A   0018                     	COMR R0
5B2B   03B8 0002                	ANDI #2,R0
5B2D   0281 030B                	MVI V20,R1
0x5B2F                          T83:
5B2F   0339 0003                	SUBI #3,R1
5B31   0221 0003                	BC T83
5B33   02F9 0003                	ADDI #3,R1
5B35   02B9 FFFF                	MVII #-1,R1
5B37   0204 0001                	BEQ $+3
5B39   0009                     	INCR R1
5B3A   0188                     	ANDR R1,R0
5B3B   0204 0005                	BEQ T82
5B3D   0280 0119                	MVI V2,R0
5B3F   0008                     	INCR R0
5B40   0240 0119                	MVO R0,V2
0x5B42                          T82:
                                	;[296] 	if cont1.up AND #univclock%3 = 0 AND playerY = 10 then jump = 5
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",296
5B42   0280 01FF                	MVI 511,R0
5B44   0018                     	COMR R0
5B45   03B8 0004                	ANDI #4,R0
5B47   0281 030B                	MVI V20,R1
0x5B49                          T85:
5B49   0339 0003                	SUBI #3,R1
5B4B   0221 0003                	BC T85
5B4D   02F9 0003                	ADDI #3,R1
5B4F   02B9 FFFF                	MVII #-1,R1
5B51   0204 0001                	BEQ $+3
5B53   0009                     	INCR R1
5B54   0188                     	ANDR R1,R0
5B55   0281 011A                	MVI V5,R1
5B57   0379 000A                	CMPI #10,R1
5B59   02B9 FFFF                	MVII #-1,R1
5B5B   0204 0001                	BEQ $+3
5B5D   0009                     	INCR R1
5B5E   0188                     	ANDR R1,R0
5B5F   0204 0004                	BEQ T84
5B61   02B8 0005                	MVII #5,R0
5B63   0240 0114                	MVO R0,V15
0x5B65                          T84:
                                	;[297] 	if cont1.B0 AND #univclock%3 = 0 then scene = 3
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",297
5B65   0280 01FF                	MVI 511,R0
5B67   0018                     	COMR R0
5B68   03B8 00E0                	ANDI #224,R0
5B6A   0378 00A0                	CMPI #160,R0
5B6C   02B8 FFFF                	MVII #-1,R0
5B6E   0204 0001                	BEQ $+3
5B70   0008                     	INCR R0
5B71   0281 030B                	MVI V20,R1
0x5B73                          T87:
5B73   0339 0003                	SUBI #3,R1
5B75   0221 0003                	BC T87
5B77   02F9 0003                	ADDI #3,R1
5B79   02B9 FFFF                	MVII #-1,R1
5B7B   0204 0001                	BEQ $+3
5B7D   0009                     	INCR R1
5B7E   0188                     	ANDR R1,R0
5B7F   0204 0004                	BEQ T86
5B81   02B8 0003                	MVII #3,R0
5B83   0240 011C                	MVO R0,V14
0x5B85                          T86:
                                	;[298] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",298
                                	;[299] 	playerX = playerX % 3
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",299
5B85   0280 0119                	MVI V2,R0
0x5B87                          T88:
5B87   0338 0003                	SUBI #3,R0
5B89   0221 0003                	BC T88
5B8B   02F8 0003                	ADDI #3,R0
5B8D   0240 0119                	MVO R0,V2
                                	;[300] 	if #univclock%(highestDifficulty-dificulty) = 0 AND jump > 0 then playerY = 10 - jump + 2: jump = jump - 1 : playerF = 3
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",300
5B8F   0280 030B                	MVI V20,R0
5B91   0281 0112                	MVI V13,R1
5B93   0301 0110                	SUB V11,R1
5B95   0204 0004                	BEQ T90
0x5B97                          T91:
5B97   0108                     	SUBR R1,R0
5B98   0221 0002                	BC T91
5B9A   00C8                     	ADDR R1,R0
0x5B9B                          T90:
5B9B   0080                     	TSTR R0
5B9C   02B8 FFFF                	MVII #-1,R0
5B9E   0204 0001                	BEQ $+3
5BA0   0008                     	INCR R0
5BA1   0281 0114                	MVI V15,R1
5BA3   0379 0000                	CMPI #0,R1
5BA5   02B9 FFFF                	MVII #-1,R1
5BA7   020E 0001                	BGT $+3
5BA9   0009                     	INCR R1
5BAA   0188                     	ANDR R1,R0
5BAB   0204 0011                	BEQ T89
5BAD   02B8 000A                	MVII #10,R0
5BAF   0300 0114                	SUB V15,R0
5BB1   02F8 0002                	ADDI #2,R0
5BB3   0240 011A                	MVO R0,V5
5BB5   0280 0114                	MVI V15,R0
5BB7   0010                     	DECR R0
5BB8   0240 0114                	MVO R0,V15
5BBA   02B8 0003                	MVII #3,R0
5BBC   0240 0118                	MVO R0,V6
0x5BBE                          T89:
                                	;[301] 	if #univclock%(highestDifficulty-dificulty) = 0 AND invisible > 0 then playerY = 8: invisible = invisible - 1 : playerF = 3
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",301
5BBE   0280 030B                	MVI V20,R0
5BC0   0281 0112                	MVI V13,R1
5BC2   0301 0110                	SUB V11,R1
5BC4   0204 0004                	BEQ T93
0x5BC6                          T94:
5BC6   0108                     	SUBR R1,R0
5BC7   0221 0002                	BC T94
5BC9   00C8                     	ADDR R1,R0
0x5BCA                          T93:
5BCA   0080                     	TSTR R0
5BCB   02B8 FFFF                	MVII #-1,R0
5BCD   0204 0001                	BEQ $+3
5BCF   0008                     	INCR R0
5BD0   0281 0113                	MVI V7,R1
5BD2   0379 0000                	CMPI #0,R1
5BD4   02B9 FFFF                	MVII #-1,R1
5BD6   020E 0001                	BGT $+3
5BD8   0009                     	INCR R1
5BD9   0188                     	ANDR R1,R0
5BDA   0204 000D                	BEQ T92
5BDC   02B8 0008                	MVII #8,R0
5BDE   0240 011A                	MVO R0,V5
5BE0   0280 0113                	MVI V7,R0
5BE2   0010                     	DECR R0
5BE3   0240 0113                	MVO R0,V7
5BE5   02B8 0003                	MVII #3,R0
5BE7   0240 0118                	MVO R0,V6
0x5BE9                          T92:
                                	;[302] 	if #univclock%(highestDifficulty-dificulty) = 0 AND bonus_lives > 0 then gosub add_lives : bonus_lives = bonus_lives - 1
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",302
5BE9   0280 030B                	MVI V20,R0
5BEB   0281 0112                	MVI V13,R1
5BED   0301 0110                	SUB V11,R1
5BEF   0204 0004                	BEQ T96
0x5BF1                          T97:
5BF1   0108                     	SUBR R1,R0
5BF2   0221 0002                	BC T97
5BF4   00C8                     	ADDR R1,R0
0x5BF5                          T96:
5BF5   0080                     	TSTR R0
5BF6   02B8 FFFF                	MVII #-1,R0
5BF8   0204 0001                	BEQ $+3
5BFA   0008                     	INCR R0
5BFB   0281 010E                	MVI V9,R1
5BFD   0379 0000                	CMPI #0,R1
5BFF   02B9 FFFF                	MVII #-1,R1
5C01   020E 0001                	BGT $+3
5C03   0009                     	INCR R1
5C04   0188                     	ANDR R1,R0
5C05   0204 0008                	BEQ T95
5C07   0004 0160 0094           	CALL Q43
5C0A   0280 010E                	MVI V9,R0
5C0C   0010                     	DECR R0
5C0D   0240 010E                	MVO R0,V9
0x5C0F                          T95:
                                	;[303] 	if #univclock%(highestDifficulty-dificulty) = 0 AND bonus_exp > 0 then gosub add_points : bonus_exp = bonus_exp - 1
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",303
5C0F   0280 030B                	MVI V20,R0
5C11   0281 0112                	MVI V13,R1
5C13   0301 0110                	SUB V11,R1
5C15   0204 0004                	BEQ T99
0x5C17                          T100:
5C17   0108                     	SUBR R1,R0
5C18   0221 0002                	BC T100
5C1A   00C8                     	ADDR R1,R0
0x5C1B                          T99:
5C1B   0080                     	TSTR R0
5C1C   02B8 FFFF                	MVII #-1,R0
5C1E   0204 0001                	BEQ $+3
5C20   0008                     	INCR R0
5C21   0281 010D                	MVI V8,R1
5C23   0379 0000                	CMPI #0,R1
5C25   02B9 FFFF                	MVII #-1,R1
5C27   020E 0001                	BGT $+3
5C29   0009                     	INCR R1
5C2A   0188                     	ANDR R1,R0
5C2B   0204 0008                	BEQ T98
5C2D   0004 0160 002A           	CALL Q44
5C30   0280 010D                	MVI V8,R0
5C32   0010                     	DECR R0
5C33   0240 010D                	MVO R0,V8
0x5C35                          T98:
                                	;[304] 	if #univclock%(highestDifficulty-dificulty) = 0 AND jump = 0 AND invisible = 0 then playerY = 10: playerF = playerF + playerDX : if playerF >= 4 OR playerF <= 0 then playerDX = playerDX * -1
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",304
5C35   0280 030B                	MVI V20,R0
5C37   0281 0112                	MVI V13,R1
5C39   0301 0110                	SUB V11,R1
5C3B   0204 0004                	BEQ T102
0x5C3D                          T103:
5C3D   0108                     	SUBR R1,R0
5C3E   0221 0002                	BC T103
5C40   00C8                     	ADDR R1,R0
0x5C41                          T102:
5C41   0080                     	TSTR R0
5C42   02B8 FFFF                	MVII #-1,R0
5C44   0204 0001                	BEQ $+3
5C46   0008                     	INCR R0
5C47   0281 0114                	MVI V15,R1
5C49   0089                     	TSTR R1
5C4A   02B9 FFFF                	MVII #-1,R1
5C4C   0204 0001                	BEQ $+3
5C4E   0009                     	INCR R1
5C4F   0188                     	ANDR R1,R0
5C50   0281 0113                	MVI V7,R1
5C52   0089                     	TSTR R1
5C53   02B9 FFFF                	MVII #-1,R1
5C55   0204 0001                	BEQ $+3
5C57   0009                     	INCR R1
5C58   0188                     	ANDR R1,R0
5C59   0204 0038                	BEQ T101
5C5B   02B8 000A                	MVII #10,R0
5C5D   0240 011A                	MVO R0,V5
5C5F   0280 0118                	MVI V6,R0
5C61   02C0 0117                	ADD V4,R0
5C63   0240 0118                	MVO R0,V6
5C65   0280 0118                	MVI V6,R0
5C67   0378 0004                	CMPI #4,R0
5C69   02B8 FFFF                	MVII #-1,R0
5C6B   020D 0001                	BGE $+3
5C6D   0008                     	INCR R0
5C6E   0281 0118                	MVI V6,R1
5C70   0379 0000                	CMPI #0,R1
5C72   02B9 FFFF                	MVII #-1,R1
5C74   0206 0001                	BLE $+3
5C76   0009                     	INCR R1
5C77   0019                     	COMR R1
5C78   0188                     	ANDR R1,R0
5C79   0019                     	COMR R1
5C7A   01C8                     	XORR R1,R0
5C7B   0204 0016                	BEQ T104
5C7D   0280 0117                	MVI V4,R0
5C7F   02BD FFFF                	MVII #65535,R5
5C81   01E4                     	CLRR R4
5C82   0006                     	CLRC
5C83   0070                     	RRC R0,1
5C84   0204 0007                	BEQ T106
0x5C86                          T105:
5C86   0209 0001                	BNC $+3
5C88   00EC                     	ADDR R5,R4
5C89   00ED                     	ADDR R5,R5
5C8A   0078                     	SARC R0,1
5C8B   022C 0006                	BNE T105
0x5C8D                          T106:
5C8D   0209 0001                	BNC $+3
5C8F   00EC                     	ADDR R5,R4
5C90   00A0                     	MOVR R4,R0
5C91   0240 0117                	MVO R0,V4
0x5C93                          T104:
0x5C93                          T101:
                                	;[305] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",305
                                	;[306] 	if invisible > 0 then
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",306
5C93   0280 0113                	MVI V7,R0
5C95   0378 0000                	CMPI #0,R0
5C97   0206 0006                	BLE T107
                                	;[307] 		#playerColor = SPR_BLUE
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",307
5C99   02B8 0001                	MVII #1,R0
5C9B   0240 0309                	MVO R0,V3
                                	;[308] 	elseif bonus_lives > 0 then
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",308
5C9D   0200 001B                	B T108
0x5C9F                          T107:
5C9F   0280 010E                	MVI V9,R0
5CA1   0378 0000                	CMPI #0,R0
5CA3   0206 0006                	BLE T109
                                	;[309] 		#playerColor = SPR_GREEN
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",309
5CA5   02B8 0005                	MVII #5,R0
5CA7   0240 0309                	MVO R0,V3
                                	;[310] 	elseif bonus_exp > 0 then
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",310
5CA9   0200 000F                	B T108
0x5CAB                          T109:
5CAB   0280 010D                	MVI V8,R0
5CAD   0378 0000                	CMPI #0,R0
5CAF   0206 0005                	BLE T110
                                	;[311] 		#playerColor = SPR_BLACK
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",311
5CB1   01C0                     	CLRR R0
5CB2   0240 0309                	MVO R0,V3
                                	;[312] 	else 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",312
5CB4   0200 0004                	B T108
0x5CB6                          T110:
                                	;[313] 		#playerColor = SPR_RED
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",313
5CB6   02B8 0002                	MVII #2,R0
5CB8   0240 0309                	MVO R0,V3
                                	;[314] 	end if
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",314
0x5CBA                          T108:
                                	;[315] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",315
                                	;[316] 	SPRITE 0, SpritePosX(2 + 4 * playerX, 0) + VISIBLE + ZOOMX2, SpritePosY(playerY, 0) + VISIBLE + ZOOMY2, SPR52 + (8)*playerF + #playerColor
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",316
5CBA   0280 0119                	MVI V2,R0
5CBC   004C                     	SLL R0,2
5CBD   02F8 0003                	ADDI #3,R0
5CBF   004C                     	SLL R0,2
5CC0   00C0                     	ADDR R0,R0
5CC1   02F8 0600                	ADDI #1536,R0
5CC3   0240 0340                	MVO R0,_mobs
5CC5   0280 011A                	MVI V5,R0
5CC7   0008                     	INCR R0
5CC8   004C                     	SLL R0,2
5CC9   00C0                     	ADDR R0,R0
5CCA   02F8 0300                	ADDI #768,R0
5CCC   0240 0348                	MVO R0,_mobs+8
5CCE   0280 0118                	MVI V6,R0
5CD0   004C                     	SLL R0,2
5CD1   00C0                     	ADDR R0,R0
5CD2   02F8 09A0                	ADDI #2464,R0
5CD4   02C0 0309                	ADD V3,R0
5CD6   0240 0350                	MVO R0,_mobs+16
                                	;[317] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",317
                                	;[318] 	for a = 0 to 2
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",318
5CD8   01C0                     	CLRR R0
5CD9   0240 010C                	MVO R0,V1
0x5CDB                          T111:
                                	;[319] 		if (#univclock%(highestDifficulty-dificulty) = 0 AND 4 + objectY(a) = playerY AND objectX(playerX) = objectX(a) AND jump = 0)then
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",319
5CDB   0280 030B                	MVI V20,R0
5CDD   0281 0112                	MVI V13,R1
5CDF   0301 0110                	SUB V11,R1
5CE1   0204 0004                	BEQ T113
0x5CE3                          T114:
5CE3   0108                     	SUBR R1,R0
5CE4   0221 0002                	BC T114
5CE6   00C8                     	ADDR R1,R0
0x5CE7                          T113:
5CE7   0080                     	TSTR R0
5CE8   02B8 FFFF                	MVII #-1,R0
5CEA   0204 0001                	BEQ $+3
5CEC   0008                     	INCR R0
5CED   02BB 0124                	MVII #Q4,R3
5CEF   02C3 010C                	ADD V1,R3
5CF1   0299                     	MVI@ R3,R1
5CF2   02F9 0004                	ADDI #4,R1
5CF4   0341 011A                	CMP V5,R1
5CF6   02B9 FFFF                	MVII #-1,R1
5CF8   0204 0001                	BEQ $+3
5CFA   0009                     	INCR R1
5CFB   0188                     	ANDR R1,R0
5CFC   02BB 0121                	MVII #Q3,R3
5CFE   02C3 0119                	ADD V2,R3
5D00   0299                     	MVI@ R3,R1
5D01   02BB 0121                	MVII #Q3,R3
5D03   02C3 010C                	ADD V1,R3
5D05   0359                     	CMP@ R3,R1
5D06   02B9 FFFF                	MVII #-1,R1
5D08   0204 0001                	BEQ $+3
5D0A   0009                     	INCR R1
5D0B   0188                     	ANDR R1,R0
5D0C   0281 0114                	MVI V15,R1
5D0E   0089                     	TSTR R1
5D0F   02B9 FFFF                	MVII #-1,R1
5D11   0204 0001                	BEQ $+3
5D13   0009                     	INCR R1
5D14   0188                     	ANDR R1,R0
5D15   0204 0085                	BEQ T112
                                	;[320] 			if object(a) = 1 AND invisible = 0 then lives = lives - 1 : gosub lose_points 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",320
5D17   02FB FFFD                	ADDI #(Q5-Q3) AND $FFFF,R3
5D19   0298                     	MVI@ R3,R0
5D1A   0378 0001                	CMPI #1,R0
5D1C   02B8 FFFF                	MVII #-1,R0
5D1E   0204 0001                	BEQ $+3
5D20   0008                     	INCR R0
5D21   0281 0113                	MVI V7,R1
5D23   0089                     	TSTR R1
5D24   02B9 FFFF                	MVII #-1,R1
5D26   0204 0001                	BEQ $+3
5D28   0009                     	INCR R1
5D29   0188                     	ANDR R1,R0
5D2A   0204 0008                	BEQ T115
5D2C   0280 0116                	MVI V18,R0
5D2E   0010                     	DECR R0
5D2F   0240 0116                	MVO R0,V18
5D31   0004 0160 005F           	CALL Q45
0x5D34                          T115:
                                	;[321] 			if object(a) = 2 then gosub add_points : gosub writescore
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",321
5D34   02BB 011E                	MVII #Q5,R3
5D36   02C3 010C                	ADD V1,R3
5D38   0298                     	MVI@ R3,R0
5D39   0378 0002                	CMPI #2,R0
5D3B   020C 0006                	BNE T116
5D3D   0004 0160 002A           	CALL Q44
5D40   0004 0158 015C           	CALL Q39
0x5D43                          T116:
                                	;[322] 			if object(a) = 3 then gosub add_points : #score = #score + 1 : lives = lives + 1 : gosub writescore : gosub drawhearts
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",322
5D43   02BB 011E                	MVII #Q5,R3
5D45   02C3 010C                	ADD V1,R3
5D47   0298                     	MVI@ R3,R0
5D48   0378 0003                	CMPI #3,R0
5D4A   020C 0013                	BNE T117
5D4C   0004 0160 002A           	CALL Q44
5D4F   0280 030A                	MVI V16,R0
5D51   0008                     	INCR R0
5D52   0240 030A                	MVO R0,V16
5D54   0280 0116                	MVI V18,R0
5D56   0008                     	INCR R0
5D57   0240 0116                	MVO R0,V18
5D59   0004 0158 015C           	CALL Q39
5D5C   0004 015C 01A6           	CALL Q46
0x5D5F                          T117:
                                	;[323] 			if object(a) = 4 then invisible = 35 : power = 4 : gosub powerupAnimation
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",323
5D5F   02BB 011E                	MVII #Q5,R3
5D61   02C3 010C                	ADD V1,R3
5D63   0298                     	MVI@ R3,R0
5D64   0378 0004                	CMPI #4,R0
5D66   020C 000B                	BNE T118
5D68   02B8 0023                	MVII #35,R0
5D6A   0240 0113                	MVO R0,V7
5D6C   02B8 0004                	MVII #4,R0
5D6E   0240 011B                	MVO R0,V22
5D70   0004 0158 005D           	CALL Q38
0x5D73                          T118:
                                	;[324] 			if object(a) = 5 then bonus_exp = 5 : power = 5 : gosub powerupAnimation
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",324
5D73   02BB 011E                	MVII #Q5,R3
5D75   02C3 010C                	ADD V1,R3
5D77   0298                     	MVI@ R3,R0
5D78   0378 0005                	CMPI #5,R0
5D7A   020C 0009                	BNE T119
5D7C   02B8 0005                	MVII #5,R0
5D7E   0240 010D                	MVO R0,V8
5D80   0240 011B                	MVO R0,V22
5D82   0004 0158 005D           	CALL Q38
0x5D85                          T119:
                                	;[325] 			if object(a) = 6 then gosub add_points : bonus_lives = 5 : power = 6 : gosub powerupAnimation
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",325
5D85   02BB 011E                	MVII #Q5,R3
5D87   02C3 010C                	ADD V1,R3
5D89   0298                     	MVI@ R3,R0
5D8A   0378 0006                	CMPI #6,R0
5D8C   020C 000E                	BNE T120
5D8E   0004 0160 002A           	CALL Q44
5D91   02B8 0005                	MVII #5,R0
5D93   0240 010E                	MVO R0,V9
5D95   02B8 0006                	MVII #6,R0
5D97   0240 011B                	MVO R0,V22
5D99   0004 0158 005D           	CALL Q38
0x5D9C                          T120:
                                	;[326] 		end if
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",326
0x5D9C                          T112:
                                	;[327] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",327
                                	;[328] 	next a
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",328
5D9C   0280 010C                	MVI V1,R0
5D9E   0008                     	INCR R0
5D9F   0240 010C                	MVO R0,V1
5DA1   0378 0002                	CMPI #2,R0
5DA3   0226 00C9                	BLE T111
                                	;[329] 	return
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",329
5DA5   02B7                     	RETURN
                                	;[330] end
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",330
                                	ENDP
                                	;[331] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",331
                                	;[332] drawhearts: procedure
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",332
                                	; DRAWHEARTS
0x5DA6                          Q46:	PROC
5DA6   0275                     	BEGIN
                                	;[333] 	if #univclock%7 = 0 then heartrate = (heartrate + 1) % 2
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",333
5DA7   0280 030B                	MVI V20,R0
0x5DA9                          T122:
5DA9   0338 0007                	SUBI #7,R0
5DAB   0221 0003                	BC T122
5DAD   02F8 0007                	ADDI #7,R0
5DAF   020C 0007                	BNE T121
5DB1   0280 0111                	MVI V17,R0
5DB3   0008                     	INCR R0
5DB4   03B8 0001                	ANDI #1,R0
5DB6   0240 0111                	MVO R0,V17
0x5DB8                          T121:
                                	;[334] 	if heartrate then SPRITE 4, SpritePosX(16, 0) + VISIBLE, SpritePosY(5, 0) + ZOOMY2, SPR57 + #playerColor else SPRITE 4, SpritePosX(16, 0) + VISIBLE, SpritePosY(5, 0) + ZOOMY2, SPR58 + #playerColor
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",334
5DB8   0280 0111                	MVI V17,R0
5DBA   0080                     	TSTR R0
5DBB   0204 0010                	BEQ T123
5DBD   02B8 0288                	MVII #648,R0
5DBF   0240 0344                	MVO R0,_mobs+4
5DC1   02B8 0130                	MVII #304,R0
5DC3   0240 034C                	MVO R0,_mobs+12
5DC5   02B8 09C8                	MVII #2504,R0
5DC7   02C0 0309                	ADD V3,R0
5DC9   0240 0354                	MVO R0,_mobs+20
5DCB   0200 000E                	B T124
0x5DCD                          T123:
5DCD   02B8 0288                	MVII #648,R0
5DCF   0240 0344                	MVO R0,_mobs+4
5DD1   02B8 0130                	MVII #304,R0
5DD3   0240 034C                	MVO R0,_mobs+12
5DD5   02B8 09D0                	MVII #2512,R0
5DD7   02C0 0309                	ADD V3,R0
5DD9   0240 0354                	MVO R0,_mobs+20
0x5DDB                          T124:
                                	;[335] 	print at (SCREENPOS(17, 5)) color CS_RED,(lives/10%10+16)*8+6
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",335
5DDB   02B8 0275                	MVII #629,R0
5DDD   0240 033E                	MVO R0,_screen
5DDF   02B8 0002                	MVII #2,R0
5DE1   0240 033F                	MVO R0,_color
5DE3   0280 0116                	MVI V18,R0
5DE5   02BC FFFF                	MVII #-1,R4
0x5DE7                          T125:
5DE7   000C                     	INCR R4
5DE8   0338 000A                	SUBI #10,R0
5DEA   0221 0004                	BC T125
5DEC   00A0                     	MOVR R4,R0
0x5DED                          T126:
5DED   0338 000A                	SUBI #10,R0
5DEF   0221 0003                	BC T126
5DF1   02F8 001A                	ADDI #26,R0
5DF3   004C                     	SLL R0,2
5DF4   00C0                     	ADDR R0,R0
5DF5   02F8 0006                	ADDI #6,R0
5DF7   0284 033E                	MVI _screen,R4
5DF9   0260                     	MVO@ R0,R4
5DFA   0244 033E                	MVO R4,_screen
                                	;[336] 	print at (SCREENPOS(18, 5)) color CS_RED,(lives%10+16)*8+6
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",336
5DFC   02B8 0276                	MVII #630,R0
5DFE   0240 033E                	MVO R0,_screen
5E00   02B8 0002                	MVII #2,R0
5E02   0240 033F                	MVO R0,_color
5E04   0280 0116                	MVI V18,R0
0x5E06                          T127:
5E06   0338 000A                	SUBI #10,R0
5E08   0221 0003                	BC T127
5E0A   02F8 001A                	ADDI #26,R0
5E0C   004C                     	SLL R0,2
5E0D   00C0                     	ADDR R0,R0
5E0E   02F8 0006                	ADDI #6,R0
5E10   0284 033E                	MVI _screen,R4
5E12   0260                     	MVO@ R0,R4
5E13   0244 033E                	MVO R4,_screen
                                	;[337] 	return
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",337
5E15   02B7                     	RETURN
                                	;[338] end
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",338
                                	ENDP
                                	;[339] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",339
                                	;[340] writelevel: procedure
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",340
                                	; WRITELEVEL
0x5E16                          Q48:	PROC
5E16   0275                     	BEGIN
                                	;[341] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",341
                                	;[342] 	print at (SCREENPOS(17, 8)) color CS_RED, (level%10+16)*8+6
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",342
5E17   02B8 02B1                	MVII #689,R0
5E19   0240 033E                	MVO R0,_screen
5E1B   02B8 0002                	MVII #2,R0
5E1D   0240 033F                	MVO R0,_color
5E1F   0280 0115                	MVI V19,R0
0x5E21                          T128:
5E21   0338 000A                	SUBI #10,R0
5E23   0221 0003                	BC T128
5E25   02F8 001A                	ADDI #26,R0
5E27   004C                     	SLL R0,2
5E28   00C0                     	ADDR R0,R0
5E29   02F8 0006                	ADDI #6,R0
5E2B   0284 033E                	MVI _screen,R4
5E2D   0260                     	MVO@ R0,R4
5E2E   0244 033E                	MVO R4,_screen
                                	;[343] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",343
                                	;[344] 	return
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",344
5E30   02B7                     	RETURN
                                	;[345] end
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",345
                                	ENDP
                                	;[346] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",346
                                	;[347] determinelevel: procedure
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",347
                                	; DETERMINELEVEL
0x5E31                          Q28:	PROC
5E31   0275                     	BEGIN
                                	;[348] 	if(level = 1) then 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",348
5E32   0280 0115                	MVI V19,R0
5E34   0378 0001                	CMPI #1,R0
5E36   020C 001C                	BNE T129
                                	;[349] 		dificulty=4
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",349
5E38   02B8 0004                	MVII #4,R0
5E3A   0240 0110                	MVO R0,V11
                                	;[350] 		#maximunScore = 100
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",350
5E3C   02B8 0064                	MVII #100,R0
5E3E   0240 0308                	MVO R0,V12
                                	;[351] 		percentage(0) = 20
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",351
5E40   02B8 0014                	MVII #20,R0
5E42   0240 0127                	MVO R0,Q7
                                	;[352] 		percentage(1) = 20
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",352
5E44   0240 0128                	MVO R0,Q7+1
                                	;[353] 		percentage(2) = 48
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",353
5E46   02B8 0030                	MVII #48,R0
5E48   0240 0129                	MVO R0,Q7+2
                                	;[354] 		percentage(3) = 10
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",354
5E4A   02B8 000A                	MVII #10,R0
5E4C   0240 012A                	MVO R0,Q7+3
                                	;[355] 		percentage(4) = 2
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",355
5E4E   02B8 0002                	MVII #2,R0
5E50   0240 012B                	MVO R0,Q7+4
                                	;[356] 	elseif(level = 2) then 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",356
5E52   0200 011E                	B T130
0x5E54                          T129:
5E54   0280 0115                	MVI V19,R0
5E56   0378 0002                	CMPI #2,R0
5E58   020C 001C                	BNE T131
                                	;[357] 		dificulty=4
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",357
5E5A   02B8 0004                	MVII #4,R0
5E5C   0240 0110                	MVO R0,V11
                                	;[358] 		#maximunScore = 110
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",358
5E5E   02B8 006E                	MVII #110,R0
5E60   0240 0308                	MVO R0,V12
                                	;[359] 		percentage(0) = 25
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",359
5E62   02B8 0019                	MVII #25,R0
5E64   0240 0127                	MVO R0,Q7
                                	;[360] 		percentage(1) = 25
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",360
5E66   0240 0128                	MVO R0,Q7+1
                                	;[361] 		percentage(2) = 38
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",361
5E68   02B8 0026                	MVII #38,R0
5E6A   0240 0129                	MVO R0,Q7+2
                                	;[362] 		percentage(3) = 10
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",362
5E6C   02B8 000A                	MVII #10,R0
5E6E   0240 012A                	MVO R0,Q7+3
                                	;[363] 		percentage(4) = 2
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",363
5E70   02B8 0002                	MVII #2,R0
5E72   0240 012B                	MVO R0,Q7+4
                                	;[364] 	elseif(level = 3) then 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",364
5E74   0200 00FC                	B T130
0x5E76                          T131:
5E76   0280 0115                	MVI V19,R0
5E78   0378 0003                	CMPI #3,R0
5E7A   020C 001C                	BNE T132
                                	;[365] 		dificulty=4
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",365
5E7C   02B8 0004                	MVII #4,R0
5E7E   0240 0110                	MVO R0,V11
                                	;[366] 		#maximunScore = 130
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",366
5E80   02B8 0082                	MVII #130,R0
5E82   0240 0308                	MVO R0,V12
                                	;[367] 		percentage(0) = 38
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",367
5E84   02B8 0026                	MVII #38,R0
5E86   0240 0127                	MVO R0,Q7
                                	;[368] 		percentage(1) = 23
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",368
5E88   02B8 0017                	MVII #23,R0
5E8A   0240 0128                	MVO R0,Q7+1
                                	;[369] 		percentage(2) = 23
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",369
5E8C   0240 0129                	MVO R0,Q7+2
                                	;[370] 		percentage(3) = 10
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",370
5E8E   02B8 000A                	MVII #10,R0
5E90   0240 012A                	MVO R0,Q7+3
                                	;[371] 		percentage(4) = 2
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",371
5E92   02B8 0002                	MVII #2,R0
5E94   0240 012B                	MVO R0,Q7+4
                                	;[372] 	elseif(level = 4) then 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",372
5E96   0200 00DA                	B T130
0x5E98                          T132:
5E98   0280 0115                	MVI V19,R0
5E9A   0378 0004                	CMPI #4,R0
5E9C   020C 001C                	BNE T133
                                	;[373] 		dificulty=5
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",373
5E9E   02B8 0005                	MVII #5,R0
5EA0   0240 0110                	MVO R0,V11
                                	;[374] 		#maximunScore = 150
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",374
5EA2   02B8 0096                	MVII #150,R0
5EA4   0240 0308                	MVO R0,V12
                                	;[375] 		percentage(0) = 47
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",375
5EA6   02B8 002F                	MVII #47,R0
5EA8   0240 0127                	MVO R0,Q7
                                	;[376] 		percentage(1) = 23
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",376
5EAA   02B8 0017                	MVII #23,R0
5EAC   0240 0128                	MVO R0,Q7+1
                                	;[377] 		percentage(2) = 23
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",377
5EAE   0240 0129                	MVO R0,Q7+2
                                	;[378] 		percentage(3) = 7
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",378
5EB0   02B8 0007                	MVII #7,R0
5EB2   0240 012A                	MVO R0,Q7+3
                                	;[379] 		percentage(4) = 3
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",379
5EB4   02B8 0003                	MVII #3,R0
5EB6   0240 012B                	MVO R0,Q7+4
                                	;[380] 	elseif(level = 5) then 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",380
5EB8   0200 00B8                	B T130
0x5EBA                          T133:
5EBA   0280 0115                	MVI V19,R0
5EBC   0378 0005                	CMPI #5,R0
5EBE   020C 001E                	BNE T134
                                	;[381] 		dificulty=5
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",381
5EC0   02B8 0005                	MVII #5,R0
5EC2   0240 0110                	MVO R0,V11
                                	;[382] 		#maximunScore = 250
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",382
5EC4   02B8 00FA                	MVII #250,R0
5EC6   0240 0308                	MVO R0,V12
                                	;[383] 		percentage(0) = 47
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",383
5EC8   02B8 002F                	MVII #47,R0
5ECA   0240 0127                	MVO R0,Q7
                                	;[384] 		percentage(1) = 26
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",384
5ECC   02B8 001A                	MVII #26,R0
5ECE   0240 0128                	MVO R0,Q7+1
                                	;[385] 		percentage(2) = 20
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",385
5ED0   02B8 0014                	MVII #20,R0
5ED2   0240 0129                	MVO R0,Q7+2
                                	;[386] 		percentage(3) = 7
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",386
5ED4   02B8 0007                	MVII #7,R0
5ED6   0240 012A                	MVO R0,Q7+3
                                	;[387] 		percentage(4) = 3
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",387
5ED8   02B8 0003                	MVII #3,R0
5EDA   0240 012B                	MVO R0,Q7+4
                                	;[388] 	elseif(level = 6) then 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",388
5EDC   0200 0094                	B T130
0x5EDE                          T134:
5EDE   0280 0115                	MVI V19,R0
5EE0   0378 0006                	CMPI #6,R0
5EE2   020C 001E                	BNE T135
                                	;[389] 		dificulty=5
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",389
5EE4   02B8 0005                	MVII #5,R0
5EE6   0240 0110                	MVO R0,V11
                                	;[390] 		#maximunScore = 500
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",390
5EE8   02B8 01F4                	MVII #500,R0
5EEA   0240 0308                	MVO R0,V12
                                	;[391] 		percentage(0) = 50
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",391
5EEC   02B8 0032                	MVII #50,R0
5EEE   0240 0127                	MVO R0,Q7
                                	;[392] 		percentage(1) = 30
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",392
5EF0   02B8 001E                	MVII #30,R0
5EF2   0240 0128                	MVO R0,Q7+1
                                	;[393] 		percentage(2) = 20
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",393
5EF4   02B8 0014                	MVII #20,R0
5EF6   0240 0129                	MVO R0,Q7+2
                                	;[394] 		percentage(3) = 7
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",394
5EF8   02B8 0007                	MVII #7,R0
5EFA   0240 012A                	MVO R0,Q7+3
                                	;[395] 		percentage(4) = 3
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",395
5EFC   02B8 0003                	MVII #3,R0
5EFE   0240 012B                	MVO R0,Q7+4
                                	;[396] 	elseif(level = 7) then 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",396
5F00   0200 0070                	B T130
0x5F02                          T135:
5F02   0280 0115                	MVI V19,R0
5F04   0378 0007                	CMPI #7,R0
5F06   020C 001C                	BNE T136
                                	;[397] 		dificulty=6
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",397
5F08   02B8 0006                	MVII #6,R0
5F0A   0240 0110                	MVO R0,V11
                                	;[398] 		#maximunScore = 650
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",398
5F0C   02B8 028A                	MVII #650,R0
5F0E   0240 0308                	MVO R0,V12
                                	;[399] 		percentage(0) = 46
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",399
5F10   02B8 002E                	MVII #46,R0
5F12   0240 0127                	MVO R0,Q7
                                	;[400] 		percentage(1) = 23
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",400
5F14   02B8 0017                	MVII #23,R0
5F16   0240 0128                	MVO R0,Q7+1
                                	;[401] 		percentage(2) = 23
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",401
5F18   0240 0129                	MVO R0,Q7+2
                                	;[402] 		percentage(3) = 5
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",402
5F1A   02B8 0005                	MVII #5,R0
5F1C   0240 012A                	MVO R0,Q7+3
                                	;[403] 		percentage(4) = 4
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",403
5F1E   02B8 0004                	MVII #4,R0
5F20   0240 012B                	MVO R0,Q7+4
                                	;[404] 	elseif(level = 8) then 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",404
5F22   0200 004E                	B T130
0x5F24                          T136:
5F24   0280 0115                	MVI V19,R0
5F26   0378 0008                	CMPI #8,R0
5F28   020C 001B                	BNE T137
                                	;[405] 		dificulty=6
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",405
5F2A   02B8 0006                	MVII #6,R0
5F2C   0240 0110                	MVO R0,V11
                                	;[406] 		#maximunScore = 750
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",406
5F2E   02B8 02EE                	MVII #750,R0
5F30   0240 0308                	MVO R0,V12
                                	;[407] 		percentage(0) = 31
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",407
5F32   02B8 001F                	MVII #31,R0
5F34   0240 0127                	MVO R0,Q7
                                	;[408] 		percentage(1) = 31
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",408
5F36   0240 0128                	MVO R0,Q7+1
                                	;[409] 		percentage(2) = 31
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",409
5F38   0034                     	NOP
5F39   0240 0129                	MVO R0,Q7+2
                                	;[410] 		percentage(3) = 5
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",410
5F3B   02B8 0005                	MVII #5,R0
5F3D   0240 012A                	MVO R0,Q7+3
                                	;[411] 		percentage(4) = 4
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",411
5F3F   02B8 0004                	MVII #4,R0
5F41   0240 012B                	MVO R0,Q7+4
                                	;[412] 	elseif(level = 9) then 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",412
5F43   0200 002D                	B T130
0x5F45                          T137:
5F45   0280 0115                	MVI V19,R0
5F47   0378 0009                	CMPI #9,R0
5F49   020C 0020                	BNE T138
                                	;[413] 		dificulty=6
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",413
5F4B   02B8 0006                	MVII #6,R0
5F4D   0240 0110                	MVO R0,V11
                                	;[414] 		#maximunScore = 1000
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",414
5F4F   02B8 03E8                	MVII #1000,R0
5F51   0240 0308                	MVO R0,V12
                                	;[415] 		percentage(0) = 32
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",415
5F53   02B8 0020                	MVII #32,R0
5F55   0240 0127                	MVO R0,Q7
                                	;[416] 		percentage(1) = 33
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",416
5F57   02B8 0021                	MVII #33,R0
5F59   0240 0128                	MVO R0,Q7+1
                                	;[417] 		percentage(2) = 25
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",417
5F5B   02B8 0019                	MVII #25,R0
5F5D   0240 0129                	MVO R0,Q7+2
                                	;[418] 		percentage(3) = 4
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",418
5F5F   02B8 0004                	MVII #4,R0
5F61   0240 012A                	MVO R0,Q7+3
                                	;[419] 		percentage(4) = 4
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",419
5F63   0240 012B                	MVO R0,Q7+4
                                	;[420] 		lives = 10
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",420
5F65   02B8 000A                	MVII #10,R0
5F67   0240 0116                	MVO R0,V18
                                	;[421] 	else
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",421
5F69   0200 0007                	B T130
0x5F6B                          T138:
                                	;[422] 		level = 1
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",422
5F6B   02B8 0001                	MVII #1,R0
5F6D   0240 0115                	MVO R0,V19
                                	;[423] 		gosub determinelevel
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",423
5F6F   0004 015C 0231           	CALL Q28
                                	;[424] 	end if
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",424
0x5F72                          T130:
                                	;[425] end
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",425
5F72   02B7                     	RETURN
                                	ENDP
                                	;[426] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",426
                                	;[427] background: procedure
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",427
                                	; BACKGROUND
0x5F73                          Q29:	PROC
5F73   0275                     	BEGIN
                                	;[428] 	IF (#univclock % 4) = 0 then street_lineY = (street_lineY + 1) % 7
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",428
5F74   0280 030B                	MVI V20,R0
5F76   03B8 0003                	ANDI #3,R0
5F78   020C 000B                	BNE T139
5F7A   0280 011D                	MVI V21,R0
5F7C   0008                     	INCR R0
0x5F7D                          T140:
5F7D   0338 0007                	SUBI #7,R0
5F7F   0221 0003                	BC T140
5F81   02F8 0007                	ADDI #7,R0
5F83   0240 011D                	MVO R0,V21
0x5F85                          T139:
                                	;[429] 		
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",429
                                	;[430] 	'print at (SCREENPOS(4 - street_lineY(a)/2, 5 + street_lineY(a))) color CS_GREY, "\315"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",430
                                	;[431] 	'print at (SCREENPOS(7, 5 + street_lineY(a))) color CS_GREY, "\316"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",431
                                	;[432] 	'print at (SCREENPOS(9 + street_lineY(a)/2, 5 + street_lineY(a))) color CS_GREY, "\317"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",432
                                	;[433] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",433
                                	;[434] 	SPRITE 5, SpritePosX(4 - street_lineY/2, 0) + VISIBLE, SpritePosY(5 + street_lineY, 0) + ZOOMY2, SPR59 + SPR_GREY
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",434
5F85   02B8 0004                	MVII #4,R0
5F87   0281 011D                	MVI V21,R1
5F89   0061                     	SLR R1,1
5F8A   0108                     	SUBR R1,R0
5F8B   0008                     	INCR R0
5F8C   004C                     	SLL R0,2
5F8D   00C0                     	ADDR R0,R0
5F8E   02F8 0200                	ADDI #512,R0
5F90   0240 0345                	MVO R0,_mobs+5
5F92   0280 011D                	MVI V21,R0
5F94   02F8 0006                	ADDI #6,R0
5F96   004C                     	SLL R0,2
5F97   00C0                     	ADDR R0,R0
5F98   02F8 0100                	ADDI #256,R0
5F9A   0240 034D                	MVO R0,_mobs+13
5F9C   02B8 19D8                	MVII #6616,R0
5F9E   0240 0355                	MVO R0,_mobs+21
                                	;[435] 	SPRITE 6, SpritePosX(7, 0) + VISIBLE, SpritePosY(5 + street_lineY, 0) + ZOOMY2, SPR60 + SPR_GREY
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",435
5FA0   02B8 0240                	MVII #576,R0
5FA2   0240 0346                	MVO R0,_mobs+6
5FA4   0280 011D                	MVI V21,R0
5FA6   02F8 0006                	ADDI #6,R0
5FA8   004C                     	SLL R0,2
5FA9   00C0                     	ADDR R0,R0
5FAA   02F8 0100                	ADDI #256,R0
5FAC   0240 034E                	MVO R0,_mobs+14
5FAE   02B8 19E0                	MVII #6624,R0
5FB0   0240 0356                	MVO R0,_mobs+22
                                	;[436] 	SPRITE 7, SpritePosX(9 + street_lineY/2, 0) + VISIBLE, SpritePosY(5 + street_lineY, 0) + ZOOMY2, SPR61 + SPR_GREY
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",436
5FB2   0280 011D                	MVI V21,R0
5FB4   0060                     	SLR R0,1
5FB5   02F8 000A                	ADDI #10,R0
5FB7   004C                     	SLL R0,2
5FB8   00C0                     	ADDR R0,R0
5FB9   02F8 0200                	ADDI #512,R0
5FBB   0240 0347                	MVO R0,_mobs+7
5FBD   0280 011D                	MVI V21,R0
5FBF   02F8 0006                	ADDI #6,R0
5FC1   004C                     	SLL R0,2
5FC2   00C0                     	ADDR R0,R0
5FC3   02F8 0100                	ADDI #256,R0
5FC5   0240 034F                	MVO R0,_mobs+15
5FC7   02B8 19E8                	MVII #6632,R0
5FC9   0240 0357                	MVO R0,_mobs+23
                                	;[437] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",437
                                	;[438] 	gosub writescore
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",438
5FCB   0004 0158 015C           	CALL Q39
                                	;[439] 	gosub drawhearts
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",439
5FCE   0004 015C 01A6           	CALL Q46
                                	;[440] 	gosub writelevel
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",440
5FD1   0004 015C 0216           	CALL Q48
                                	;[441] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",441
                                	;[442] 	return
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",442
5FD4   02B7                     	RETURN
                                	;[443] end
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",443
                                	ENDP
                                	;[444] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",444
                                	;[445] clearAll:procedure
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",445
                                	; CLEARALL
0x5FD5                          Q32:	PROC
5FD5   0275                     	BEGIN
                                	;[446] 	cls
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",446
5FD6   0004 0150 0014           	CALL CLRSCR
                                	;[447] 	ResetSprite(0)
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",447
5FD9   01C0                     	CLRR R0
5FDA   0240 0340                	MVO R0,_mobs
5FDC   0240 0348                	MVO R0,_mobs+8
5FDE   0034                     	NOP
5FDF   0240 0350                	MVO R0,_mobs+16
                                	;[448] 	ResetSprite(1)
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",448
5FE1   0240 0341                	MVO R0,_mobs+1
5FE3   0034                     	NOP
5FE4   0240 0349                	MVO R0,_mobs+9
5FE6   0240 0351                	MVO R0,_mobs+17
                                	;[449] 	ResetSprite(2)
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",449
5FE8   0034                     	NOP
5FE9   0240 0342                	MVO R0,_mobs+2
5FEB   0240 034A                	MVO R0,_mobs+10
5FED   0034                     	NOP
5FEE   0240 0352                	MVO R0,_mobs+18
                                	;[450] 	ResetSprite(3)
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",450
5FF0   0240 0343                	MVO R0,_mobs+3
5FF2   0034                     	NOP
5FF3   0240 034B                	MVO R0,_mobs+11
5FF5   0240 0353                	MVO R0,_mobs+19
                                	;[451] 	ResetSprite(4)
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",451
5FF7   0034                     	NOP
5FF8   0240 0344                	MVO R0,_mobs+4
5FFA   0240 034C                	MVO R0,_mobs+12
5FFC   0034                     	NOP
5FFD   0240 0354                	MVO R0,_mobs+20
                                	;[452] 	ResetSprite(5)
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",452
5FFF   0240 0345                	MVO R0,_mobs+5
6001   0034                     	NOP
6002   0240 034D                	MVO R0,_mobs+13
6004   0240 0355                	MVO R0,_mobs+21
                                	;[453] 	ResetSprite(6)
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",453
6006   0034                     	NOP
6007   0240 0346                	MVO R0,_mobs+6
6009   0240 034E                	MVO R0,_mobs+14
600B   0034                     	NOP
600C   0240 0356                	MVO R0,_mobs+22
                                	;[454] 	ResetSprite(7) 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",454
600E   0240 0347                	MVO R0,_mobs+7
6010   0034                     	NOP
6011   0240 034F                	MVO R0,_mobs+15
6013   0240 0357                	MVO R0,_mobs+23
                                	;[455] end
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",455
6015   02B7                     	RETURN
                                	ENDP
                                	;[456] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",456
                                	;[457] clearPower:procedure
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",457
                                	; CLEARPOWER
0x6016                          Q33:	PROC
6016   0275                     	BEGIN
                                	;[458] 	invisible = 0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",458
6017   01C0                     	CLRR R0
6018   0240 0113                	MVO R0,V7
                                	;[459] 	jump = 0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",459
601A   0240 0114                	MVO R0,V15
                                	;[460] 	bonus_exp = 0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",460
601C   0034                     	NOP
601D   0240 010D                	MVO R0,V8
                                	;[461] 	bonus_lives = 0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",461
601F   0240 010E                	MVO R0,V9
                                	;[462] 	object(0) = 0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",462
6021   0034                     	NOP
6022   0240 011E                	MVO R0,Q5
                                	;[463] 	object(1) = 0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",463
6024   0240 011F                	MVO R0,Q5+1
                                	;[464] 	object(2) = 0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",464
6026   0034                     	NOP
6027   0240 0120                	MVO R0,Q5+2
                                	;[465] end
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",465
6029   02B7                     	RETURN
                                	ENDP
                                	;[466] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",466
                                	;[467] add_points:	PROCEDURE
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",467
                                	; ADD_POINTS
0x602A                          Q44:	PROC
602A   0275                     	BEGIN
                                	;[468] 	#score = #score + 5
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",468
602B   0280 030A                	MVI V16,R0
602D   02F8 0005                	ADDI #5,R0
602F   0240 030A                	MVO R0,V16
                                	;[469] 	SOUND 1,400,14
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",469
6031   02B8 0190                	MVII #400,R0
6033   0240 01F1                	MVO R0,497
6035   0040                     	SWAP R0
6036   0240 01F5                	MVO R0,501
6038   02B8 000E                	MVII #14,R0
603A   0240 01FC                	MVO R0,508
                                	;[470] 	wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",470
603C   0004 0160 031A           	CALL _wait
                                	;[471] 	SOUND 1,300,14
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",471
603F   02B8 012C                	MVII #300,R0
6041   0240 01F1                	MVO R0,497
6043   0040                     	SWAP R0
6044   0240 01F5                	MVO R0,501
6046   02B8 000E                	MVII #14,R0
6048   0240 01FC                	MVO R0,508
                                	;[472] 	wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",472
604A   0004 0160 031A           	CALL _wait
                                	;[473] 	SOUND 1,500,14
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",473
604D   02B8 01F4                	MVII #500,R0
604F   0240 01F1                	MVO R0,497
6051   0040                     	SWAP R0
6052   0240 01F5                	MVO R0,501
6054   02B8 000E                	MVII #14,R0
6056   0240 01FC                	MVO R0,508
                                	;[474] 	wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",474
6058   0004 0160 031A           	CALL _wait
                                	;[475] 	SOUND 1,,0 ' Turn volume to zero
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",475
605B   01C0                     	CLRR R0
605C   0240 01FC                	MVO R0,508
                                	;[476] end
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",476
605E   02B7                     	RETURN
                                	ENDP
                                	;[477] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",477
                                	;[478] lose_points:	PROCEDURE
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",478
                                	; LOSE_POINTS
0x605F                          Q45:	PROC
605F   0275                     	BEGIN
                                	;[479] 	#score = #score - 10
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",479
6060   0280 030A                	MVI V16,R0
6062   0338 000A                	SUBI #10,R0
6064   0240 030A                	MVO R0,V16
                                	;[480] 	SOUND 1,100,14
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",480
6066   02B8 0064                	MVII #100,R0
6068   0240 01F1                	MVO R0,497
606A   0040                     	SWAP R0
606B   0240 01F5                	MVO R0,501
606D   02B8 000E                	MVII #14,R0
606F   0240 01FC                	MVO R0,508
                                	;[481] 	wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",481
6071   0004 0160 031A           	CALL _wait
                                	;[482] 	SOUND 1,500,14
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",482
6074   02B8 01F4                	MVII #500,R0
6076   0240 01F1                	MVO R0,497
6078   0040                     	SWAP R0
6079   0240 01F5                	MVO R0,501
607B   02B8 000E                	MVII #14,R0
607D   0240 01FC                	MVO R0,508
                                	;[483] 	wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",483
607F   0004 0160 031A           	CALL _wait
                                	;[484] 	SOUND 1,300,14
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",484
6082   02B8 012C                	MVII #300,R0
6084   0240 01F1                	MVO R0,497
6086   0040                     	SWAP R0
6087   0240 01F5                	MVO R0,501
6089   02B8 000E                	MVII #14,R0
608B   0240 01FC                	MVO R0,508
                                	;[485] 	wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",485
608D   0004 0160 031A           	CALL _wait
                                	;[486] 	SOUND 1,,0 ' Turn volume to zero
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",486
6090   01C0                     	CLRR R0
6091   0240 01FC                	MVO R0,508
                                	;[487] end
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",487
6093   02B7                     	RETURN
                                	ENDP
                                	;[488] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",488
                                	;[489] add_lives:	PROCEDURE
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",489
                                	; ADD_LIVES
0x6094                          Q43:	PROC
6094   0275                     	BEGIN
                                	;[490] 	lives = lives + 1
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",490
6095   0280 0116                	MVI V18,R0
6097   0008                     	INCR R0
6098   0240 0116                	MVO R0,V18
                                	;[491] 	SOUND 1,200,14
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",491
609A   02B8 00C8                	MVII #200,R0
609C   0240 01F1                	MVO R0,497
609E   0040                     	SWAP R0
609F   0240 01F5                	MVO R0,501
60A1   02B8 000E                	MVII #14,R0
60A3   0240 01FC                	MVO R0,508
                                	;[492] 	wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",492
60A5   0004 0160 031A           	CALL _wait
                                	;[493] 	SOUND 1,300,14
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",493
60A8   02B8 012C                	MVII #300,R0
60AA   0240 01F1                	MVO R0,497
60AC   0040                     	SWAP R0
60AD   0240 01F5                	MVO R0,501
60AF   02B8 000E                	MVII #14,R0
60B1   0240 01FC                	MVO R0,508
                                	;[494] 	wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",494
60B3   0004 0160 031A           	CALL _wait
                                	;[495] 	SOUND 1,400,14
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",495
60B6   02B8 0190                	MVII #400,R0
60B8   0240 01F1                	MVO R0,497
60BA   0040                     	SWAP R0
60BB   0240 01F5                	MVO R0,501
60BD   02B8 000E                	MVII #14,R0
60BF   0240 01FC                	MVO R0,508
                                	;[496] 	wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",496
60C1   0004 0160 031A           	CALL _wait
                                	;[497] 	SOUND 1,500,14
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",497
60C4   02B8 01F4                	MVII #500,R0
60C6   0240 01F1                	MVO R0,497
60C8   0040                     	SWAP R0
60C9   0240 01F5                	MVO R0,501
60CB   02B8 000E                	MVII #14,R0
60CD   0240 01FC                	MVO R0,508
                                	;[498] 	wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",498
60CF   0004 0160 031A           	CALL _wait
                                	;[499] 	SOUND 1,,0 ' Turn volume to zero
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",499
60D2   01C0                     	CLRR R0
60D3   0240 01FC                	MVO R0,508
                                	;[500] end
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",500
60D5   02B7                     	RETURN
                                	ENDP
                                	;[501] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",501
                                	;[502] end:
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",502
                                	; END
0x60D6                          Q35:	;[503] 	wait
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",503
60D6   0004 0160 031A           	CALL _wait
                                	;[504] 	print at SCREENPOS(6, 5) color CS_RED, "Good Bye!"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",504
60D9   02B8 026A                	MVII #618,R0
60DB   0240 033E                	MVO R0,_screen
60DD   02B8 0002                	MVII #2,R0
60DF   0240 033F                	MVO R0,_color
60E1   0284 033E                	MVI _screen,R4
60E3   02B8 0138                	MVII #312,R0
60E5   03C0 033F                	XOR _color,R0
60E7   0260                     	MVO@ R0,R4
60E8   03F8 0340                	XORI #832,R0
60EA   0260                     	MVO@ R0,R4
60EB   0260                     	MVO@ R0,R4
60EC   03F8 0058                	XORI #88,R0
60EE   0260                     	MVO@ R0,R4
60EF   03F8 0220                	XORI #544,R0
60F1   0260                     	MVO@ R0,R4
60F2   03F8 0110                	XORI #272,R0
60F4   0260                     	MVO@ R0,R4
60F5   03F8 03D8                	XORI #984,R0
60F7   0260                     	MVO@ R0,R4
60F8   03F8 00E0                	XORI #224,R0
60FA   0260                     	MVO@ R0,R4
60FB   03F8 0220                	XORI #544,R0
60FD   0260                     	MVO@ R0,R4
60FE   0244 033E                	MVO R4,_screen
                                	;[505] 	goto end
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",505
6100   0220 002B                	B Q35
                                	;[506] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",506
                                	;[507] player:
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",507
                                	; PLAYER
0x6102                          Q12:	;[508] 	'frame 0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",508
                                	;[509] 	BITMAP "..####.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",509
                                	;[510] 	BITMAP "#.####.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",510
6102   BC3C                     	DECLE 48188
                                	;[511] 	BITMAP "#.######"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",511
                                	;[512] 	BITMAP "######.#"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",512
6103   FDBF                     	DECLE 64959
                                	;[513] 	BITMAP "..####.#"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",513
                                	;[514] 	BITMAP "..####.#"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",514
6104   3D3D                     	DECLE 15677
                                	;[515] 	BITMAP "..#....."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",515
                                	;[516] 	BITMAP "..#....."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",516
6105   2020                     	DECLE 8224
                                	;[517] 	'frame 1
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",517
                                	;[518] 	BITMAP "..####.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",518
                                	;[519] 	BITMAP "..####.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",519
6106   3C3C                     	DECLE 15420
                                	;[520] 	BITMAP "#.####.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",520
                                	;[521] 	BITMAP "########"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",521
6107   FFBC                     	DECLE 65468
                                	;[522] 	BITMAP "..####.#"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",522
                                	;[523] 	BITMAP "..####.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",523
6108   3C3D                     	DECLE 15421
                                	;[524] 	BITMAP "..#..#.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",524
                                	;[525] 	BITMAP "..#....."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",525
6109   2024                     	DECLE 8228
                                	;[526] 	'frame 2
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",526
                                	;[527] 	BITMAP "..####.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",527
                                	;[528] 	BITMAP "..####.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",528
610A   3C3C                     	DECLE 15420
                                	;[529] 	BITMAP "..####.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",529
                                	;[530] 	BITMAP "########"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",530
610B   FF3C                     	DECLE 65340
                                	;[531] 	BITMAP "..####.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",531
                                	;[532] 	BITMAP "..####.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",532
610C   3C3C                     	DECLE 15420
                                	;[533] 	BITMAP "..#..#.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",533
                                	;[534] 	BITMAP "..#..#.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",534
610D   2424                     	DECLE 9252
                                	;[535] 	'frame 3
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",535
                                	;[536] 	BITMAP "..####.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",536
                                	;[537] 	BITMAP "..####.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",537
610E   3C3C                     	DECLE 15420
                                	;[538] 	BITMAP "..####.#"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",538
                                	;[539] 	BITMAP "########"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",539
610F   FF3D                     	DECLE 65341
                                	;[540] 	BITMAP "#.####.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",540
                                	;[541] 	BITMAP "..####.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",541
6110   3CBC                     	DECLE 15548
                                	;[542] 	BITMAP "..#..#.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",542
                                	;[543] 	BITMAP ".....#.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",543
6111   0424                     	DECLE 1060
                                	;[544] 	'frame 4
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",544
                                	;[545] 	BITMAP "..####.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",545
                                	;[546] 	BITMAP "..####.#"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",546
6112   3D3C                     	DECLE 15676
                                	;[547] 	BITMAP "######.#"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",547
                                	;[548] 	BITMAP "#.######"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",548
6113   BFFD                     	DECLE 49149
                                	;[549] 	BITMAP "#.####.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",549
                                	;[550] 	BITMAP "#.####.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",550
6114   BCBC                     	DECLE 48316
                                	;[551] 	BITMAP ".....#.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",551
                                	;[552] 	BITMAP ".....#.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",552
6115   0404                     	DECLE 1028
                                	;[553] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",553
                                	;[554] tiles:	'heart icon
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",554
                                	; TILES
0x6116                          Q13:	;[555] 	BITMAP "........"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",555
                                	;[556] 	BITMAP ".##.##.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",556
6116   6C00                     	DECLE 27648
                                	;[557] 	BITMAP "#.##.##."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",557
                                	;[558] 	BITMAP "#######."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",558
6117   FEB6                     	DECLE 65206
                                	;[559] 	BITMAP ".#####.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",559
                                	;[560] 	BITMAP "..###..."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",560
6118   387C                     	DECLE 14460
                                	;[561] 	BITMAP "...#...."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",561
                                	;[562] 	BITMAP "........"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",562
6119   0010                     	DECLE 16
                                	;[563] 	'empty heart icon
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",563
                                	;[564] 	BITMAP "........"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",564
                                	;[565] 	BITMAP ".##.##.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",565
611A   6C00                     	DECLE 27648
                                	;[566] 	BITMAP "##.##.#."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",566
                                	;[567] 	BITMAP "#.....#."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",567
611B   82DA                     	DECLE 33498
                                	;[568] 	BITMAP ".#...#.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",568
                                	;[569] 	BITMAP "..#.#..."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",569
611C   2844                     	DECLE 10308
                                	;[570] 	BITMAP "...#...."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",570
                                	;[571] 	BITMAP "........"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",571
611D   0010                     	DECLE 16
                                	;[572] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",572
                                	;[573] street:
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",573
                                	; STREET
0x611E                          Q14:	;[574] 	'left
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",574
                                	;[575] 	BITMAP "....##.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",575
                                	;[576] 	BITMAP "....##.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",576
611E   0C0C                     	DECLE 3084
                                	;[577] 	BITMAP "....##.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",577
                                	;[578] 	BITMAP "...###.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",578
611F   1C0C                     	DECLE 7180
                                	;[579] 	BITMAP "...##..."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",579
                                	;[580] 	BITMAP "...##..."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",580
6120   1818                     	DECLE 6168
                                	;[581] 	BITMAP "...##..."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",581
                                	;[582] 	BITMAP "...##..."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",582
6121   1818                     	DECLE 6168
                                	;[583] 	'center
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",583
                                	;[584] 	BITMAP "##......"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",584
                                	;[585] 	BITMAP "##......"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",585
6122   C0C0                     	DECLE 49344
                                	;[586] 	BITMAP "##......"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",586
                                	;[587] 	BITMAP "##......"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",587
6123   C0C0                     	DECLE 49344
                                	;[588] 	BITMAP "##......"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",588
                                	;[589] 	BITMAP "##......"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",589
6124   C0C0                     	DECLE 49344
                                	;[590] 	BITMAP "##......"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",590
                                	;[591] 	BITMAP "##......"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",591
6125   C0C0                     	DECLE 49344
                                	;[592] 	'left
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",592
                                	;[593] 	BITMAP "..##...."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",593
                                	;[594] 	BITMAP "..##...."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",594
6126   3030                     	DECLE 12336
                                	;[595] 	BITMAP "..##...."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",595
                                	;[596] 	BITMAP "..##...."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",596
6127   3030                     	DECLE 12336
                                	;[597] 	BITMAP "..###..."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",597
                                	;[598] 	BITMAP "...##..."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",598
6128   1838                     	DECLE 6200
                                	;[599] 	BITMAP "...##..."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",599
                                	;[600] 	BITMAP "...##..."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",600
6129   1818                     	DECLE 6168
                                	;[601] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",601
                                	;[602] apple:
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",602
                                	; APPLE
0x612A                          Q18:	;[603] 	BITMAP ".....#.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",603
                                	;[604] 	BITMAP "....#..."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",604
612A   0804                     	DECLE 2052
                                	;[605] 	BITMAP "..##.##."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",605
                                	;[606] 	BITMAP ".#######"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",606
612B   7F36                     	DECLE 32566
                                	;[607] 	BITMAP ".#######"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",607
                                	;[608] 	BITMAP ".#######"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",608
612C   7F7F                     	DECLE 32639
                                	;[609] 	BITMAP "..#####."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",609
                                	;[610] 	BITMAP "..##.##."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",610
612D   363E                     	DECLE 13886
                                	;[611] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",611
                                	;[612] nothing:
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",612
                                	; NOTHING
0x612E                          Q15:	;[613] 	BITMAP "........"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",613
                                	;[614] 	BITMAP "........"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",614
612E   0000                     	DECLE 0
                                	;[615] 	BITMAP "........"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",615
                                	;[616] 	BITMAP "........"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",616
612F   0000                     	DECLE 0
                                	;[617] 	BITMAP "........"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",617
                                	;[618] 	BITMAP "........"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",618
6130   0000                     	DECLE 0
                                	;[619] 	BITMAP "........"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",619
                                	;[620] 	BITMAP "........"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",620
6131   0000                     	DECLE 0
                                	;[621] 	
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",621
                                	;[622] rock:
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",622
                                	; ROCK
0x6132                          Q16:	;[623] 	BITMAP "..#####."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",623
                                	;[624] 	BITMAP ".#.#####"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",624
6132   5F3E                     	DECLE 24382
                                	;[625] 	BITMAP "####..##"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",625
                                	;[626] 	BITMAP "####.###"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",626
6133   F7F3                     	DECLE 63475
                                	;[627] 	BITMAP "########"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",627
                                	;[628] 	BITMAP "########"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",628
6134   FFFF                     	DECLE 65535
                                	;[629] 	BITMAP ".###.##."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",629
                                	;[630] 	BITMAP "..####.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",630
6135   3C76                     	DECLE 15478
                                	;[631] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",631
                                	;[632] coin:
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",632
                                	; COIN
0x6136                          Q17:	;[633] 	BITMAP "..####.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",633
                                	;[634] 	BITMAP ".######."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",634
6136   7E3C                     	DECLE 32316
                                	;[635] 	BITMAP "########"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",635
                                	;[636] 	BITMAP "###..###"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",636
6137   E7FF                     	DECLE 59391
                                	;[637] 	BITMAP "###..###"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",637
                                	;[638] 	BITMAP "########"
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",638
6138   FFE7                     	DECLE 65511
                                	;[639] 	BITMAP ".######."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",639
                                	;[640] 	BITMAP "..####.."
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",640
6139   3C7E                     	DECLE 15486
                                	;[641] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",641
                                	;[642] 	' 49 bitmaps
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",642
                                	;[643] screen_bitmaps_0:
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",643
                                	; SCREEN_BITMAPS_0
0x613A                          Q8:	;[644] 	DATA $FFFF,$E0FF,$E0E0,$E0E0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",644
613A   FFFF                     	DECLE 65535
613B   E0FF                     	DECLE 57599
613C   E0E0                     	DECLE 57568
613D   E0E0                     	DECLE 57568
                                	;[645] 	DATA $FFFF,$00FF,$0000,$0000
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",645
613E   FFFF                     	DECLE 65535
613F   00FF                     	DECLE 255
6140   0000                     	DECLE 0
6141   0000                     	DECLE 0
                                	;[646] 	DATA $FFFF,$07FF,$0707,$0707
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",646
6142   FFFF                     	DECLE 65535
6143   07FF                     	DECLE 2047
6144   0707                     	DECLE 1799
6145   0707                     	DECLE 1799
                                	;[647] 	DATA $0100,$0D07,$1F1F,$FF7F
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",647
6146   0100                     	DECLE 256
6147   0D07                     	DECLE 3335
6148   1F1F                     	DECLE 7967
6149   FF7F                     	DECLE 65407
                                	;[648] 	DATA $76E0,$BA6F,$F7CD,$FFFF
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",648
614A   76E0                     	DECLE 30432
614B   BA6F                     	DECLE 47727
614C   F7CD                     	DECLE 63437
614D   FFFF                     	DECLE 65535
                                	;[649] 	DATA $E0E0,$E0E0,$E0E0,$E0E0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",649
614E   E0E0                     	DECLE 57568
614F   E0E0                     	DECLE 57568
6150   E0E0                     	DECLE 57568
6151   E0E0                     	DECLE 57568
                                	;[650] 	DATA $6000,$C390,$1424,$6394
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",650
6152   6000                     	DECLE 24576
6153   C390                     	DECLE 50064
6154   1424                     	DECLE 5156
6155   6394                     	DECLE 25492
                                	;[651] 	DATA $0000,$3B00,$45C5,$3BC5
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",651
6156   0000                     	DECLE 0
6157   3B00                     	DECLE 15104
6158   45C5                     	DECLE 17861
6159   3BC5                     	DECLE 15301
                                	;[652] 	DATA $0000,$D900,$3C24,$9D20
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",652
615A   0000                     	DECLE 0
615B   D900                     	DECLE 55552
615C   3C24                     	DECLE 15396
615D   9D20                     	DECLE 40224
                                	;[653] 	DATA $0707,$0707,$0707,$0707
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",653
615E   0707                     	DECLE 1799
615F   0707                     	DECLE 1799
6160   0707                     	DECLE 1799
6161   0707                     	DECLE 1799
                                	;[654] 	DATA $E000,$4542,$4242,$FF4A
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",654
6162   E000                     	DECLE 57344
6163   4542                     	DECLE 17730
6164   4242                     	DECLE 16962
6165   FF4A                     	DECLE 65354
                                	;[655] 	DATA $0000,$A600,$AFA9,$47C8
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",655
6166   0000                     	DECLE 0
6167   A600                     	DECLE 42496
6168   AFA9                     	DECLE 44969
6169   47C8                     	DECLE 18376
                                	;[656] 	DATA $0000,$3C00,$3040,$7408
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",656
616A   0000                     	DECLE 0
616B   3C00                     	DECLE 15360
616C   3040                     	DECLE 12352
616D   7408                     	DECLE 29704
                                	;[657] 	DATA $FFFF,$FEFE,$FCFC,$F8F8
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",657
616E   FFFF                     	DECLE 65535
616F   FEFE                     	DECLE 65278
6170   FCFC                     	DECLE 64764
6171   F8F8                     	DECLE 63736
                                	;[658] 	DATA $0F00,$1F1F,$3F3F,$7F7F
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",658
6172   0F00                     	DECLE 3840
6173   1F1F                     	DECLE 7967
6174   3F3F                     	DECLE 16191
6175   7F7F                     	DECLE 32639
                                	;[659] 	DATA $FF00,$FFFF,$FFFF,$FFFF
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",659
6176   FF00                     	DECLE 65280
6177   FFFF                     	DECLE 65535
6178   FFFF                     	DECLE 65535
6179   FFFF                     	DECLE 65535
                                	;[660] screen_bitmaps_1:
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",660
                                	; SCREEN_BITMAPS_1
0x617A                          Q9:	;[661] 	DATA $FE00,$FEFE,$FEFE,$FEFE
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",661
617A   FE00                     	DECLE 65024
617B   FEFE                     	DECLE 65278
617C   FEFE                     	DECLE 65278
617D   FEFE                     	DECLE 65278
                                	;[662] 	DATA $7F00,$7F7F,$7F7F,$BF7F
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",662
617E   7F00                     	DECLE 32512
617F   7F7F                     	DECLE 32639
6180   7F7F                     	DECLE 32639
6181   BF7F                     	DECLE 49023
                                	;[663] 	DATA $F000,$F8F8,$FCFC,$FEFE
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",663
6182   F000                     	DECLE 61440
6183   F8F8                     	DECLE 63736
6184   FCFC                     	DECLE 64764
6185   FEFE                     	DECLE 65278
                                	;[664] 	DATA $0101,$0000,$0000,$0000
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",664
6186   0101                     	DECLE 257
6187   0000                     	DECLE 0
6188   0000                     	DECLE 0
6189   0000                     	DECLE 0
                                	;[665] 	DATA $FFFF,$7FFF,$3F7F,$1F1F
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",665
618A   FFFF                     	DECLE 65535
618B   7FFF                     	DECLE 32767
618C   3F7F                     	DECLE 16255
618D   1F1F                     	DECLE 7967
                                	;[666] 	DATA $F0F0,$C0E0,$80C0,$0080
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",666
618E   F0F0                     	DECLE 61680
618F   C0E0                     	DECLE 49376
6190   80C0                     	DECLE 32960
6191   0080                     	DECLE 128
                                	;[667] 	DATA $0000,$0101,$0303,$0707
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",667
6192   0000                     	DECLE 0
6193   0101                     	DECLE 257
6194   0303                     	DECLE 771
6195   0707                     	DECLE 1799
                                	;[668] 	DATA $FDFD,$FDFD,$FDFD,$FBFD
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",668
6196   FDFD                     	DECLE 65021
6197   FDFD                     	DECLE 65021
6198   FDFD                     	DECLE 65021
6199   FBFD                     	DECLE 64509
                                	;[669] 	DATA $BFBF,$BFBF,$BFBF,$DFDF
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",669
619A   BFBF                     	DECLE 49087
619B   BFBF                     	DECLE 49087
619C   BFBF                     	DECLE 49087
619D   DFDF                     	DECLE 57311
                                	;[670] 	DATA $0000,$8080,$C0C0,$E0E0
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",670
619E   0000                     	DECLE 0
619F   8080                     	DECLE 32896
61A0   C0C0                     	DECLE 49344
61A1   E0E0                     	DECLE 57568
                                	;[671] 	DATA $070F,$0307,$0101,$0000
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",671
61A2   070F                     	DECLE 1807
61A3   0307                     	DECLE 775
61A4   0101                     	DECLE 257
61A5   0000                     	DECLE 0
                                	;[672] 	DATA $FFFF,$FFFF,$FFFF,$7FFF
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",672
61A6   FFFF                     	DECLE 65535
61A7   FFFF                     	DECLE 65535
61A8   FFFF                     	DECLE 65535
61A9   7FFF                     	DECLE 32767
                                	;[673] 	DATA $FEFF,$FCFE,$F8FC,$F0F8
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",673
61AA   FEFF                     	DECLE 65279
61AB   FCFE                     	DECLE 64766
61AC   F8FC                     	DECLE 63740
61AD   F0F8                     	DECLE 61688
                                	;[674] 	DATA $0F0F,$1F1F,$3F3F,$7F7F
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",674
61AE   0F0F                     	DECLE 3855
61AF   1F1F                     	DECLE 7967
61B0   3F3F                     	DECLE 16191
61B1   7F7F                     	DECLE 32639
                                	;[675] 	DATA $FBFB,$FBFB,$FBFB,$F7F7
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",675
61B2   FBFB                     	DECLE 64507
61B3   FBFB                     	DECLE 64507
61B4   FBFB                     	DECLE 64507
61B5   F7F7                     	DECLE 63479
                                	;[676] 	DATA $DFDF,$DFDF,$EFDF,$EFEF
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",676
61B6   DFDF                     	DECLE 57311
61B7   DFDF                     	DECLE 57311
61B8   EFDF                     	DECLE 61407
61B9   EFEF                     	DECLE 61423
                                	;[677] screen_bitmaps_2:
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",677
                                	; SCREEN_BITMAPS_2
0x61BA                          Q10:	;[678] 	DATA $F0F0,$F8F8,$FCFC,$FEFE
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",678
61BA   F0F0                     	DECLE 61680
61BB   F8F8                     	DECLE 63736
61BC   FCFC                     	DECLE 64764
61BD   FEFE                     	DECLE 65278
                                	;[679] 	DATA $3F7F,$1F1F,$070F,$0307
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",679
61BE   3F7F                     	DECLE 16255
61BF   1F1F                     	DECLE 7967
61C0   070F                     	DECLE 1807
61C1   0307                     	DECLE 775
                                	;[680] 	DATA $E000,$4340,$4744,$FB4C
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",680
61C2   E000                     	DECLE 57344
61C3   4340                     	DECLE 17216
61C4   4744                     	DECLE 18244
61C5   FB4C                     	DECLE 64332
                                	;[681] 	DATA $0000,$3400,$9595,$8819
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",681
61C6   0000                     	DECLE 0
61C7   3400                     	DECLE 13312
61C8   9595                     	DECLE 38293
61C9   8819                     	DECLE 34841
                                	;[682] 	DATA $0C00,$C604,$E424,$EE04
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",682
61CA   0C00                     	DECLE 3072
61CB   C604                     	DECLE 50692
61CC   E424                     	DECLE 58404
61CD   EE04                     	DECLE 60932
                                	;[683] 	DATA $E0E0,$C0C0,$8080,$0000
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",683
61CE   E0E0                     	DECLE 57568
61CF   C0C0                     	DECLE 49344
61D0   8080                     	DECLE 32896
61D1   0000                     	DECLE 0
                                	;[684] 	DATA $F7F7,$F7F7,$EFF7,$EFEF
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",684
61D2   F7F7                     	DECLE 63479
61D3   F7F7                     	DECLE 63479
61D4   EFF7                     	DECLE 61431
61D5   EFEF                     	DECLE 61423
                                	;[685] 	DATA $EFEF,$EFEF,$F7F7,$F7F7
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",685
61D6   EFEF                     	DECLE 61423
61D7   EFEF                     	DECLE 61423
61D8   F7F7                     	DECLE 63479
61D9   F7F7                     	DECLE 63479
                                	;[686] 	DATA $EFEF,$EFEF,$DFDF,$DFDF
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",686
61DA   EFEF                     	DECLE 61423
61DB   EFEF                     	DECLE 61423
61DC   DFDF                     	DECLE 57311
61DD   DFDF                     	DECLE 57311
                                	;[687] 	DATA $F7F7,$FBF7,$FBFB,$FBFB
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",687
61DE   F7F7                     	DECLE 63479
61DF   FBF7                     	DECLE 64503
61E0   FBFB                     	DECLE 64507
61E1   FBFB                     	DECLE 64507
                                	;[688] 	DATA $DFDF,$BFDF,$BFBF,$BFBF
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",688
61E2   DFDF                     	DECLE 57311
61E3   BFDF                     	DECLE 49119
61E4   BFBF                     	DECLE 49087
61E5   BFBF                     	DECLE 49087
                                	;[689] 	DATA $FBFB,$FDFD,$FDFD,$FDFD
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",689
61E6   FBFB                     	DECLE 64507
61E7   FDFD                     	DECLE 65021
61E8   FDFD                     	DECLE 65021
61E9   FDFD                     	DECLE 65021
                                	;[690] 	DATA $BFBF,$7F7F,$7F7F,$7F7F
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",690
61EA   BFBF                     	DECLE 49087
61EB   7F7F                     	DECLE 32639
61EC   7F7F                     	DECLE 32639
61ED   7F7F                     	DECLE 32639
                                	;[691] 	DATA $FEFD,$FEFE,$FEFE,$FEFE
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",691
61EE   FEFD                     	DECLE 65277
61EF   FEFE                     	DECLE 65278
61F0   FEFE                     	DECLE 65278
61F1   FEFE                     	DECLE 65278
                                	;[692] 	DATA $E0E0,$E0E0,$FFE0,$FFFF
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",692
61F2   E0E0                     	DECLE 57568
61F3   E0E0                     	DECLE 57568
61F4   FFE0                     	DECLE 65504
61F5   FFFF                     	DECLE 65535
                                	;[693] 	DATA $0000,$0000,$FF00,$FFFF
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",693
61F6   0000                     	DECLE 0
61F7   0000                     	DECLE 0
61F8   FF00                     	DECLE 65280
61F9   FFFF                     	DECLE 65535
                                	;[694] screen_bitmaps_3:
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",694
                                	; SCREEN_BITMAPS_3
0x61FA                          Q11:	;[695] 	DATA $0707,$0707,$FF07,$FFFF
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",695
61FA   0707                     	DECLE 1799
61FB   0707                     	DECLE 1799
61FC   FF07                     	DECLE 65287
61FD   FFFF                     	DECLE 65535
                                	;[696] 
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",696
                                	;[697] 	REM 20x12 cards
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",697
                                	;[698] screen_cards:
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",698
                                	; SCREEN_CARDS
0x61FE                          Q27:	;[699] 	DATA $1200,$1200,$1200,$1200,$1200,$1200,$1200,$1200,$1200,$1200,$1200,$1200,$1200,$1200,$1200,$1E00,$1E08,$1E08,$1E08,$1E10
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",699
61FE   1200                     	DECLE 4608
61FF   1200                     	DECLE 4608
6200   1200                     	DECLE 4608
6201   1200                     	DECLE 4608
6202   1200                     	DECLE 4608
6203   1200                     	DECLE 4608
6204   1200                     	DECLE 4608
6205   1200                     	DECLE 4608
6206   1200                     	DECLE 4608
6207   1200                     	DECLE 4608
6208   1200                     	DECLE 4608
6209   1200                     	DECLE 4608
620A   1200                     	DECLE 4608
620B   1200                     	DECLE 4608
620C   1200                     	DECLE 4608
620D   1E00                     	DECLE 7680
620E   1E08                     	DECLE 7688
620F   1E08                     	DECLE 7688
6210   1E08                     	DECLE 7688
6211   1E10                     	DECLE 7696
                                	;[700] 	DATA $1200,$1A1F,$1A27,$1200,$1200,$1200,$1200,$1200,$1200,$1A1F,$1A27,$1200,$1200,$1200,$1200,$1E28,$1E37,$1E3F,$1E47,$1E48
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",700
6212   1200                     	DECLE 4608
6213   1A1F                     	DECLE 6687
6214   1A27                     	DECLE 6695
6215   1200                     	DECLE 4608
6216   1200                     	DECLE 4608
6217   1200                     	DECLE 4608
6218   1200                     	DECLE 4608
6219   1200                     	DECLE 4608
621A   1200                     	DECLE 4608
621B   1A1F                     	DECLE 6687
621C   1A27                     	DECLE 6695
621D   1200                     	DECLE 4608
621E   1200                     	DECLE 4608
621F   1200                     	DECLE 4608
6220   1200                     	DECLE 4608
6221   1E28                     	DECLE 7720
6222   1E37                     	DECLE 7735
6223   1E3F                     	DECLE 7743
6224   1E47                     	DECLE 7751
6225   1E48                     	DECLE 7752
                                	;[701] 	DATA $1200,$1200,$1200,$1200,$1A1F,$1A27,$1200,$1200,$1200,$1200,$1200,$1200,$1200,$1200,$1200,$1E28,$1600,$1600,$1600,$1E48
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",701
6226   1200                     	DECLE 4608
6227   1200                     	DECLE 4608
6228   1200                     	DECLE 4608
6229   1200                     	DECLE 4608
622A   1A1F                     	DECLE 6687
622B   1A27                     	DECLE 6695
622C   1200                     	DECLE 4608
622D   1200                     	DECLE 4608
622E   1200                     	DECLE 4608
622F   1200                     	DECLE 4608
6230   1200                     	DECLE 4608
6231   1200                     	DECLE 4608
6232   1200                     	DECLE 4608
6233   1200                     	DECLE 4608
6234   1200                     	DECLE 4608
6235   1E28                     	DECLE 7720
6236   1600                     	DECLE 5632
6237   1600                     	DECLE 5632
6238   1600                     	DECLE 5632
6239   1E48                     	DECLE 7752
                                	;[702] 	DATA $1200,$1200,$1200,$1200,$1200,$1200,$1200,$1A1F,$1A27,$1200,$1200,$1200,$1200,$1200,$1200,$1E28,$1600,$1600,$1600,$1E48
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",702
623A   1200                     	DECLE 4608
623B   1200                     	DECLE 4608
623C   1200                     	DECLE 4608
623D   1200                     	DECLE 4608
623E   1200                     	DECLE 4608
623F   1200                     	DECLE 4608
6240   1200                     	DECLE 4608
6241   1A1F                     	DECLE 6687
6242   1A27                     	DECLE 6695
6243   1200                     	DECLE 4608
6244   1200                     	DECLE 4608
6245   1200                     	DECLE 4608
6246   1200                     	DECLE 4608
6247   1200                     	DECLE 4608
6248   1200                     	DECLE 4608
6249   1E28                     	DECLE 7720
624A   1600                     	DECLE 5632
624B   1600                     	DECLE 5632
624C   1600                     	DECLE 5632
624D   1E48                     	DECLE 7752
                                	;[703] 	DATA $1200,$1200,$1200,$1200,$1200,$1200,$1200,$1200,$1200,$1200,$1200,$1200,$1200,$1200,$1200,$1E28,$1E57,$1E5F,$1E67,$1E48
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",703
624E   1200                     	DECLE 4608
624F   1200                     	DECLE 4608
6250   1200                     	DECLE 4608
6251   1200                     	DECLE 4608
6252   1200                     	DECLE 4608
6253   1200                     	DECLE 4608
6254   1200                     	DECLE 4608
6255   1200                     	DECLE 4608
6256   1200                     	DECLE 4608
6257   1200                     	DECLE 4608
6258   1200                     	DECLE 4608
6259   1200                     	DECLE 4608
625A   1200                     	DECLE 4608
625B   1200                     	DECLE 4608
625C   1200                     	DECLE 4608
625D   1E28                     	DECLE 7720
625E   1E57                     	DECLE 7767
625F   1E5F                     	DECLE 7775
6260   1E67                     	DECLE 7783
6261   1E48                     	DECLE 7752
                                	;[704] 	DATA $2400,$186E,$1000,$1874,$187C,$1884,$187C,$187C,$188C,$187C,$1894,$189E,$18A6,$2400,$2400,$1E28,$1600,$1600,$1600,$1E48
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",704
6262   2400                     	DECLE 9216
6263   186E                     	DECLE 6254
6264   1000                     	DECLE 4096
6265   1874                     	DECLE 6260
6266   187C                     	DECLE 6268
6267   1884                     	DECLE 6276
6268   187C                     	DECLE 6268
6269   187C                     	DECLE 6268
626A   188C                     	DECLE 6284
626B   187C                     	DECLE 6268
626C   1894                     	DECLE 6292
626D   189E                     	DECLE 6302
626E   18A6                     	DECLE 6310
626F   2400                     	DECLE 9216
6270   2400                     	DECLE 9216
6271   1E28                     	DECLE 7720
6272   1600                     	DECLE 5632
6273   1600                     	DECLE 5632
6274   1600                     	DECLE 5632
6275   1E48                     	DECLE 7752
                                	;[705] 	DATA $2400,$18AE,$18B4,$2000,$2000,$18BC,$2000,$2000,$18C4,$2000,$2000,$18CC,$18D6,$18DE,$2400,$1E28,$1600,$1600,$1600,$1E48
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",705
6276   2400                     	DECLE 9216
6277   18AE                     	DECLE 6318
6278   18B4                     	DECLE 6324
6279   2000                     	DECLE 8192
627A   2000                     	DECLE 8192
627B   18BC                     	DECLE 6332
627C   2000                     	DECLE 8192
627D   2000                     	DECLE 8192
627E   18C4                     	DECLE 6340
627F   2000                     	DECLE 8192
6280   2000                     	DECLE 8192
6281   18CC                     	DECLE 6348
6282   18D6                     	DECLE 6358
6283   18DE                     	DECLE 6366
6284   2400                     	DECLE 9216
6285   1E28                     	DECLE 7720
6286   1600                     	DECLE 5632
6287   1600                     	DECLE 5632
6288   1600                     	DECLE 5632
6289   1E48                     	DECLE 7752
                                	;[706] 	DATA $18E6,$1000,$18EC,$2000,$2000,$18F4,$2000,$2000,$18FC,$2000,$2000,$1904,$1000,$190E,$2400,$1E28,$1F17,$1F1F,$1F27,$1E48
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",706
628A   18E6                     	DECLE 6374
628B   1000                     	DECLE 4096
628C   18EC                     	DECLE 6380
628D   2000                     	DECLE 8192
628E   2000                     	DECLE 8192
628F   18F4                     	DECLE 6388
6290   2000                     	DECLE 8192
6291   2000                     	DECLE 8192
6292   18FC                     	DECLE 6396
6293   2000                     	DECLE 8192
6294   2000                     	DECLE 8192
6295   1904                     	DECLE 6404
6296   1000                     	DECLE 4096
6297   190E                     	DECLE 6414
6298   2400                     	DECLE 9216
6299   1E28                     	DECLE 7720
629A   1F17                     	DECLE 7959
629B   1F1F                     	DECLE 7967
629C   1F27                     	DECLE 7975
629D   1E48                     	DECLE 7752
                                	;[707] 	DATA $192E,$18B4,$2000,$2000,$2000,$1934,$2000,$2000,$193C,$2000,$2000,$2000,$18CC,$189E,$18A6,$1E28,$1600,$1600,$1600,$1E48
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",707
629E   192E                     	DECLE 6446
629F   18B4                     	DECLE 6324
62A0   2000                     	DECLE 8192
62A1   2000                     	DECLE 8192
62A2   2000                     	DECLE 8192
62A3   1934                     	DECLE 6452
62A4   2000                     	DECLE 8192
62A5   2000                     	DECLE 8192
62A6   193C                     	DECLE 6460
62A7   2000                     	DECLE 8192
62A8   2000                     	DECLE 8192
62A9   2000                     	DECLE 8192
62AA   18CC                     	DECLE 6348
62AB   189E                     	DECLE 6302
62AC   18A6                     	DECLE 6310
62AD   1E28                     	DECLE 7720
62AE   1600                     	DECLE 5632
62AF   1600                     	DECLE 5632
62B0   1600                     	DECLE 5632
62B1   1E48                     	DECLE 7752
                                	;[708] 	DATA $1000,$18EC,$2000,$2000,$2000,$1944,$2000,$2000,$194C,$2000,$2000,$2000,$1904,$1000,$18D6,$1E28,$1600,$1600,$1600,$1E48
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",708
62B2   1000                     	DECLE 4096
62B3   18EC                     	DECLE 6380
62B4   2000                     	DECLE 8192
62B5   2000                     	DECLE 8192
62B6   2000                     	DECLE 8192
62B7   1944                     	DECLE 6468
62B8   2000                     	DECLE 8192
62B9   2000                     	DECLE 8192
62BA   194C                     	DECLE 6476
62BB   2000                     	DECLE 8192
62BC   2000                     	DECLE 8192
62BD   2000                     	DECLE 8192
62BE   1904                     	DECLE 6404
62BF   1000                     	DECLE 4096
62C0   18D6                     	DECLE 6358
62C1   1E28                     	DECLE 7720
62C2   1600                     	DECLE 5632
62C3   1600                     	DECLE 5632
62C4   1600                     	DECLE 5632
62C5   1E48                     	DECLE 7752
                                	;[709] 	DATA $18B4,$2000,$2000,$2000,$2000,$1954,$2000,$2000,$195C,$2000,$2000,$2000,$2000,$18CC,$1000,$1E28,$1600,$1600,$1600,$1E48
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",709
62C6   18B4                     	DECLE 6324
62C7   2000                     	DECLE 8192
62C8   2000                     	DECLE 8192
62C9   2000                     	DECLE 8192
62CA   2000                     	DECLE 8192
62CB   1954                     	DECLE 6484
62CC   2000                     	DECLE 8192
62CD   2000                     	DECLE 8192
62CE   195C                     	DECLE 6492
62CF   2000                     	DECLE 8192
62D0   2000                     	DECLE 8192
62D1   2000                     	DECLE 8192
62D2   2000                     	DECLE 8192
62D3   18CC                     	DECLE 6348
62D4   1000                     	DECLE 4096
62D5   1E28                     	DECLE 7720
62D6   1600                     	DECLE 5632
62D7   1600                     	DECLE 5632
62D8   1600                     	DECLE 5632
62D9   1E48                     	DECLE 7752
                                	;[710] 	DATA $18EC,$2000,$2000,$2000,$2000,$1964,$2000,$2000,$196C,$2000,$2000,$2000,$2000,$1904,$1000,$1F70,$1F78,$1F78,$1F78,$1F80
                                	SRCFILE "C:\IntyBASIC SDK\Projects\runnerZ\runnerZ.BAS",710
62DA   18EC                     	DECLE 6380
62DB   2000                     	DECLE 8192
62DC   2000                     	DECLE 8192
62DD   2000                     	DECLE 8192
62DE   2000                     	DECLE 8192
62DF   1964                     	DECLE 6500
62E0   2000                     	DECLE 8192
62E1   2000                     	DECLE 8192
62E2   196C                     	DECLE 6508
62E3   2000                     	DECLE 8192
62E4   2000                     	DECLE 8192
62E5   2000                     	DECLE 8192
62E6   2000                     	DECLE 8192
62E7   1904                     	DECLE 6404
62E8   1000                     	DECLE 4096
62E9   1F70                     	DECLE 8048
62EA   1F78                     	DECLE 8056
62EB   1F78                     	DECLE 8056
62EC   1F78                     	DECLE 8056
62ED   1F80                     	DECLE 8064
                                	;ENDFILE
                                	SRCFILE "",0
0x1                             intybasic_fastmult:	equ 1	; Forces to include fast multiplication
                                        ;
                                        ; Epilogue for IntyBASIC programs
                                        ; by Oscar Toledo G.  http://nanochess.org/
                                        ;
                                        ; Revision: Jan/30/2014. Moved GRAM code below MOB updates.
                                        ;                        Added comments.
                                        ; Revision: Feb/26/2014. Optimized access to collision registers
                                        ;                        per DZ-Jay suggestion. Added scrolling
                                        ;                        routines with optimization per intvnut
                                        ;                        suggestion. Added border/mask support.
                                        ; Revision: Apr/02/2014. Added support to set MODE (color stack
                                        ;                        or foreground/background), added support
                                        ;                        for SCREEN statement.
                                        ; Revision: Aug/19/2014. Solved bug in bottom scroll, moved an
                                        ;                        extra unneeded line.
                                        ; Revision: Aug/26/2014. Integrated music player and NTSC/PAL
                                        ;                        detection.
                                        ; Revision: Oct/24/2014. Adjust in some comments.
                                        ; Revision: Nov/13/2014. Integrated Joseph Zbiciak's routines
                                        ;                        for printing numbers.
                                        ; Revision: Nov/17/2014. Redesigned MODE support to use a single
                                        ;                        variable.
                                        ; Revision: Nov/21/2014. Added Intellivoice support routines made
                                        ;                        by Joseph Zbiciak.
                                	; Revision: Dec/11/2014. Optimized keypad decode routines.
                                	; Revision: Jan/25/2015. Added marker for insertion of ON FRAME GOSUB
                                	; Revision: Feb/17/2015. Allows to deactivate music player (PLAY NONE)
                                	; Revision: Apr/21/2015. Accelerates common case of keypad not pressed.
                                	;                        Added ECS ROM disable code.
                                	; Revision: Apr/22/2015. Added Joseph Zbiciak accelerated multiplication
                                	;                        routines.
                                	; Revision: Jun/04/2015. Optimized play_music (per GroovyBee suggestion)
                                	; Revision: Jul/25/2015. Added infinite loop at start to avoid crashing
                                	;                        with empty programs. Solved bug where _color
                                	;                        didn't started with white.
                                	; Revision: Aug/20/2015. Moved ECS mapper disable code so nothing gets
                                	;                        after it (GroovyBee 42K sample code)
                                	; Revision: Aug/21/2015. Added Joseph Zbiciak routines for JLP Flash
                                	;                        handling.
                                	; Revision: Aug/31/2015. Added CPYBLK2 for SCREEN fifth argument.
                                	; Revision: Sep/01/2015. Defined labels Q1 and Q2 as alias.
                                	; Revision: Jan/22/2016. Music player allows not to use noise channel
                                	;                        for drums. Allows setting music volume.
                                	; Revision: Jan/23/2016. Added jump inside of music (for MUSIC JUMP)
                                	; Revision: May/03/2016. Preserves current mode in bit 0 of _mode_select

                                	;
                                	; Avoids empty programs to crash
                                	; 
62EE   0220 0001                stuck:	B stuck

                                	;
                                	; Copy screen helper for SCREEN wide statement
                                	;

0x62F0                          CPYBLK2:	PROC
62F0   0083                     	MOVR R0,R3		; Offset
62F1   00AA                     	MOVR R5,R2
62F2   02B0                     	PULR R0
62F3   02B1                     	PULR R1
62F4   02B5                     	PULR R5
62F5   02B4                     	PULR R4
62F6   0272                     	PSHR R2
62F7   010B                     	SUBR R1,R3

62F8   0273                     @@1:    PSHR R3
62F9   008B                     	MOVR R1,R3              ; Init line copy
62FA   02A2                     @@2:    MVI@ R4,R2              ; Copy line
62FB   026A                             MVO@ R2,R5
62FC   0013                             DECR R3
62FD   022C 0004                        BNE @@2
62FF   02B3                             PULR R3                 ; Add offset to start in next line
6300   00DC                             ADDR R3,R4
6301   010D                     	SUBR R1,R5
6302   02FD 0014                        ADDI #20,R5
6304   0010                             DECR R0                 ; Count lines
6305   022C 000E                        BNE @@1

6307   02B7                     	RETURN
                                	ENDP

                                        ;
                                        ; Copy screen helper for SCREEN statement
                                        ;
0x6308                          CPYBLK: PROC
6308   0275                             BEGIN
6309   009C                             MOVR R3,R4
630A   0095                             MOVR R2,R5

630B   008B                     @@1:    MOVR R1,R3              ; Init line copy
630C   02A2                     @@2:    MVI@ R4,R2              ; Copy line
630D   026A                             MVO@ R2,R5
630E   0013                             DECR R3
630F   022C 0004                        BNE @@2
6311   02BB 0014                        MVII #20,R3             ; Add offset to start in next line
6313   010B                             SUBR R1,R3
6314   00DC                             ADDR R3,R4
6315   00DD                             ADDR R3,R5
6316   0010                             DECR R0                 ; Count lines
6317   022C 000D                        BNE @@1
6319   02B7                     	RETURN
                                        ENDP

                                        ;
                                        ; Wait for interruption
                                        ;
0x631A                          _wait:  PROC

                                    IF DEFINED intybasic_keypad
                                        MVI $01FF,R0
                                        COMR R0
                                        ANDI #$FF,R0
                                        CMP _cnt1_p0,R0
                                        BNE @@2
                                        CMP _cnt1_p1,R0
                                        BNE @@2
                                	TSTR R0		; Accelerates common case of key not pressed
                                	MVII #_keypad_table+13,R4
                                	BEQ @@4
                                        MVII #_keypad_table,R4
                                    REPEAT 6
                                        CMP@ R4,R0
                                        BEQ @@4
                                	CMP@ R4,R0
                                        BEQ @@4
                                    ENDR
                                	INCR R4
                                @@4:    SUBI #_keypad_table+1,R4
                                	MVO R4,_cnt1_key

                                @@2:    MVI _cnt1_p1,R1
                                        MVO R1,_cnt1_p0
                                        MVO R0,_cnt1_p1

                                        MVI $01FE,R0
                                        COMR R0
                                        ANDI #$FF,R0
                                        CMP _cnt2_p0,R0
                                        BNE @@5
                                        CMP _cnt2_p1,R0
                                        BNE @@5
                                	TSTR R0		; Accelerates common case of key not pressed
                                	MVII #_keypad_table+13,R4
                                	BEQ @@7
                                        MVII #_keypad_table,R4
                                    REPEAT 6
                                        CMP@ R4,R0
                                        BEQ @@7
                                	CMP@ R4,R0
                                	BEQ @@7
                                    ENDR

                                	INCR R4
                                @@7:    SUBI #_keypad_table+1,R4
                                	MVO R4,_cnt2_key

                                @@5:    MVI _cnt2_p1,R1
                                        MVO R1,_cnt2_p0
                                        MVO R0,_cnt2_p1
                                    ENDI

631A   01C0                             CLRR    R0
631B   0240 0102                        MVO     R0,_int         ; Clears waiting flag
631D   0340 0102                @@1:    CMP     _int,  R0       ; Waits for change
631F   0224 0003                        BEQ     @@1
6321   00AF                             JR      R5              ; Returns
                                        ENDP

                                        ;
                                        ; Keypad table
                                        ;
0x6322                          _keypad_table:          PROC
6322   0048 0081 0041 0021              DECLE $48,$81,$41,$21,$82,$42,$22,$84,$44,$24,$88,$28
6326   0082 0042 0022 0084 0044 0024 0088 0028 
                                        ENDP

0x632E                          _pal1_vector:    PROC
632E   02B8 633A                        MVII #_pal2_vector,R0
6330   0240 0100                        MVO R0,ISRVEC
6332   0040                             SWAP R0
6333   0240 0101                        MVO R0,ISRVEC+1
6335   02B8 0003                        MVII #3,R0
6337   0240 0103                        MVO R0,_ntsc
6339   00AF                             JR R5
                                        ENDP

0x633A                          _pal2_vector:    PROC
633A   02B8 634E                        MVII #_int_vector,R0     ; Point to "real" interruption handler
633C   0240 0100                        MVO R0,ISRVEC
633E   0040                             SWAP R0
633F   0240 0101                        MVO R0,ISRVEC+1
6341   02B8 0004                        MVII #4,R0
6343   0240 0103                        MVO R0,_ntsc
6345   01C0                     	CLRR R0
6346   01E4                     	CLRR R4
6347   02B9 0018                	MVII #$18,R1
6349   0260                     @@1:	MVO@ R0,R4
634A   0011                     	DECR R1
634B   022C 0003                	BNE @@1
634D   00AF                             JR R5
                                        ENDP

                                        ;
                                        ; Interruption routine
                                        ;
0x634E                          _int_vector:     PROC
634E   0275                             BEGIN

634F   0240 0020                        MVO     R0,     $20     ; Activates display

                                    IF DEFINED intybasic_stack
                                	CMPI #$308,R6
                                	BNC @@vs
                                	MVI $21,R0	; Activates Color Stack mode
                                	CLRR R0
                                	MVO R0,$28
                                	MVO R0,$29
                                	MVO R0,$2A
                                	MVO R0,$2B
                                	MVII #@@vs1,R4
                                	MVII #$200,R5
                                	MVII #20,R1
                                @@vs2:	MVI@ R4,R0
                                	MVO@ R0,R5
                                	DECR R1
                                	BNE @@vs2
                                	RETURN

                                	; Stack Overflow message
                                @@vs1:	DECLE 0,0,0,$33*8+7,$54*8+7,$41*8+7,$43*8+7,$4B*8+7,$00*8+7
                                	DECLE $4F*8+7,$56*8+7,$45*8+7,$52*8+7,$46*8+7,$4C*8+7
                                	DECLE $4F*8+7,$57*8+7,0,0,0

                                @@vs:
                                    ENDI
6351   02B8 0001                        MVII    #1,     R0
6353   0240 0102                        MVO     R0,     _int    ; Indicates interrupt happened

6355   0280 0109                        MVI _mode_select,R0
6357   007C                             SARC R0,2
6358   020A 001E                        BNOV @@vi0
635A   01C9                     	CLRR R1
635B   0209 0005                        BNC @@vi14
635D   0240 0021                        MVO R0,$21  ; Activates Foreground/Background mode
635F   0009                             INCR R1
6360   0200 0010                	B @@vi15

6362   0280 0021                @@vi14: MVI $21,R0  ; Activates Color Stack mode
6364   0280 033F                        MVI _color,R0
6366   0240 0028                        MVO R0,$28
6368   0040                             SWAP R0
6369   0240 0029                        MVO R0,$29
636B   0064                             SLR R0,2
636C   0064                             SLR R0,2
636D   0240 002A                        MVO R0,$2A
636F   0040                             SWAP R0
6370   0240 002B                        MVO R0,$2B
6372   0241 0109                @@vi15: MVO R1,_mode_select
6374   02B8 0007                	MVII #7,R0
6376   0240 033F                        MVO R0,_color           ; Default color for PRINT "string"
0x6378                          @@vi0:
6378   0280 010A                        MVI _border_color,R0
637A   0240 002C                        MVO     R0,     $2C     ; Border color
637C   0280 010B                        MVI _border_mask,R0
637E   0240 0032                        MVO     R0,     $32     ; Border mask
                                        ;
                                        ; Save collision registers for further use and clear them
                                        ;
6380   02BC 0018                        MVII #$18,R4
6382   02BD 0358                        MVII #_col0,R5
6384   02A0                             MVI@ R4,R0
6385   0268                             MVO@ R0,R5  ; _col0
6386   02A0                             MVI@ R4,R0
6387   0268                             MVO@ R0,R5  ; _col1
6388   02A0                             MVI@ R4,R0
6389   0268                             MVO@ R0,R5  ; _col2
638A   02A0                             MVI@ R4,R0
638B   0268                             MVO@ R0,R5  ; _col3
638C   02A0                             MVI@ R4,R0
638D   0268                             MVO@ R0,R5  ; _col4
638E   02A0                             MVI@ R4,R0
638F   0268                             MVO@ R0,R5  ; _col5
6390   02A0                             MVI@ R4,R0
6391   0268                             MVO@ R0,R5  ; _col6
6392   02A0                             MVI@ R4,R0
6393   0268                             MVO@ R0,R5  ; _col7
6394   02BD 0018                        MVII #$18,R5
6396   01C0                             CLRR R0
6397   0268                             MVO@ R0,R5
6398   0268                             MVO@ R0,R5
6399   0268                             MVO@ R0,R5
639A   0268                             MVO@ R0,R5
639B   0268                             MVO@ R0,R5
639C   0268                             MVO@ R0,R5
639D   0268                             MVO@ R0,R5
639E   0268                             MVO@ R0,R5
                                        
                                    IF DEFINED intybasic_scroll

                                        ;
                                        ; Scrolling things
                                        ;
                                        MVI _scroll_x,R0
                                        MVO R0,$30
                                        MVI _scroll_y,R0
                                        MVO R0,$31
                                    ENDI

                                        ;
                                        ; Updates sprites (MOBs)
                                        ;
639F   02BC 0340                        MVII #_mobs,R4
63A1   02BD 0000                        MVII #$0,R5     ; X-coordinates
63A3   02B9 0008                        MVII #8,R1
63A5   02A0                     @@vi2:  MVI@ R4,R0
63A6   0268                             MVO@ R0,R5
63A7   02A0                             MVI@ R4,R0
63A8   0268                             MVO@ R0,R5
63A9   02A0                             MVI@ R4,R0
63AA   0268                             MVO@ R0,R5
63AB   0011                             DECR R1
63AC   022C 0008                        BNE @@vi2

                                    IF DEFINED intybasic_music
                                     	MVI _ntsc,R0
                                        TSTR R0         ; PAL?
                                        BEQ @@vo97      ; Yes, always emit sound
                                	MVI _music_frame,R0
                                	INCR R0
                                	CMPI #6,R0
                                	BNE @@vo14
                                	CLRR R0
                                @@vo14:	MVO R0,_music_frame
                                	BEQ @@vo15
                                @@vo97:	CALL _emit_sound
                                @@vo15:
                                    ENDI

                                        ;
                                        ; Detect GRAM definition
                                        ;
63AE   0284 033C                        MVI _gram_bitmap,R4
63B0   00A4                             TSTR R4
63B1   0204 001E                        BEQ @@vi1
63B3   0281 0105                        MVI _gram_target,R1
63B5   004D                             SLL R1,2
63B6   0049                             SLL R1,1
63B7   02F9 3800                        ADDI #$3800,R1
63B9   008D                             MOVR R1,R5
63BA   0280 0106                        MVI _gram_total,R0
0x63BC                          @@vi3:
63BC   02A1                             MVI@    R4,     R1
63BD   0269                             MVO@    R1,     R5
63BE   0041                             SWAP    R1
63BF   0269                             MVO@    R1,     R5
63C0   02A1                             MVI@    R4,     R1
63C1   0269                             MVO@    R1,     R5
63C2   0041                             SWAP    R1
63C3   0269                             MVO@    R1,     R5
63C4   02A1                             MVI@    R4,     R1
63C5   0269                             MVO@    R1,     R5
63C6   0041                             SWAP    R1
63C7   0269                             MVO@    R1,     R5
63C8   02A1                             MVI@    R4,     R1
63C9   0269                             MVO@    R1,     R5
63CA   0041                             SWAP    R1
63CB   0269                             MVO@    R1,     R5
63CC   0010                             DECR R0
63CD   022C 0012                        BNE @@vi3
63CF   0240 033C                        MVO R0,_gram_bitmap
0x63D1                          @@vi1:
63D1   0284 033D                        MVI _gram2_bitmap,R4
63D3   00A4                             TSTR R4
63D4   0204 001E                        BEQ @@vii1
63D6   0281 0107                        MVI _gram2_target,R1
63D8   004D                             SLL R1,2
63D9   0049                             SLL R1,1
63DA   02F9 3800                        ADDI #$3800,R1
63DC   008D                             MOVR R1,R5
63DD   0280 0108                        MVI _gram2_total,R0
0x63DF                          @@vii3:
63DF   02A1                             MVI@    R4,     R1
63E0   0269                             MVO@    R1,     R5
63E1   0041                             SWAP    R1
63E2   0269                             MVO@    R1,     R5
63E3   02A1                             MVI@    R4,     R1
63E4   0269                             MVO@    R1,     R5
63E5   0041                             SWAP    R1
63E6   0269                             MVO@    R1,     R5
63E7   02A1                             MVI@    R4,     R1
63E8   0269                             MVO@    R1,     R5
63E9   0041                             SWAP    R1
63EA   0269                             MVO@    R1,     R5
63EB   02A1                             MVI@    R4,     R1
63EC   0269                             MVO@    R1,     R5
63ED   0041                             SWAP    R1
63EE   0269                             MVO@    R1,     R5
63EF   0010                             DECR R0
63F0   022C 0012                        BNE @@vii3
63F2   0240 033D                        MVO R0,_gram2_bitmap
0x63F4                          @@vii1:

                                    IF DEFINED intybasic_scroll
                                        ;
                                        ; Frame scroll support
                                        ;
                                        MVI _scroll_d,R0
                                        TSTR R0
                                        BEQ @@vi4
                                        CLRR R1
                                        MVO R1,_scroll_d
                                        DECR R0     ; Left
                                        BEQ @@vi5
                                        DECR R0     ; Right
                                        BEQ @@vi6
                                        DECR R0     ; Top
                                        BEQ @@vi7
                                        DECR R0     ; Bottom
                                        BEQ @@vi8
                                        B @@vi4

                                @@vi5:  MVII #$0200,R4
                                        MOVR R4,R5
                                        INCR R5
                                        MVII #12,R1
                                @@vi12: MVI@ R4,R2
                                        MVI@ R4,R3
                                        REPEAT 8
                                        MVO@ R2,R5
                                        MVI@ R4,R2
                                        MVO@ R3,R5
                                        MVI@ R4,R3
                                        ENDR
                                        MVO@ R2,R5
                                        MVI@ R4,R2
                                        MVO@ R3,R5
                                        MVO@ R2,R5
                                        INCR R4
                                        INCR R5
                                        DECR R1
                                        BNE @@vi12
                                        B @@vi4

                                @@vi6:  MVII #$0201,R4
                                        MVII #$0200,R5
                                        MVII #12,R1
                                @@vi11:
                                        REPEAT 19
                                        MVI@ R4,R0
                                        MVO@ R0,R5
                                        ENDR
                                        INCR R4
                                        INCR R5
                                        DECR R1
                                        BNE @@vi11
                                        B @@vi4
                                    
                                        ;
                                        ; Complex routine to be ahead of STIC display
                                        ; Moves first the top 6 lines, saves intermediate line
                                        ; Then moves the bottom 6 lines and restores intermediate line
                                        ;
                                @@vi7:  MVII #$0264,R4
                                        MVII #5,R1
                                        MVII #_scroll_buffer,R5
                                        REPEAT 20
                                        MVI@ R4,R0
                                        MVO@ R0,R5
                                        ENDR
                                        SUBI #40,R4
                                        MOVR R4,R5
                                        ADDI #20,R5
                                @@vi10:
                                        REPEAT 20
                                        MVI@ R4,R0
                                        MVO@ R0,R5
                                        ENDR
                                        SUBI #40,R4
                                        SUBI #40,R5
                                        DECR R1
                                        BNE @@vi10
                                        MVII #$02C8,R4
                                        MVII #$02DC,R5
                                        MVII #5,R1
                                @@vi13:
                                        REPEAT 20
                                        MVI@ R4,R0
                                        MVO@ R0,R5
                                        ENDR
                                        SUBI #40,R4
                                        SUBI #40,R5
                                        DECR R1
                                        BNE @@vi13
                                        MVII #_scroll_buffer,R4
                                        REPEAT 20
                                        MVI@ R4,R0
                                        MVO@ R0,R5
                                        ENDR
                                        B @@vi4

                                @@vi8:  MVII #$0214,R4
                                        MVII #$0200,R5
                                        MVII #$DC/4,R1
                                @@vi9:  
                                        REPEAT 4
                                        MVI@ R4,R0
                                        MVO@ R0,R5
                                        ENDR
                                        DECR R1
                                        BNE @@vi9
                                        B @@vi4

                                @@vi4:
                                    ENDI

                                    IF DEFINED intybasic_voice
                                        ;
                                        ; Intellivoice support
                                        ;
                                        CALL IV_ISR
                                    ENDI

                                        ;
                                        ; Random number generator
                                        ;
63F4   0004 0160 03FD           	CALL _next_random

                                    IF DEFINED intybasic_music
                                	; Generate sound for next frame
                                       	MVI _ntsc,R0
                                        TSTR R0         ; PAL?
                                        BEQ @@vo98      ; Yes, always generate sound
                                	MVI _music_frame,R0
                                	TSTR R0
                                	BEQ @@vo16
                                @@vo98: CALL _generate_music
                                @@vo16:
                                    ENDI

                                        ; Increase frame number
63F7   0280 033A                        MVI _frame,R0
63F9   0008                             INCR R0
63FA   0240 033A                        MVO R0,_frame

                                	; This mark is for ON FRAME GOSUB support

63FC   02B7                             RETURN
                                        ENDP

                                	;
                                	; Generates the next random number
                                	;
0x63FD                          _next_random:	PROC

                                MACRO _ROR
                                	RRC R0,1
                                	MOVR R0,R2
                                	SLR R2,2
                                	SLR R2,2
                                	ANDI #$0800,R2
                                	SLR R2,2
                                	SLR R2,2
                                	ANDI #$007F,R0
                                	XORR R2,R0
                                ENDM
63FD   0280 0104                        MVI _rand,R0
63FF   0007                             SETC
                                ;       _ROR
6400   0070                             RRC R0,1
6401   0082                     	MOVR R0,R2
6402   0066                     	SLR R2,2
6403   0066                     	SLR R2,2
6404   03BA 0800                	ANDI #$0800,R2
6406   0066                     	SLR R2,2
6407   0066                     	SLR R2,2
6408   03B8 007F                	ANDI #$007F,R0
640A   01D0                     	XORR R2,R0
640B   03C0 033A                        XOR _frame,R0
                                ;       _ROR
640D   0070                             RRC R0,1
640E   0082                     	MOVR R0,R2
640F   0066                     	SLR R2,2
6410   0066                     	SLR R2,2
6411   03BA 0800                	ANDI #$0800,R2
6413   0066                     	SLR R2,2
6414   0066                     	SLR R2,2
6415   03B8 007F                	ANDI #$007F,R0
6417   01D0                     	XORR R2,R0
6418   03C0 0104                        XOR _rand,R0
                                ;       _ROR
641A   0070                             RRC R0,1
641B   0082                     	MOVR R0,R2
641C   0066                     	SLR R2,2
641D   0066                     	SLR R2,2
641E   03BA 0800                	ANDI #$0800,R2
6420   0066                     	SLR R2,2
6421   0066                     	SLR R2,2
6422   03B8 007F                	ANDI #$007F,R0
6424   01D0                     	XORR R2,R0
6425   03F8 0009                        XORI #9,R0
6427   0240 0104                        MVO R0,_rand
6429   00AF                     	JR R5
                                	ENDP

                                    IF DEFINED intybasic_music

                                        ;
                                        ; Music player, comes from my game Princess Quest for Intellivision
                                        ; so it's a practical tracker used in a real game ;) and with enough
                                        ; features.
                                        ;

                                        ; NTSC frequency for notes (based on 3.579545 mhz)
                                ntsc_note_table:    PROC
                                        ; Silence - 0
                                        DECLE 0
                                        ; Octave 2 - 1
                                        DECLE 1721,1621,1532,1434,1364,1286,1216,1141,1076,1017,956,909
                                        ; Octave 3 - 13
                                        DECLE 854,805,761,717,678,639,605,571,538,508,480,453
                                        ; Octave 4 - 25
                                        DECLE 427,404,380,360,339,321,302,285,270,254,240,226
                                        ; Octave 5 - 37
                                        DECLE 214,202,191,180,170,160,151,143,135,127,120,113
                                        ; Octave 6 - 49
                                        DECLE 107,101,95,90,85,80,76,71,67,64,60,57
                                        ; Octave 7 - 61
                                        ; Space for two notes more
                                	ENDP

                                        ; PAL frequency for notes (based on 4 mhz)
                                pal_note_table:    PROC
                                        ; Silence - 0
                                        DECLE 0
                                        ; Octava 2 - 1
                                        DECLE 1923,1812,1712,1603,1524,1437,1359,1276,1202,1136,1068,1016
                                        ; Octava 3 - 13
                                        DECLE 954,899,850,801,758,714,676,638,601,568,536,506
                                        ; Octava 4 - 25
                                        DECLE 477,451,425,402,379,358,338,319,301,284,268,253
                                        ; Octava 5 - 37
                                        DECLE 239,226,213,201,190,179,169,159,150,142,134,127
                                        ; Octava 6 - 49
                                        DECLE 120,113,106,100,95,89,84,80,75,71,67,63
                                        ; Octava 7 - 61
                                        ; Space for two notes more
                                	ENDP
                                    ENDI

                                        ;
                                        ; Music tracker init
                                        ;
0x642A                          _init_music:	PROC
                                    IF DEFINED intybasic_music
                                        MVI _ntsc,R0
                                        CMPI #1,R0
                                        MVII #ntsc_note_table,R0
                                        BEQ @@0
                                        MVII #pal_note_table,R0
                                @@0:    MVO R0,_music_table
                                        MVII #$38,R0	; $B8 blocks controllers o.O!
                                	MVO R0,_music_mix
                                        CLRR R0
                                    ELSE
642A   00AF                     	JR R5
                                    ENDI
                                	ENDP

                                    IF DEFINED intybasic_music
                                        ;
                                        ; Start music
                                        ; R0 = Pointer to music
                                        ;
                                _play_music:	PROC
                                	MOVR R0,R2
                                        MVII #1,R0
                                	MOVR R0,R3
                                	TSTR R2
                                	BEQ @@1
                                	MVI@ R2,R3
                                	INCR R2
                                @@1:	MVO R2,_music_start
                                	MVO R2,_music_p
                                	MVO R3,_music_t
                                	MVO R0,_music_tc
                                        JR R5

                                	ENDP

                                        ;
                                        ; Generate music
                                        ;
                                _generate_music:	PROC
                                	BEGIN
                                	MVI _music_mix,R0
                                	ANDI #$C0,R0
                                	XORI #$38,R0
                                	MVO R0,_music_mix
                                	CLRR R1			; Turn off volume for the three sound channels
                                	MVO R1,_music_vol1
                                	MVO R1,_music_vol2
                                	NOP
                                	MVO R1,_music_vol3
                                	MVI _music_tc,R3
                                	DECR R3
                                	MVO R3,_music_tc
                                	BNE @@6
                                	; R3 is zero from here up to @@6
                                	MVI _music_p,R4
                                @@15:	TSTR R4		; Silence?
                                	BEQ @@000	; Keep quiet
                                	MVI@ R4,R0
                                	MVI@ R4,R1
                                	MVI _music_t,R2
                                        CMPI #$FE,R0	; The end?
                                	BEQ @@001       ; Keep quiet
                                	CMPI #$FD,R0	; Repeat?
                                	BNE @@00
                                	MVI _music_start,R4
                                	B @@15

                                @@001:	MOVR R1,R4	; Jump, zero will make it quiet
                                	B @@15

                                @@000:  MVII #1,R0
                                        MVO R0,_music_tc
                                        B @@0
                                        
                                @@00: 	MVO R2,_music_tc    ; Restart note time
                                     	MVO R4,_music_p
                                     	
                                	MOVR R0,R2
                                	ANDI #$FF,R2
                                	CMPI #$3F,R2	; Sustain note?
                                	BEQ @@1
                                	MOVR R2,R4
                                	ANDI #$3F,R4
                                	MVO R4,_music_n1	; Note
                                	MVO R3,_music_s1	; Waveform
                                	ANDI #$C0,R2
                                	MVO R2,_music_i1	; Instrument
                                	
                                @@1:	MOVR R0,R2
                                	SWAP R2
                                	ANDI #$FF,R2
                                	CMPI #$3F,R2	; Sustain note?
                                	BEQ @@2
                                	MOVR R2,R4
                                	ANDI #$3F,R4
                                	MVO R4,_music_n2	; Note
                                	MVO R3,_music_s2	; Waveform
                                	ANDI #$C0,R2
                                	MVO R2,_music_i2	; Instrument
                                	
                                @@2:	MOVR R1,R2
                                	ANDI #$FF,R2
                                	CMPI #$3F,R2	; Sustain note?
                                	BEQ @@3
                                	MOVR R2,R4
                                	ANDI #$3F,R4
                                	MVO R4,_music_n3	; Note
                                	MVO R3,_music_s3	; Waveform
                                	ANDI #$C0,R2
                                	MVO R2,_music_i3	; Instrument
                                	
                                @@3:	MOVR R1,R2
                                	SWAP R2
                                	MVO R2,_music_n4
                                	MVO R3,_music_s4
                                	
                                        ;
                                        ; Construct main voice
                                        ;
                                @@6:	MVI _music_n1,R3	; Read note
                                	TSTR R3		; There is note?
                                	BEQ @@7		; No, jump
                                	MVI _music_s1,R1
                                	MVI _music_i1,R2
                                	MOVR R1,R0
                                	CALL _note2freq
                                	MVO R3,_music_freq10	; Note in voice A
                                	SWAP R3
                                	MVO R3,_music_freq11
                                	MVO R1,_music_vol1
                                        ; Increase time for instrument waveform
                                	INCR R0
                                	CMPI #$18,R0
                                	BNE @@20
                                	SUBI #$08,R0
                                @@20:	MVO R0,_music_s1

                                @@7:	MVI _music_n2,R3	; Read note
                                	TSTR R3		; There is note?
                                	BEQ @@8		; No, jump
                                	MVI _music_s2,R1
                                	MVI _music_i2,R2
                                	MOVR R1,R0
                                	CALL _note2freq
                                	MVO R3,_music_freq20	; Note in voice B
                                	SWAP R3
                                	MVO R3,_music_freq21
                                	MVO R1,_music_vol2
                                        ; Increase time for instrument waveform
                                	INCR R0
                                	CMPI #$18,R0
                                	BNE @@21
                                	SUBI #$08,R0
                                @@21:	MVO R0,_music_s2

                                @@8:	MVI _music_n3,R3	; Read note
                                	TSTR R3		; There is note?
                                	BEQ @@9		; No, jump
                                	MVI _music_s3,R1
                                	MVI _music_i3,R2
                                	MOVR R1,R0
                                	CALL _note2freq
                                	MVO R3,_music_freq30	; Note in voice C
                                	SWAP R3
                                	MVO R3,_music_freq31
                                	MVO R1,_music_vol3
                                        ; Increase time for instrument waveform
                                	INCR R0
                                	CMPI #$18,R0
                                	BNE @@22
                                	SUBI #$08,R0
                                @@22:	MVO R0,_music_s3

                                @@9:	MVI _music_n4,R0	; Read drum
                                	DECR R0		; There is drum?
                                	BMI @@4		; No, jump
                                	MVI _music_s4,R1
                                	       		; 1 - Strong
                                	BNE @@5
                                	CMPI #3,R1
                                	BGE @@12
                                @@10:	MVII #5,R0
                                	MVO R0,_music_noise
                                	CALL _activate_drum
                                	B @@12

                                @@5:	DECR R0		;2 - Short
                                	BNE @@11
                                	TSTR R1
                                	BNE @@12
                                	MVII #8,R0
                                	MVO R0,_music_noise
                                	CALL _activate_drum
                                	B @@12

                                @@11:	;DECR R0	; 3 - Rolling
                                	;BNE @@12
                                	CMPI #2,R1
                                	BLT @@10
                                	MVI _music_t,R0
                                	SLR R0,1
                                	CMPR R0,R1
                                	BLT @@12
                                        ADDI #2,R0
                                	CMPR R0,R1
                                	BLT @@10
                                        ; Increase time for drum waveform
                                @@12:   INCR R1
                                	MVO R1,_music_s4
                                @@4:
                                @@0:	RETURN
                                	ENDP

                                        ;
                                	; Translates note number to frequency
                                        ; R3 = Note
                                        ; R1 = Position in waveform for instrument
                                        ; R2 = Instrument
                                        ;
                                _note2freq:	PROC
                                        ADD _music_table,R3
                                	MVI@ R3,R3
                                        SWAP R2
                                	BEQ _piano_instrument
                                	RLC R2,1
                                	BNC _clarinet_instrument
                                	BPL _flute_instrument
                                ;	BMI _bass_instrument
                                	ENDP

                                        ;
                                        ; Generates a bass
                                        ;
                                _bass_instrument:	PROC
                                	SLL R3,2	; Lower 2 octaves
                                	ADDI #_bass_volume,R1
                                	MVI@ R1,R1	; Bass effect
                                    IF DEFINED intybasic_music_volume
                                	B _global_volume
                                    ELSE
                                	JR R5
                                    ENDI
                                	ENDP

                                _bass_volume:	PROC
                                        DECLE 12,13,14,14,13,12,12,12
                                        DECLE 11,11,12,12,11,11,12,12
                                	DECLE 11,11,12,12,11,11,12,12
                                	ENDP

                                        ;
                                        ; Generates a piano
                                        ; R3 = Frequency
                                        ; R1 = Waveform position
                                        ;
                                        ; Output:
                                        ; R3 = Frequency.
                                        ; R1 = Volume.
                                        ;
                                _piano_instrument:	PROC
                                	ADDI #_piano_volume,R1
                                	MVI@ R1,R1
                                    IF DEFINED intybasic_music_volume
                                	B _global_volume
                                    ELSE
                                	JR R5
                                    ENDI
                                	ENDP

                                _piano_volume:	PROC
                                        DECLE 14,13,13,12,12,11,11,10
                                        DECLE 10,9,9,8,8,7,7,6
                                        DECLE 6,6,7,7,6,6,5,5
                                	ENDP

                                        ;
                                        ; Generate a clarinet
                                        ; R3 = Frequency
                                        ; R1 = Waveform position
                                        ;
                                        ; Output:
                                        ; R3 = Frequency
                                        ; R1 = Volume
                                        ;
                                _clarinet_instrument:	PROC
                                	ADDI #_clarinet_vibrato,R1
                                	ADD@ R1,R3
                                	CLRC
                                	RRC R3,1	; Duplicates frequency
                                	ADCR R3
                                        ADDI #_clarinet_volume-_clarinet_vibrato,R1
                                	MVI@ R1,R1
                                    IF DEFINED intybasic_music_volume
                                	B _global_volume
                                    ELSE
                                	JR R5
                                    ENDI
                                	ENDP

                                _clarinet_vibrato:	PROC
                                        DECLE 0,0,0,0
                                        DECLE -2,-4,-2,0
                                        DECLE 2,4,2,0
                                        DECLE -2,-4,-2,0
                                        DECLE 2,4,2,0
                                        DECLE -2,-4,-2,0
                                	ENDP

                                _clarinet_volume:	PROC
                                        DECLE 13,14,14,13,13,12,12,12
                                        DECLE 11,11,11,11,12,12,12,12
                                        DECLE 11,11,11,11,12,12,12,12
                                	ENDP

                                        ;
                                        ; Generates a flute
                                        ; R3 = Frequency
                                        ; R1 = Waveform position
                                        ;
                                        ; Output:
                                        ; R3 = Frequency
                                        ; R1 = Volume
                                        ;
                                _flute_instrument:	PROC
                                	ADDI #_flute_vibrato,R1
                                	ADD@ R1,R3
                                	ADDI #_flute_volume-_flute_vibrato,R1
                                	MVI@ R1,R1
                                    IF DEFINED intybasic_music_volume
                                	B _global_volume
                                    ELSE
                                	JR R5
                                    ENDI
                                	ENDP

                                _flute_vibrato:	PROC
                                        DECLE 0,0,0,0
                                        DECLE 0,1,2,1
                                        DECLE 0,1,2,1
                                        DECLE 0,1,2,1
                                        DECLE 0,1,2,1
                                        DECLE 0,1,2,1
                                	ENDP
                                                 
                                _flute_volume:	PROC
                                        DECLE 10,12,13,13,12,12,12,12
                                        DECLE 11,11,11,11,10,10,10,10
                                        DECLE 11,11,11,11,10,10,10,10
                                	ENDP

                                    IF DEFINED intybasic_music_volume

                                _global_volume:	PROC
                                	MVI _music_vol,R2
                                	ANDI #$0F,R2
                                	SLL R2,2
                                	SLL R2,2
                                	ADDR R1,R2
                                	ADDI #@@table,R2
                                	MVI@ R2,R1
                                	JR R5

                                @@table:
                                	DECLE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
                                	DECLE 0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1
                                	DECLE 0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,2
                                	DECLE 0,0,0,1,1,1,1,1,2,2,2,2,2,3,3,3
                                	DECLE 0,0,1,1,1,1,2,2,2,2,3,3,3,4,4,4
                                	DECLE 0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5
                                	DECLE 0,0,1,1,2,2,2,3,3,4,4,4,5,5,6,6
                                	DECLE 0,1,1,1,2,2,3,3,4,4,5,5,6,6,7,7
                                	DECLE 0,1,1,2,2,3,3,4,4,5,5,6,6,7,8,8
                                	DECLE 0,1,1,2,2,3,4,4,5,5,6,7,7,8,8,9
                                	DECLE 0,1,1,2,3,3,4,5,5,6,7,7,8,9,9,10
                                	DECLE 0,1,2,2,3,4,4,5,6,7,7,8,9,10,10,11
                                	DECLE 0,1,2,2,3,4,5,6,6,7,8,9,10,10,11,12
                                	DECLE 0,1,2,3,4,4,5,6,7,8,9,10,10,11,12,13
                                	DECLE 0,1,2,3,4,5,6,7,8,8,9,10,11,12,13,14
                                	DECLE 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15

                                	ENDP

                                    ENDI

                                        ;
                                        ; Emits sound
                                        ;
                                _emit_sound:	PROC
                                        MOVR R5,R1
                                	MVI _music_mode,R2
                                	SARC R2,1
                                	BEQ @@6
                                	MVII #_music_freq10,R4
                                	MVII #$01F0,R5
                                        MVI@ R4,R0
                                	MVO@ R0,R5	; $01F0 - Channel A Period (Low 8 bits of 12)
                                        MVI@ R4,R0
                                	MVO@ R0,R5	; $01F1 - Channel B Period (Low 8 bits of 12)
                                	DECR R2
                                	BEQ @@1
                                        MVI@ R4,R0	
                                	MVO@ R0,R5	; $01F2 - Channel C Period (Low 8 bits of 12)
                                	INCR R5		; Avoid $01F3 - Enveloped Period (Low 8 bits of 16)
                                        MVI@ R4,R0
                                	MVO@ R0,R5	; $01F4 - Channel A Period (High 4 bits of 12)
                                        MVI@ R4,R0
                                	MVO@ R0,R5	; $01F5 - Channel B Period (High 4 bits of 12)
                                        MVI@ R4,R0
                                	MVO@ R0,R5	; $01F6 - Channel C Period (High 4 bits of 12)
                                	INCR R5		; Avoid $01F7 - Envelope Period (High 8 bits of 16)
                                	BC @@2		; Jump if playing with drums
                                	ADDI #2,R4
                                	ADDI #3,R5
                                	B @@3

                                @@2:	MVI@ R4,R0
                                	MVO@ R0,R5	; $01F8 - Enable Noise/Tone (bits 3-5 Noise : 0-2 Tone)
                                        MVI@ R4,R0	
                                	MVO@ R0,R5	; $01F9 - Noise Period (5 bits)
                                	INCR R5		; Avoid $01FA - Envelope Type (4 bits)
                                @@3:    MVI@ R4,R0
                                	MVO@ R0,R5	; $01FB - Channel A Volume
                                        MVI@ R4,R0
                                	MVO@ R0,R5	; $01FC - Channel B Volume
                                        MVI@ R4,R0
                                	MVO@ R0,R5	; $01FD - Channel C Volume
                                        JR R1

                                @@1:	INCR R4		
                                	ADDI #2,R5	; Avoid $01F2 and $01F3
                                        MVI@ R4,R0
                                	MVO@ R0,R5	; $01F4
                                        MVI@ R4,R0
                                	MVO@ R0,R5	; $01F5
                                	INCR R4
                                	ADDI #2,R5	; Avoid $01F6 and $01F7
                                	BC @@4		; Jump if playing with drums
                                	ADDI #2,R4
                                	ADDI #3,R5
                                	B @@5

                                @@4:	MVI@ R4,R0
                                	MVO@ R0,R5	; $01F8
                                        MVI@ R4,R0
                                	MVO@ R0,R5	; $01F9
                                	INCR R5		; Avoid $01FA
                                @@5:    MVI@ R4,R0
                                	MVO@ R0,R5	; $01FB
                                        MVI@ R4,R0
                                	MVO@ R0,R5	; $01FD
                                @@6:    JR R1
                                	ENDP

                                        ;
                                        ; Activates drum
                                        ;
                                _activate_drum:	PROC
                                    IF DEFINED intybasic_music_volume
                                	BEGIN
                                    ENDI
                                	MVI _music_mode,R2
                                	SARC R2,1	; PLAY NO DRUMS?
                                	BNC @@0		; Yes, jump
                                	MVI _music_vol1,R0
                                	TSTR R0
                                	BNE @@1
                                        MVII #11,R1
                                    IF DEFINED intybasic_music_volume
                                	CALL _global_volume
                                    ENDI
                                	MVO R1,_music_vol1
                                	MVI _music_mix,R0
                                	ANDI #$F6,R0
                                	XORI #$01,R0
                                	MVO R0,_music_mix
                                    IF DEFINED intybasic_music_volume
                                	RETURN
                                    ELSE
                                	JR R5
                                    ENDI

                                @@1:    MVI _music_vol2,R0
                                	TSTR R0
                                	BNE @@2
                                        MVII #11,R1
                                    IF DEFINED intybasic_music_volume
                                	CALL _global_volume
                                    ENDI
                                	MVO R1,_music_vol2
                                	MVI _music_mix,R0
                                	ANDI #$ED,R0
                                	XORI #$02,R0
                                	MVO R0,_music_mix
                                    IF DEFINED intybasic_music_volume
                                	RETURN
                                    ELSE
                                	JR R5
                                    ENDI

                                @@2:    DECR R2		; PLAY SIMPLE?
                                        BEQ @@3		; Yes, jump
                                        MVI _music_vol3,R0
                                	TSTR R0
                                	BNE @@3
                                        MVII #11,R1
                                    IF DEFINED intybasic_music_volume
                                	CALL _global_volume
                                    ENDI
                                	MVO R1,_music_vol3
                                	MVI _music_mix,R0
                                	ANDI #$DB,R0
                                	XORI #$04,R0
                                	MVO R0,_music_mix
                                    IF DEFINED intybasic_music_volume
                                	RETURN
                                    ELSE
                                	JR R5
                                    ENDI

                                @@3:    MVI _music_mix,R0
                                        ANDI #$EF,R0
                                	MVO R0,_music_mix
                                @@0:	
                                    IF DEFINED intybasic_music_volume
                                	RETURN
                                    ELSE
                                	JR R5
                                    ENDI

                                	ENDP

                                    ENDI
                                    
                                    IF DEFINED intybasic_numbers

                                	;
                                	; Following code from as1600 libraries, prnum16.asm
                                        ; Public domain by Joseph Zbiciak
                                	;

                                ;* ======================================================================== *;
                                ;*  These routines are placed into the public domain by their author.  All  *;
                                ;*  copyright rights are hereby relinquished on the routines and data in    *;
                                ;*  this file.  -- Joseph Zbiciak, 2008                                     *;
                                ;* ======================================================================== *;

                                ;; ======================================================================== ;;
                                ;;  _PW10                                                                   ;;
                                ;;      Lookup table holding the first 5 powers of 10 (1 thru 10000) as     ;;
                                ;;      16-bit numbers.                                                     ;;
                                ;; ======================================================================== ;;
                                _PW10   PROC    ; 0 thru 10000
                                        DECLE   10000, 1000, 100, 10, 1, 0
                                        ENDP

                                ;; ======================================================================== ;;
                                ;;  PRNUM16.l     -- Print an unsigned 16-bit number left-justified.        ;;
                                ;;  PRNUM16.b     -- Print an unsigned 16-bit number with leading blanks.   ;;
                                ;;  PRNUM16.z     -- Print an unsigned 16-bit number with leading zeros.    ;;
                                ;;                                                                          ;;
                                ;;  AUTHOR                                                                  ;;
                                ;;      Joseph Zbiciak  <im14u2c AT globalcrossing DOT net>                 ;;
                                ;;                                                                          ;;
                                ;;  REVISION HISTORY                                                        ;;
                                ;;      30-Mar-2003 Initial complete revision                               ;;
                                ;;                                                                          ;;
                                ;;  INPUTS for all variants                                                 ;;
                                ;;      R0  Number to print.                                                ;;
                                ;;      R2  Width of field.  Ignored by PRNUM16.l.                          ;;
                                ;;      R3  Format word, added to digits to set the color.                  ;;
                                ;;          Note:  Bit 15 MUST be cleared when building with PRNUM32.       ;;
                                ;;      R4  Pointer to location on screen to print number                   ;;
                                ;;                                                                          ;;
                                ;;  OUTPUTS                                                                 ;;
                                ;;      R0  Zeroed                                                          ;;
                                ;;      R1  Unmodified                                                      ;;
                                ;;      R2  Unmodified                                                      ;;
                                ;;      R3  Unmodified                                                      ;;
                                ;;      R4  Points to first character after field.                          ;;
                                ;;                                                                          ;;
                                ;;  DESCRIPTION                                                             ;;
                                ;;      These routines print unsigned 16-bit numbers in a field up to 5     ;;
                                ;;      positions wide.  The number is printed either in left-justified     ;;
                                ;;      or right-justified format.  Right-justified numbers are padded      ;;
                                ;;      with leading blanks or leading zeros.  Left-justified numbers       ;;
                                ;;      are not padded on the right.                                        ;;
                                ;;                                                                          ;;
                                ;;      This code handles fields wider than 5 characters, padding with      ;;
                                ;;      zeros or blanks as necessary.                                       ;;
                                ;;                                                                          ;;
                                ;;              Routine      Value(hex)     Field        Output             ;;
                                ;;              ----------   ----------   ----------   ----------           ;;
                                ;;              PRNUM16.l      $0045         n/a        "69"                ;;
                                ;;              PRNUM16.b      $0045          4         "  69"              ;;
                                ;;              PRNUM16.b      $0045          6         "    69"            ;;
                                ;;              PRNUM16.z      $0045          4         "0069"              ;;
                                ;;              PRNUM16.z      $0045          6         "000069"            ;;
                                ;;                                                                          ;;
                                ;;  TECHNIQUES                                                              ;;
                                ;;      This routine uses repeated subtraction to divide the number         ;;
                                ;;      to display by various powers of 10.  This is cheaper than a         ;;
                                ;;      full divide, at least when the input number is large.  It's         ;;
                                ;;      also easier to get right.  :-)                                      ;;
                                ;;                                                                          ;;
                                ;;      The printing routine first pads out fields wider than 5 spaces      ;;
                                ;;      with zeros or blanks as requested.  It then scans the power-of-10   ;;
                                ;;      table looking for the first power of 10 that is <= the number to    ;;
                                ;;      display.  While scanning for this power of 10, it outputs leading   ;;
                                ;;      blanks or zeros, if requested.  This eliminates "leading digit"     ;;
                                ;;      logic from the main digit loop.                                     ;;
                                ;;                                                                          ;;
                                ;;      Once in the main digit loop, we discover the value of each digit    ;;
                                ;;      by repeated subtraction.  We build up our digit value while         ;;
                                ;;      subtracting the power-of-10 repeatedly.  We iterate until we go     ;;
                                ;;      a step too far, and then we add back on power-of-10 to restore      ;;
                                ;;      the remainder.                                                      ;;
                                ;;                                                                          ;;
                                ;;  NOTES                                                                   ;;
                                ;;      The left-justified variant ignores field width.                     ;;
                                ;;                                                                          ;;
                                ;;      The code is fully reentrant.                                        ;;
                                ;;                                                                          ;;
                                ;;      This code does not handle numbers which are too large to be         ;;
                                ;;      displayed in the provided field.  If the number is too large,       ;;
                                ;;      non-digit characters will be displayed in the initial digit         ;;
                                ;;      position.  Also, the run time of this routine may get excessively   ;;
                                ;;      large, depending on the magnitude of the overflow.                  ;;
                                ;;                                                                          ;;
                                ;;      When using with PRNUM32, one must either include PRNUM32 before     ;;
                                ;;      this function, or define the symbol _WITH_PRNUM32.  PRNUM32         ;;
                                ;;      needs a tiny bit of support from PRNUM16 to handle numbers in       ;;
                                ;;      the range 65536...99999 correctly.                                  ;;
                                ;;                                                                          ;;
                                ;;  CODESIZE                                                                ;;
                                ;;      73 words, including power-of-10 table                               ;;
                                ;;      80 words, if compiled with PRNUM32.                                 ;;
                                ;;                                                                          ;;
                                ;;      To save code size, you can define the following symbols to omit     ;;
                                ;;      some variants:                                                      ;;
                                ;;                                                                          ;;
                                ;;          _NO_PRNUM16.l:   Disables PRNUM16.l.  Saves 10 words            ;;
                                ;;          _NO_PRNUM16.b:   Disables PRNUM16.b.  Saves 3 words.            ;;
                                ;;                                                                          ;;
                                ;;      Defining both symbols saves 17 words total, because it omits        ;;
                                ;;      some code shared by both routines.                                  ;;
                                ;;                                                                          ;;
                                ;;  STACK USAGE                                                             ;;
                                ;;      This function uses up to 4 words of stack space.                    ;;
                                ;; ======================================================================== ;;

                                PRNUM16 PROC

                                    
                                        ;; ---------------------------------------------------------------- ;;
                                        ;;  PRNUM16.l:  Print unsigned, left-justified.                     ;;
                                        ;; ---------------------------------------------------------------- ;;
                                @@l:    PSHR    R5              ; save return address
                                @@l1:   MVII    #$1,    R5      ; set R5 to 1 to counteract screen ptr update
                                                                ; in the 'find initial power of 10' loop
                                        PSHR    R2
                                        MVII    #5,     R2      ; force effective field width to 5.
                                        B       @@z2

                                        ;; ---------------------------------------------------------------- ;;
                                        ;;  PRNUM16.b:  Print unsigned with leading blanks.                 ;;
                                        ;; ---------------------------------------------------------------- ;;
                                @@b:    PSHR    R5
                                @@b1:   CLRR    R5              ; let the blank loop do its thing
                                        INCR    PC              ; skip the PSHR R5

                                        ;; ---------------------------------------------------------------- ;;
                                        ;;  PRNUM16.z:  Print unsigned with leading zeros.                  ;;
                                        ;; ---------------------------------------------------------------- ;;
                                @@z:    PSHR    R5
                                @@z1:   PSHR    R2
                                @@z2:   PSHR    R1

                                        ;; ---------------------------------------------------------------- ;;
                                        ;;  Find the initial power of 10 to use for display.                ;;
                                        ;;  Note:  For fields wider than 5, fill the extra spots above 5    ;;
                                        ;;  with blanks or zeros as needed.                                 ;;
                                        ;; ---------------------------------------------------------------- ;;
                                        MVII    #_PW10+5,R1     ; Point to end of power-of-10 table
                                        SUBR    R2,     R1      ; Subtract the field width to get right power
                                        PSHR    R3              ; save format word

                                        CMPI    #2,     R5      ; are we leading with zeros?
                                        BNC     @@lblnk         ; no:  then do the loop w/ blanks

                                        CLRR    R5              ; force R5==0
                                        ADDI    #$80,   R3      ; yes: do the loop with zeros
                                        B       @@lblnk
                                    

                                @@llp   MVO@    R3,     R4      ; print a blank/zero

                                        SUBR    R5,     R4      ; rewind pointer if needed.

                                        INCR    R1              ; get next power of 10
                                @@lblnk DECR    R2              ; decrement available digits
                                        BEQ     @@ldone
                                        CMPI    #5,     R2      ; field too wide?
                                        BGE     @@llp           ; just force blanks/zeros 'till we're narrower.
                                        CMP@    R1,     R0      ; Is this power of 10 too big?
                                        BNC     @@llp           ; Yes:  Put a blank and go to next

                                @@ldone PULR    R3              ; restore format word

                                        ;; ---------------------------------------------------------------- ;;
                                        ;;  The digit loop prints at least one digit.  It discovers digits  ;;
                                        ;;  by repeated subtraction.                                        ;;
                                        ;; ---------------------------------------------------------------- ;;
                                @@digit TSTR    R0              ; If the number is zero, print zero and leave
                                        BNEQ    @@dig1          ; no: print the number

                                        MOVR    R3,     R5      ;\    
                                        ADDI    #$80,   R5      ; |-- print a 0 there.
                                        MVO@    R5,     R4      ;/    
                                        B       @@done

                                @@dig1:
                                    
                                @@nxdig MOVR    R3,     R5      ; save display format word
                                @@cont: ADDI    #$80-8, R5      ; start our digit as one just before '0'
                                @@spcl:
                                 
                                        ;; ---------------------------------------------------------------- ;;
                                        ;;  Divide by repeated subtraction.  This divide is constructed     ;;
                                        ;;  to go "one step too far" and then back up.                      ;;
                                        ;; ---------------------------------------------------------------- ;;
                                @@div:  ADDI    #8,     R5      ; increment our digit
                                        SUB@    R1,     R0      ; subtract power of 10
                                        BC      @@div           ; loop until we go too far
                                        ADD@    R1,     R0      ; add back the extra power of 10.

                                        MVO@    R5,     R4      ; display the digit.

                                        INCR    R1              ; point to next power of 10
                                        DECR    R2              ; any room left in field?
                                        BPL     @@nxdig         ; keep going until R2 < 0.

                                @@done: PULR    R1              ; restore R1
                                        PULR    R2              ; restore R2
                                        PULR    PC              ; return

                                        ENDP
                                        
                                    ENDI

                                    IF DEFINED intybasic_voice
                                ;;==========================================================================;;
                                ;;  SP0256-AL2 Allophones                                                   ;;
                                ;;                                                                          ;;
                                ;;  This file contains the allophone set that was obtained from an          ;;
                                ;;  SP0256-AL2.  It is being provided for your convenience.                 ;;
                                ;;                                                                          ;;
                                ;;  The directory "al2" contains a series of assembly files, each one       ;;
                                ;;  containing a single allophone.  This series of files may be useful in   ;;
                                ;;  situations where space is at a premium.                                 ;;
                                ;;                                                                          ;;
                                ;;  Consult the Archer SP0256-AL2 documentation (under doc/programming)     ;;
                                ;;  for more information about SP0256-AL2's allophone library.              ;;
                                ;;                                                                          ;;
                                ;; ------------------------------------------------------------------------ ;;
                                ;;                                                                          ;;
                                ;;  Copyright information:                                                  ;;
                                ;;                                                                          ;;
                                ;;  The allophone data below was extracted from the SP0256-AL2 ROM image.   ;;
                                ;;  The SP0256-AL2 allophones are NOT in the public domain, nor are they    ;;
                                ;;  placed under the GNU General Public License.  This program is           ;;
                                ;;  distributed in the hope that it will be useful, but WITHOUT ANY         ;;
                                ;;  WARRANTY; without even the implied warranty of MERCHANTABILITY or       ;;
                                ;;  FITNESS FOR A PARTICULAR PURPOSE.                                       ;;
                                ;;                                                                          ;;
                                ;;  Microchip, Inc. retains the copyright to the data and algorithms        ;;
                                ;;  contained in the SP0256-AL2.  This speech data is distributed with      ;;
                                ;;  explicit permission from Microchip, Inc.  All such redistributions      ;;
                                ;;  must retain this notice of copyright.                                   ;;
                                ;;                                                                          ;;
                                ;;  No copyright claims are made on this data by the author(s) of SDK1600.  ;;
                                ;;  Please see http://spatula-city.org/~im14u2c/sp0256-al2/ for details.    ;;
                                ;;                                                                          ;;
                                ;;==========================================================================;;

                                ;; ------------------------------------------------------------------------ ;;
                                _AA:
                                    DECLE   _AA.end - _AA - 1
                                    DECLE   $0318, $014C, $016F, $02CE, $03AF, $015F, $01B1, $008E
                                    DECLE   $0088, $0392, $01EA, $024B, $03AA, $039B, $000F, $0000
                                _AA.end:  ; 16 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _AE1:
                                    DECLE   _AE1.end - _AE1 - 1
                                    DECLE   $0118, $038E, $016E, $01FC, $0149, $0043, $026F, $036E
                                    DECLE   $01CC, $0005, $0000
                                _AE1.end:  ; 11 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _AO:
                                    DECLE   _AO.end - _AO - 1
                                    DECLE   $0018, $010E, $016F, $0225, $00C6, $02C4, $030F, $0160
                                    DECLE   $024B, $0005, $0000
                                _AO.end:  ; 11 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _AR:
                                    DECLE   _AR.end - _AR - 1
                                    DECLE   $0218, $010C, $016E, $001E, $000B, $0091, $032F, $00DE
                                    DECLE   $018B, $0095, $0003, $0238, $0027, $01E0, $03E8, $0090
                                    DECLE   $0003, $01C7, $0020, $03DE, $0100, $0190, $01CA, $02AB
                                    DECLE   $00B7, $004A, $0386, $0100, $0144, $02B6, $0024, $0320
                                    DECLE   $0011, $0041, $01DF, $0316, $014C, $016E, $001E, $00C4
                                    DECLE   $02B2, $031E, $0264, $02AA, $019D, $01BE, $000B, $00F0
                                    DECLE   $006A, $01CE, $00D6, $015B, $03B5, $03E4, $0000, $0380
                                    DECLE   $0007, $0312, $03E8, $030C, $016D, $02EE, $0085, $03C2
                                    DECLE   $03EC, $0283, $024A, $0005, $0000
                                _AR.end:  ; 69 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _AW:
                                    DECLE   _AW.end - _AW - 1
                                    DECLE   $0010, $01CE, $016E, $02BE, $0375, $034F, $0220, $0290
                                    DECLE   $008A, $026D, $013F, $01D5, $0316, $029F, $02E2, $018A
                                    DECLE   $0170, $0035, $00BD, $0000, $0000
                                _AW.end:  ; 21 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _AX:
                                    DECLE   _AX.end - _AX - 1
                                    DECLE   $0218, $02CD, $016F, $02F5, $0386, $00C2, $00CD, $0094
                                    DECLE   $010C, $0005, $0000
                                _AX.end:  ; 11 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _AY:
                                    DECLE   _AY.end - _AY - 1
                                    DECLE   $0110, $038C, $016E, $03B7, $03B3, $02AF, $0221, $009E
                                    DECLE   $01AA, $01B3, $00BF, $02E7, $025B, $0354, $00DA, $017F
                                    DECLE   $018A, $03F3, $00AF, $02D5, $0356, $027F, $017A, $01FB
                                    DECLE   $011E, $01B9, $03E5, $029F, $025A, $0076, $0148, $0124
                                    DECLE   $003D, $0000
                                _AY.end:  ; 34 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _BB1:
                                    DECLE   _BB1.end - _BB1 - 1
                                    DECLE   $0318, $004C, $016C, $00FB, $00C7, $0144, $002E, $030C
                                    DECLE   $010E, $018C, $01DC, $00AB, $00C9, $0268, $01F7, $021D
                                    DECLE   $01B3, $0098, $0000
                                _BB1.end:  ; 19 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _BB2:
                                    DECLE   _BB2.end - _BB2 - 1
                                    DECLE   $00F4, $0046, $0062, $0200, $0221, $03E4, $0087, $016F
                                    DECLE   $02A6, $02B7, $0212, $0326, $0368, $01BF, $0338, $0196
                                    DECLE   $0002
                                _BB2.end:  ; 17 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _CH:
                                    DECLE   _CH.end - _CH - 1
                                    DECLE   $00F5, $0146, $0052, $0000, $032A, $0049, $0032, $02F2
                                    DECLE   $02A5, $0000, $026D, $0119, $0124, $00F6, $0000
                                _CH.end:  ; 15 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _DD1:
                                    DECLE   _DD1.end - _DD1 - 1
                                    DECLE   $0318, $034C, $016E, $0397, $01B9, $0020, $02B1, $008E
                                    DECLE   $0349, $0291, $01D8, $0072, $0000
                                _DD1.end:  ; 13 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _DD2:
                                    DECLE   _DD2.end - _DD2 - 1
                                    DECLE   $00F4, $00C6, $00F2, $0000, $0129, $00A6, $0246, $01F3
                                    DECLE   $02C6, $02B7, $028E, $0064, $0362, $01CF, $0379, $01D5
                                    DECLE   $0002
                                _DD2.end:  ; 17 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _DH1:
                                    DECLE   _DH1.end - _DH1 - 1
                                    DECLE   $0018, $034F, $016D, $030B, $0306, $0363, $017E, $006A
                                    DECLE   $0164, $019E, $01DA, $00CB, $00E8, $027A, $03E8, $01D7
                                    DECLE   $0173, $00A1, $0000
                                _DH1.end:  ; 19 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _DH2:
                                    DECLE   _DH2.end - _DH2 - 1
                                    DECLE   $0119, $034C, $016D, $030B, $0306, $0363, $017E, $006A
                                    DECLE   $0164, $019E, $01DA, $00CB, $00E8, $027A, $03E8, $01D7
                                    DECLE   $0173, $00A1, $0000
                                _DH2.end:  ; 19 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _EH:
                                    DECLE   _EH.end - _EH - 1
                                    DECLE   $0218, $02CD, $016F, $0105, $014B, $0224, $02CF, $0274
                                    DECLE   $014C, $0005, $0000
                                _EH.end:  ; 11 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _EL:
                                    DECLE   _EL.end - _EL - 1
                                    DECLE   $0118, $038D, $016E, $011C, $008B, $03D2, $030F, $0262
                                    DECLE   $006C, $019D, $01CC, $022B, $0170, $0078, $03FE, $0018
                                    DECLE   $0183, $03A3, $010D, $016E, $012E, $00C6, $00C3, $0300
                                    DECLE   $0060, $000D, $0005, $0000
                                _EL.end:  ; 28 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _ER1:
                                    DECLE   _ER1.end - _ER1 - 1
                                    DECLE   $0118, $034C, $016E, $001C, $0089, $01C3, $034E, $03E6
                                    DECLE   $00AB, $0095, $0001, $0000, $03FC, $0381, $0000, $0188
                                    DECLE   $01DA, $00CB, $00E7, $0048, $03A6, $0244, $016C, $01A8
                                    DECLE   $03E4, $0000, $0002, $0001, $00FC, $01DA, $02E4, $0000
                                    DECLE   $0002, $0008, $0200, $0217, $0164, $0000, $000E, $0038
                                    DECLE   $0014, $01EA, $0264, $0000, $0002, $0048, $01EC, $02F1
                                    DECLE   $03CC, $016D, $021E, $0048, $00C2, $034E, $036A, $000D
                                    DECLE   $008D, $000B, $0200, $0047, $0022, $03A8, $0000, $0000
                                _ER1.end:  ; 64 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _ER2:
                                    DECLE   _ER2.end - _ER2 - 1
                                    DECLE   $0218, $034C, $016E, $001C, $0089, $01C3, $034E, $03E6
                                    DECLE   $00AB, $0095, $0001, $0000, $03FC, $0381, $0000, $0190
                                    DECLE   $01D8, $00CB, $00E7, $0058, $01A6, $0244, $0164, $02A9
                                    DECLE   $0024, $0000, $0000, $0007, $0201, $02F8, $02E4, $0000
                                    DECLE   $0002, $0001, $00FC, $02DA, $0024, $0000, $0002, $0008
                                    DECLE   $0200, $0217, $0024, $0000, $000E, $0038, $0014, $03EA
                                    DECLE   $03A4, $0000, $0002, $0048, $01EC, $03F1, $038C, $016D
                                    DECLE   $021E, $0048, $00C2, $034E, $036A, $000D, $009D, $0003
                                    DECLE   $0200, $0047, $0022, $03A8, $0000, $0000
                                _ER2.end:  ; 70 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _EY:
                                    DECLE   _EY.end - _EY - 1
                                    DECLE   $0310, $038C, $016E, $02A7, $00BB, $0160, $0290, $0094
                                    DECLE   $01CA, $03A9, $00C1, $02D7, $015B, $01D4, $03CE, $02FF
                                    DECLE   $00EA, $03E7, $0041, $0277, $025B, $0355, $03C9, $0103
                                    DECLE   $02EA, $03E4, $003F, $0000
                                _EY.end:  ; 28 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _FF:
                                    DECLE   _FF.end - _FF - 1
                                    DECLE   $0119, $03C8, $0000, $00A7, $0094, $0138, $01C6, $0000
                                _FF.end:  ; 8 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _GG1:
                                    DECLE   _GG1.end - _GG1 - 1
                                    DECLE   $00F4, $00C6, $00C2, $0200, $0015, $03FE, $0283, $01FD
                                    DECLE   $01E6, $00B7, $030A, $0364, $0331, $017F, $033D, $0215
                                    DECLE   $0002
                                _GG1.end:  ; 17 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _GG2:
                                    DECLE   _GG2.end - _GG2 - 1
                                    DECLE   $00F4, $0106, $0072, $0300, $0021, $0308, $0039, $0173
                                    DECLE   $00C6, $00B7, $037E, $03A3, $0319, $0177, $0036, $0217
                                    DECLE   $0002
                                _GG2.end:  ; 17 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _GG3:
                                    DECLE   _GG3.end - _GG3 - 1
                                    DECLE   $00F8, $0146, $00F2, $0100, $0132, $03A8, $0055, $01F5
                                    DECLE   $00A6, $02B7, $0291, $0326, $0368, $0167, $023A, $01C6
                                    DECLE   $0002
                                _GG3.end:  ; 17 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _HH1:
                                    DECLE   _HH1.end - _HH1 - 1
                                    DECLE   $0218, $01C9, $0000, $0095, $0127, $0060, $01D6, $0213
                                    DECLE   $0002, $01AE, $033E, $01A0, $03C4, $0122, $0001, $0218
                                    DECLE   $01E4, $03FD, $0019, $0000
                                _HH1.end:  ; 20 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _HH2:
                                    DECLE   _HH2.end - _HH2 - 1
                                    DECLE   $0218, $00CB, $0000, $0086, $000F, $0240, $0182, $031A
                                    DECLE   $02DB, $0008, $0293, $0067, $00BD, $01E0, $0092, $000C
                                    DECLE   $0000
                                _HH2.end:  ; 17 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _IH:
                                    DECLE   _IH.end - _IH - 1
                                    DECLE   $0118, $02CD, $016F, $0205, $0144, $02C3, $00FE, $031A
                                    DECLE   $000D, $0005, $0000
                                _IH.end:  ; 11 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _IY:
                                    DECLE   _IY.end - _IY - 1
                                    DECLE   $0318, $02CC, $016F, $0008, $030B, $01C3, $0330, $0178
                                    DECLE   $002B, $019D, $01F6, $018B, $01E1, $0010, $020D, $0358
                                    DECLE   $015F, $02A4, $02CC, $016F, $0109, $030B, $0193, $0320
                                    DECLE   $017A, $034C, $009C, $0017, $0001, $0200, $03C1, $0020
                                    DECLE   $00A7, $001D, $0001, $0104, $003D, $0040, $01A7, $01CA
                                    DECLE   $018B, $0160, $0078, $01F6, $0343, $01C7, $0090, $0000
                                _IY.end:  ; 48 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _JH:
                                    DECLE   _JH.end - _JH - 1
                                    DECLE   $0018, $0149, $0001, $00A4, $0321, $0180, $01F4, $039A
                                    DECLE   $02DC, $023C, $011A, $0047, $0200, $0001, $018E, $034E
                                    DECLE   $0394, $0356, $02C1, $010C, $03FD, $0129, $00B7, $01BA
                                    DECLE   $0000
                                _JH.end:  ; 25 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _KK1:
                                    DECLE   _KK1.end - _KK1 - 1
                                    DECLE   $00F4, $00C6, $00D2, $0000, $023A, $03E0, $02D1, $02E5
                                    DECLE   $0184, $0200, $0041, $0210, $0188, $00C5, $0000
                                _KK1.end:  ; 15 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _KK2:
                                    DECLE   _KK2.end - _KK2 - 1
                                    DECLE   $021D, $023C, $0211, $003C, $0180, $024D, $0008, $032B
                                    DECLE   $025B, $002D, $01DC, $01E3, $007A, $0000
                                _KK2.end:  ; 14 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _KK3:
                                    DECLE   _KK3.end - _KK3 - 1
                                    DECLE   $00F7, $0046, $01D2, $0300, $0131, $006C, $006E, $00F1
                                    DECLE   $00E4, $0000, $025A, $010D, $0110, $01F9, $014A, $0001
                                    DECLE   $00B5, $01A2, $00D8, $01CE, $0000
                                _KK3.end:  ; 21 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _LL:
                                    DECLE   _LL.end - _LL - 1
                                    DECLE   $0318, $038C, $016D, $029E, $0333, $0260, $0221, $0294
                                    DECLE   $01C4, $0299, $025A, $00E6, $014C, $012C, $0031, $0000
                                _LL.end:  ; 16 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _MM:
                                    DECLE   _MM.end - _MM - 1
                                    DECLE   $0210, $034D, $016D, $03F5, $00B0, $002E, $0220, $0290
                                    DECLE   $03CE, $02B6, $03AA, $00F3, $00CF, $015D, $016E, $0000
                                _MM.end:  ; 16 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _NG1:
                                    DECLE   _NG1.end - _NG1 - 1
                                    DECLE   $0118, $03CD, $016E, $00DC, $032F, $01BF, $01E0, $0116
                                    DECLE   $02AB, $029A, $0358, $01DB, $015B, $01A7, $02FD, $02B1
                                    DECLE   $03D2, $0356, $0000
                                _NG1.end:  ; 19 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _NN1:
                                    DECLE   _NN1.end - _NN1 - 1
                                    DECLE   $0318, $03CD, $016C, $0203, $0306, $03C3, $015F, $0270
                                    DECLE   $002A, $009D, $000D, $0248, $01B4, $0120, $01E1, $00C8
                                    DECLE   $0003, $0040, $0000, $0080, $015F, $0006, $0000
                                _NN1.end:  ; 23 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _NN2:
                                    DECLE   _NN2.end - _NN2 - 1
                                    DECLE   $0018, $034D, $016D, $0203, $0306, $03C3, $015F, $0270
                                    DECLE   $002A, $0095, $0003, $0248, $01B4, $0120, $01E1, $0090
                                    DECLE   $000B, $0040, $0000, $0080, $015F, $019E, $01F6, $028B
                                    DECLE   $00E0, $0266, $03F6, $01D8, $0143, $01A8, $0024, $00C0
                                    DECLE   $0080, $0000, $01E6, $0321, $0024, $0260, $000A, $0008
                                    DECLE   $03FE, $0000, $0000
                                _NN2.end:  ; 43 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _OR2:
                                    DECLE   _OR2.end - _OR2 - 1
                                    DECLE   $0218, $018C, $016D, $02A6, $03AB, $004F, $0301, $0390
                                    DECLE   $02EA, $0289, $0228, $0356, $01CF, $02D5, $0135, $007D
                                    DECLE   $02B5, $02AF, $024A, $02E2, $0153, $0167, $0333, $02A9
                                    DECLE   $02B3, $039A, $0351, $0147, $03CD, $0339, $02DA, $0000
                                _OR2.end:  ; 32 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _OW:
                                    DECLE   _OW.end - _OW - 1
                                    DECLE   $0310, $034C, $016E, $02AE, $03B1, $00CF, $0304, $0192
                                    DECLE   $018A, $022B, $0041, $0277, $015B, $0395, $03D1, $0082
                                    DECLE   $03CE, $00B6, $03BB, $02DA, $0000
                                _OW.end:  ; 21 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _OY:
                                    DECLE   _OY.end - _OY - 1
                                    DECLE   $0310, $014C, $016E, $02A6, $03AF, $00CF, $0304, $0192
                                    DECLE   $03CA, $01A8, $007F, $0155, $02B4, $027F, $00E2, $036A
                                    DECLE   $031F, $035D, $0116, $01D5, $02F4, $025F, $033A, $038A
                                    DECLE   $014F, $01B5, $03D5, $0297, $02DA, $03F2, $0167, $0124
                                    DECLE   $03FB, $0001
                                _OY.end:  ; 34 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _PA1:
                                    DECLE   _PA1.end - _PA1 - 1
                                    DECLE   $00F1, $0000
                                _PA1.end:  ; 2 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _PA2:
                                    DECLE   _PA2.end - _PA2 - 1
                                    DECLE   $00F4, $0000
                                _PA2.end:  ; 2 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _PA3:
                                    DECLE   _PA3.end - _PA3 - 1
                                    DECLE   $00F7, $0000
                                _PA3.end:  ; 2 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _PA4:
                                    DECLE   _PA4.end - _PA4 - 1
                                    DECLE   $00FF, $0000
                                _PA4.end:  ; 2 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _PA5:
                                    DECLE   _PA5.end - _PA5 - 1
                                    DECLE   $031D, $003F, $0000
                                _PA5.end:  ; 3 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _PP:
                                    DECLE   _PP.end - _PP - 1
                                    DECLE   $00FD, $0106, $0052, $0000, $022A, $03A5, $0277, $035F
                                    DECLE   $0184, $0000, $0055, $0391, $00EB, $00CF, $0000
                                _PP.end:  ; 15 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _RR1:
                                    DECLE   _RR1.end - _RR1 - 1
                                    DECLE   $0118, $01CD, $016C, $029E, $0171, $038E, $01E0, $0190
                                    DECLE   $0245, $0299, $01AA, $02E2, $01C7, $02DE, $0125, $00B5
                                    DECLE   $02C5, $028F, $024E, $035E, $01CB, $02EC, $0005, $0000
                                _RR1.end:  ; 24 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _RR2:
                                    DECLE   _RR2.end - _RR2 - 1
                                    DECLE   $0218, $03CC, $016C, $030C, $02C8, $0393, $02CD, $025E
                                    DECLE   $008A, $019D, $01AC, $02CB, $00BE, $0046, $017E, $01C2
                                    DECLE   $0174, $00A1, $01E5, $00E0, $010E, $0007, $0313, $0017
                                    DECLE   $0000
                                _RR2.end:  ; 25 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _SH:
                                    DECLE   _SH.end - _SH - 1
                                    DECLE   $0218, $0109, $0000, $007A, $0187, $02E0, $03F6, $0311
                                    DECLE   $0002, $0126, $0242, $0161, $03E9, $0219, $016C, $0300
                                    DECLE   $0013, $0045, $0124, $0005, $024C, $005C, $0182, $03C2
                                    DECLE   $0001
                                _SH.end:  ; 25 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _SS:
                                    DECLE   _SS.end - _SS - 1
                                    DECLE   $0218, $01CA, $0001, $0128, $001C, $0149, $01C6, $0000
                                _SS.end:  ; 8 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _TH:
                                    DECLE   _TH.end - _TH - 1
                                    DECLE   $0019, $0349, $0000, $00C6, $0212, $01D8, $01CA, $0000
                                _TH.end:  ; 8 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _TT1:
                                    DECLE   _TT1.end - _TT1 - 1
                                    DECLE   $00F6, $0046, $0142, $0100, $0042, $0088, $027E, $02EF
                                    DECLE   $01A4, $0200, $0049, $0290, $00FC, $00E8, $0000
                                _TT1.end:  ; 15 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _TT2:
                                    DECLE   _TT2.end - _TT2 - 1
                                    DECLE   $00F5, $00C6, $01D2, $0100, $0335, $00E9, $0042, $027A
                                    DECLE   $02A4, $0000, $0062, $01D1, $014C, $03EA, $02EC, $01E0
                                    DECLE   $0007, $03A7, $0000
                                _TT2.end:  ; 19 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _UH:
                                    DECLE   _UH.end - _UH - 1
                                    DECLE   $0018, $034E, $016E, $01FF, $0349, $00D2, $003C, $030C
                                    DECLE   $008B, $0005, $0000
                                _UH.end:  ; 11 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _UW1:
                                    DECLE   _UW1.end - _UW1 - 1
                                    DECLE   $0318, $014C, $016F, $029E, $03BD, $03BD, $0271, $0212
                                    DECLE   $0325, $0291, $016A, $027B, $014A, $03B4, $0133, $0001
                                _UW1.end:  ; 16 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _UW2:
                                    DECLE   _UW2.end - _UW2 - 1
                                    DECLE   $0018, $034E, $016E, $02F6, $0107, $02C2, $006D, $0090
                                    DECLE   $03AC, $01A4, $01DC, $03AB, $0128, $0076, $03E6, $0119
                                    DECLE   $014F, $03A6, $03A5, $0020, $0090, $0001, $02EE, $00BB
                                    DECLE   $0000
                                _UW2.end:  ; 25 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _VV:
                                    DECLE   _VV.end - _VV - 1
                                    DECLE   $0218, $030D, $016C, $010B, $010B, $0095, $034F, $03E4
                                    DECLE   $0108, $01B5, $01BE, $028B, $0160, $00AA, $03E4, $0106
                                    DECLE   $00EB, $02DE, $014C, $016E, $00F6, $0107, $00D2, $00CD
                                    DECLE   $0296, $00E4, $0006, $0000
                                _VV.end:  ; 28 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _WH:
                                    DECLE   _WH.end - _WH - 1
                                    DECLE   $0218, $00C9, $0000, $0084, $038E, $0147, $03A4, $0195
                                    DECLE   $0000, $012E, $0118, $0150, $02D1, $0232, $01B7, $03F1
                                    DECLE   $0237, $01C8, $03B1, $0227, $01AE, $0254, $0329, $032D
                                    DECLE   $01BF, $0169, $019A, $0307, $0181, $028D, $0000
                                _WH.end:  ; 31 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _WW:
                                    DECLE   _WW.end - _WW - 1
                                    DECLE   $0118, $034D, $016C, $00FA, $02C7, $0072, $03CC, $0109
                                    DECLE   $000B, $01AD, $019E, $016B, $0130, $0278, $01F8, $0314
                                    DECLE   $017E, $029E, $014D, $016D, $0205, $0147, $02E2, $001A
                                    DECLE   $010A, $026E, $0004, $0000
                                _WW.end:  ; 28 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _XR2:
                                    DECLE   _XR2.end - _XR2 - 1
                                    DECLE   $0318, $034C, $016E, $02A6, $03BB, $002F, $0290, $008E
                                    DECLE   $004B, $0392, $01DA, $024B, $013A, $01DA, $012F, $00B5
                                    DECLE   $02E5, $0297, $02DC, $0372, $014B, $016D, $0377, $00E7
                                    DECLE   $0376, $038A, $01CE, $026B, $02FA, $01AA, $011E, $0071
                                    DECLE   $00D5, $0297, $02BC, $02EA, $01C7, $02D7, $0135, $0155
                                    DECLE   $01DD, $0007, $0000
                                _XR2.end:  ; 43 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _YR:
                                    DECLE   _YR.end - _YR - 1
                                    DECLE   $0318, $03CC, $016E, $0197, $00FD, $0130, $0270, $0094
                                    DECLE   $0328, $0291, $0168, $007E, $01CC, $02F5, $0125, $02B5
                                    DECLE   $00F4, $0298, $01DA, $03F6, $0153, $0126, $03B9, $00AB
                                    DECLE   $0293, $03DB, $0175, $01B9, $0001
                                _YR.end:  ; 29 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _YY1:
                                    DECLE   _YY1.end - _YY1 - 1
                                    DECLE   $0318, $01CC, $016E, $0015, $00CB, $0263, $0320, $0078
                                    DECLE   $01CE, $0094, $001F, $0040, $0320, $03BF, $0230, $00A7
                                    DECLE   $000F, $01FE, $03FC, $01E2, $00D0, $0089, $000F, $0248
                                    DECLE   $032B, $03FD, $01CF, $0001, $0000
                                _YY1.end:  ; 29 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _YY2:
                                    DECLE   _YY2.end - _YY2 - 1
                                    DECLE   $0318, $01CC, $016E, $0015, $00CB, $0263, $0320, $0078
                                    DECLE   $01CE, $0094, $001F, $0040, $0320, $03BF, $0230, $00A7
                                    DECLE   $000F, $01FE, $03FC, $01E2, $00D0, $0089, $000F, $0248
                                    DECLE   $032B, $03FD, $01CF, $0199, $01EE, $008B, $0161, $0232
                                    DECLE   $0004, $0318, $01A7, $0198, $0124, $03E0, $0001, $0001
                                    DECLE   $030F, $0027, $0000
                                _YY2.end:  ; 43 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _ZH:
                                    DECLE   _ZH.end - _ZH - 1
                                    DECLE   $0310, $014D, $016E, $00C3, $03B9, $01BF, $0241, $0012
                                    DECLE   $0163, $00E1, $0000, $0080, $0084, $023F, $003F, $0000
                                _ZH.end:  ; 16 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _ZZ:
                                    DECLE   _ZZ.end - _ZZ - 1
                                    DECLE   $0218, $010D, $016F, $0225, $0351, $00B5, $02A0, $02EE
                                    DECLE   $00E9, $014D, $002C, $0360, $0008, $00EC, $004C, $0342
                                    DECLE   $03D4, $0156, $0052, $0131, $0008, $03B0, $01BE, $0172
                                    DECLE   $0000
                                _ZZ.end:  ; 25 decles

                                ;;==========================================================================;;
                                ;;                                                                          ;;
                                ;;  Copyright information:                                                  ;;
                                ;;                                                                          ;;
                                ;;  The above allophone data was extracted from the SP0256-AL2 ROM image.   ;;
                                ;;  The SP0256-AL2 allophones are NOT in the public domain, nor are they    ;;
                                ;;  placed under the GNU General Public License.  This program is           ;;
                                ;;  distributed in the hope that it will be useful, but WITHOUT ANY         ;;
                                ;;  WARRANTY; without even the implied warranty of MERCHANTABILITY or       ;;
                                ;;  FITNESS FOR A PARTICULAR PURPOSE.                                       ;;
                                ;;                                                                          ;;
                                ;;  Microchip, Inc. retains the copyright to the data and algorithms        ;;
                                ;;  contained in the SP0256-AL2.  This speech data is distributed with      ;;
                                ;;  explicit permission from Microchip, Inc.  All such redistributions      ;;
                                ;;  must retain this notice of copyright.                                   ;;
                                ;;                                                                          ;;
                                ;;  No copyright claims are made on this data by the author(s) of SDK1600.  ;;
                                ;;  Please see http://spatula-city.org/~im14u2c/sp0256-al2/ for details.    ;;
                                ;;                                                                          ;;
                                ;;==========================================================================;;

                                ;* ======================================================================== *;
                                ;*  These routines are placed into the public domain by their author.  All  *;
                                ;*  copyright rights are hereby relinquished on the routines and data in    *;
                                ;*  this file.  -- Joseph Zbiciak, 2008                                     *;
                                ;* ======================================================================== *;

                                ;; ======================================================================== ;;
                                ;;  INTELLIVOICE DRIVER ROUTINES                                            ;;
                                ;;  Written in 2002 by Joe Zbiciak <intvnut AT gmail.com>                   ;;
                                ;;  http://spatula-city.org/~im14u2c/intv/                                  ;;
                                ;; ======================================================================== ;;

                                ;; ======================================================================== ;;
                                ;;  GLOBAL VARIABLES USED BY THESE ROUTINES                                 ;;
                                ;;                                                                          ;;
                                ;;  Note that some of these routines may use one or more global variables.  ;;
                                ;;  If you use these routines, you will need to allocate the appropriate    ;;
                                ;;  space in either 16-bit or 8-bit memory as appropriate.  Each global     ;;
                                ;;  variable is listed with the routines which use it and the required      ;;
                                ;;  memory width.                                                           ;;
                                ;;                                                                          ;;
                                ;;  Example declarations for these routines are shown below, commented out. ;;
                                ;;  You should uncomment these and add them to your program to make use of  ;;
                                ;;  the routine that needs them.  Make sure to assign these variables to    ;;
                                ;;  locations that aren't used for anything else.                           ;;
                                ;; ======================================================================== ;;

                                                        ; Used by       Req'd Width     Description
                                                        ;-----------------------------------------------------
                                ;IV.QH      EQU $110    ; IV_xxx        8-bit           Voice queue head
                                ;IV.QT      EQU $111    ; IV_xxx        8-bit           Voice queue tail
                                ;IV.Q       EQU $112    ; IV_xxx        8-bit           Voice queue  (8 bytes)
                                ;IV.FLEN    EQU $11A    ; IV_xxx        8-bit           Length of FIFO data
                                ;IV.FPTR    EQU $320    ; IV_xxx        16-bit          Current FIFO ptr.
                                ;IV.PPTR    EQU $321    ; IV_xxx        16-bit          Current Phrase ptr.

                                ;; ======================================================================== ;;
                                ;;  MEMORY USAGE                                                            ;;
                                ;;                                                                          ;;
                                ;;  These routines implement a queue of "pending phrases" that will be      ;;
                                ;;  played by the Intellivoice.  The user calls IV_PLAY to enqueue a        ;;
                                ;;  phrase number.  Phrase numbers indicate either a RESROM sample or       ;;
                                ;;  a compiled in phrase to be spoken.                                      ;;
                                ;;                                                                          ;;
                                ;;  The user must compose an "IV_PHRASE_TBL", which is composed of          ;;
                                ;;  pointers to phrases to be spoken.  Phrases are strings of pointers      ;;
                                ;;  and RESROM triggers, terminated by a NUL.                               ;;
                                ;;                                                                          ;;
                                ;;  Phrase numbers 1 through 42 are RESROM samples.  Phrase numbers         ;;
                                ;;  43 through 255 index into the IV_PHRASE_TBL.                            ;;
                                ;;                                                                          ;;
                                ;;  SPECIAL NOTES                                                           ;;
                                ;;                                                                          ;;
                                ;;  Bit 7 of IV.QH and IV.QT is used to denote whether the Intellivoice     ;;
                                ;;  is present.  If Intellivoice is present, this bit is clear.             ;;
                                ;;                                                                          ;;
                                ;;  Bit 6 of IV.QT is used to denote that we still need to do an ALD $00    ;;
                                ;;  for FIFO'd voice data.                                                  ;;
                                ;; ======================================================================== ;;
                                            

                                ;; ======================================================================== ;;
                                ;;  NAME                                                                    ;;
                                ;;      IV_INIT     Initialize the Intellivoice                             ;;
                                ;;                                                                          ;;
                                ;;  AUTHOR                                                                  ;;
                                ;;      Joseph Zbiciak <intvnut AT gmail.com>                               ;;
                                ;;                                                                          ;;
                                ;;  REVISION HISTORY                                                        ;;
                                ;;      15-Sep-2002 Initial revision . . . . . . . . . . .  J. Zbiciak      ;;
                                ;;                                                                          ;;
                                ;;  INPUTS for IV_INIT                                                      ;;
                                ;;      R5      Return address                                              ;;
                                ;;                                                                          ;;
                                ;;  OUTPUTS                                                                 ;;
                                ;;      R0      0 if Intellivoice found, -1 if not.                         ;;
                                ;;                                                                          ;;
                                ;;  DESCRIPTION                                                             ;;
                                ;;      Resets Intellivoice, determines if it is actually there, and        ;;
                                ;;      then initializes the IV structure.                                  ;;
                                ;; ------------------------------------------------------------------------ ;;
                                ;;                   Copyright (c) 2002, Joseph Zbiciak                     ;;
                                ;; ======================================================================== ;;

                                IV_INIT     PROC
                                            MVII    #$0400, R0          ;
                                            MVO     R0,     $0081       ; Reset the Intellivoice

                                            MVI     $0081,  R0          ; \
                                            RLC     R0,     2           ;  |-- See if we detect Intellivoice
                                            BOV     @@no_ivoice         ; /    once we've reset it.

                                            CLRR    R0                  ; 
                                            MVO     R0,     IV.FPTR     ; No data for FIFO
                                            MVO     R0,     IV.PPTR     ; No phrase being spoken
                                            MVO     R0,     IV.QH       ; Clear our queue
                                            MVO     R0,     IV.QT       ; Clear our queue
                                            JR      R5                  ; Done!

                                @@no_ivoice:
                                            CLRR    R0
                                            MVO     R0,     IV.FPTR     ; No data for FIFO
                                            MVO     R0,     IV.PPTR     ; No phrase being spoken
                                            DECR    R0
                                            MVO     R0,     IV.QH       ; Set queue to -1 ("No Intellivoice")
                                            MVO     R0,     IV.QT       ; Set queue to -1 ("No Intellivoice")
                                            JR      R5                  ; Done!
                                            ENDP

                                ;; ======================================================================== ;;
                                ;;  NAME                                                                    ;;
                                ;;      IV_ISR      Interrupt service routine to feed Intellivoice          ;;
                                ;;                                                                          ;;
                                ;;  AUTHOR                                                                  ;;
                                ;;      Joseph Zbiciak <intvnut AT gmail.com>                               ;;
                                ;;                                                                          ;;
                                ;;  REVISION HISTORY                                                        ;;
                                ;;      15-Sep-2002 Initial revision . . . . . . . . . . .  J. Zbiciak      ;;
                                ;;                                                                          ;;
                                ;;  INPUTS for IV_ISR                                                       ;;
                                ;;      R5      Return address                                              ;;
                                ;;                                                                          ;;
                                ;;  OUTPUTS                                                                 ;;
                                ;;      R0, R1, R4 trashed.                                                 ;;
                                ;;                                                                          ;;
                                ;;  NOTES                                                                   ;;
                                ;;      Call this from your main interrupt service routine.                 ;;
                                ;; ------------------------------------------------------------------------ ;;
                                ;;                   Copyright (c) 2002, Joseph Zbiciak                     ;;
                                ;; ======================================================================== ;;
                                IV_ISR      PROC
                                            ;; ------------------------------------------------------------ ;;
                                            ;;  Check for Intellivoice.  Leave if none present.             ;;
                                            ;; ------------------------------------------------------------ ;;
                                            MVI     IV.QT,  R1          ; Get queue tail
                                            SWAP    R1,     2
                                            BPL     @@ok                ; Bit 7 set? If yes: No Intellivoice
                                @@ald_busy:
                                @@leave     JR      R5                  ; Exit if no Intellivoice.

                                     
                                            ;; ------------------------------------------------------------ ;;
                                            ;;  Check to see if we pump samples into the FIFO.
                                            ;; ------------------------------------------------------------ ;;
                                @@ok:       MVI     IV.FPTR, R4         ; Get FIFO data pointer
                                            TSTR    R4                  ; is it zero?
                                            BEQ     @@no_fifodata       ; Yes:  No data for FIFO.
                                @@fifo_fill:
                                            MVI     $0081,  R0          ; Read speech FIFO ready bit
                                            SLLC    R0,     1           ; 
                                            BC      @@fifo_busy     

                                            MVI@    R4,     R0          ; Get next word
                                            MVO     R0,     $0081       ; write it to the FIFO

                                            MVI     IV.FLEN, R0         ;\
                                            DECR    R0                  ; |-- Decrement our FIFO'd data length
                                            MVO     R0,     IV.FLEN     ;/
                                            BEQ     @@last_fifo         ; If zero, we're done w/ FIFO
                                            MVO     R4,     IV.FPTR     ; Otherwise, save new pointer
                                            B       @@fifo_fill         ; ...and keep trying to load FIFO

                                @@last_fifo MVO     R0,     IV.FPTR     ; done with FIFO loading.
                                                                        ; fall into ALD processing.


                                            ;; ------------------------------------------------------------ ;;
                                            ;;  Try to do an Address Load.  We do this in two settings:     ;;
                                            ;;   -- We have no FIFO data to load.                           ;;
                                            ;;   -- We've loaded as much FIFO data as we can, but we        ;;
                                            ;;      might have an address load command to send for it.      ;;
                                            ;; ------------------------------------------------------------ ;;
                                @@fifo_busy:
                                @@no_fifodata:
                                            MVI     $0080,  R0          ; Read LRQ bit from ALD register
                                            SLLC    R0,     1
                                            BNC     @@ald_busy          ; LRQ is low, meaning we can't ALD.
                                                                        ; So, leave.

                                            ;; ------------------------------------------------------------ ;;
                                            ;;  We can do an address load (ALD) on the SP0256.  Give FIFO   ;;
                                            ;;  driven ALDs priority, since we already started the FIFO     ;;
                                            ;;  load.  The "need ALD" bit is stored in bit 6 of IV.QT.      ;;
                                            ;; ------------------------------------------------------------ ;;
                                            ANDI    #$40,   R1          ; Is "Need FIFO ALD" bit set?
                                            BEQ     @@no_fifo_ald
                                            XOR     IV.QT,  R1          ;\__ Clear the "Need FIFO ALD" bit.
                                            MVO     R1,     IV.QT       ;/
                                            CLRR    R1
                                            MVO     R1,     $80         ; Load a 0 into ALD (trigger FIFO rd.)
                                            JR      R5                  ; done!

                                            ;; ------------------------------------------------------------ ;;
                                            ;;  We don't need to ALD on behalf of the FIFO.  So, we grab    ;;
                                            ;;  the next thing off our phrase list.                         ;;
                                            ;; ------------------------------------------------------------ ;;
                                @@no_fifo_ald:
                                            MVI     IV.PPTR, R4         ; Get phrase pointer.
                                            TSTR    R4                  ; Is it zero?
                                            BEQ     @@next_phrase       ; Yes:  Get next phrase from queue.

                                            MVI@    R4,     R0
                                            TSTR    R0                  ; Is it end of phrase?
                                            BNEQ    @@process_phrase    ; !=0:  Go do it.

                                            MVO     R0,     IV.PPTR     ; 
                                @@next_phrase:
                                            MVI     IV.QT,  R1          ; reload queue tail (was trashed above)
                                            MOVR    R1,     R0          ; copy QT to R0 so we can increment it
                                            ANDI    #$7,    R1          ; Mask away flags in queue head
                                            CMP     IV.QH,  R1          ; Is it same as queue tail?
                                            BEQ     @@leave             ; Yes:  No more speech for now.

                                            INCR    R0
                                            ANDI    #$F7,   R0          ; mask away the possible 'carry'
                                            MVO     R0,     IV.QT       ; save updated queue tail

                                            ADDI    #IV.Q,  R1          ; Index into queue
                                            MVI@    R1,     R4          ; get next value from queue
                                            CMPI    #43,    R4          ; Is it a RESROM or Phrase?
                                            BNC     @@play_resrom_r4
                                @@new_phrase:
                                ;            ADDI    #IV_PHRASE_TBL - 43, R4 ; Index into phrase table
                                ;            MVI@    R4,     R4          ; Read from phrase table
                                            MVO     R4,     IV.PPTR
                                            JR      R5                  ; we'll get to this phrase next time.

                                @@play_resrom_r4:
                                            MVO     R4,     $0080       ; Just ALD it
                                            JR      R5                  ; and leave.

                                            ;; ------------------------------------------------------------ ;;
                                            ;;  We're in the middle of a phrase, so continue interpreting.  ;;
                                            ;; ------------------------------------------------------------ ;;
                                @@process_phrase:
                                            
                                            MVO     R4,     IV.PPTR     ; save new phrase pointer
                                            CMPI    #43,    R0          ; Is it a RESROM cue?
                                            BC      @@play_fifo         ; Just ALD it and leave.
                                @@play_resrom_r0
                                            MVO     R0,     $0080       ; Just ALD it
                                            JR      R5                  ; and leave.
                                @@play_fifo:
                                            MVI     IV.FPTR,R1          ; Make sure not to stomp existing FIFO
                                            TSTR    R1                  ; data.
                                            BEQ     @@new_fifo_ok
                                            DECR    R4                  ; Oops, FIFO data still playing,
                                            MVO     R4,     IV.PPTR     ; so rewind.
                                            JR      R5                  ; and leave.

                                @@new_fifo_ok:
                                            MOVR    R0,     R4          ;
                                            MVI@    R4,     R0          ; Get chunk length
                                            MVO     R0,     IV.FLEN     ; Init FIFO chunk length
                                            MVO     R4,     IV.FPTR     ; Init FIFO pointer
                                            MVI     IV.QT,  R0          ;\
                                            XORI    #$40,   R0          ; |- Set "Need ALD" bit in QT
                                            MVO     R0,     IV.QT       ;/

                                  IF 1      ; debug code                ;\
                                            ANDI    #$40,   R0          ; |   Debug code:  We should only
                                            BNEQ    @@qtok              ; |-- be here if "Need FIFO ALD" 
                                            HLT     ;BUG!!              ; |   was already clear.         
                                @@qtok                                  ;/    
                                  ENDI
                                            JR      R5                  ; leave.

                                            ENDP


                                ;; ======================================================================== ;;
                                ;;  NAME                                                                    ;;
                                ;;      IV_PLAY     Play a voice sample sequence.                           ;;
                                ;;                                                                          ;;
                                ;;  AUTHOR                                                                  ;;
                                ;;      Joseph Zbiciak <intvnut AT gmail.com>                               ;;
                                ;;                                                                          ;;
                                ;;  REVISION HISTORY                                                        ;;
                                ;;      15-Sep-2002 Initial revision . . . . . . . . . . .  J. Zbiciak      ;;
                                ;;                                                                          ;;
                                ;;  INPUTS for IV_PLAY                                                      ;;
                                ;;      R5      Invocation record, followed by return address.              ;;
                                ;;                  1 DECLE    Phrase number to play.                       ;;
                                ;;                                                                          ;;
                                ;;  INPUTS for IV_PLAY.1                                                    ;;
                                ;;      R0      Address of phrase to play.                                  ;;
                                ;;      R5      Return address                                              ;;
                                ;;                                                                          ;;
                                ;;  OUTPUTS                                                                 ;;
                                ;;      R0, R1  trashed                                                     ;;
                                ;;      Z==0    if item not successfully queued.                            ;;
                                ;;      Z==1    if successfully queued.                                     ;;
                                ;;                                                                          ;;
                                ;;  NOTES                                                                   ;;
                                ;;      This code will drop phrases if the queue is full.                   ;;
                                ;;      Phrase numbers 1..42 are RESROM samples.  43..255 will index        ;;
                                ;;      into the user-supplied IV_PHRASE_TBL.  43 will refer to the         ;;
                                ;;      first entry, 44 to the second, and so on.  Phrase 0 is undefined.   ;;
                                ;;                                                                          ;;
                                ;; ------------------------------------------------------------------------ ;;
                                ;;                   Copyright (c) 2002, Joseph Zbiciak                     ;;
                                ;; ======================================================================== ;;
                                IV_PLAY     PROC
                                            MVI@    R5,     R0

                                @@1:        ; alternate entry point
                                            MVI     IV.QT,  R1          ; Get queue tail
                                            SWAP    R1,     2           ;\___ Leave if "no Intellivoice"
                                            BMI     @@leave             ;/    bit it set.
                                @@ok:       
                                            DECR    R1                  ;\
                                            ANDI    #$7,    R1          ; |-- See if we still have room
                                            CMP     IV.QH,  R1          ;/
                                            BEQ     @@leave             ; Leave if we're full

                                @@2:        MVI     IV.QH,  R1          ; Get our queue head pointer
                                            PSHR    R1                  ;\
                                            INCR    R1                  ; |
                                            ANDI    #$F7,   R1          ; |-- Increment it, removing
                                            MVO     R1,     IV.QH       ; |   carry but preserving flags.
                                            PULR    R1                  ;/

                                            ADDI    #IV.Q,  R1          ;\__ Store phrase to queue
                                            MVO@    R0,     R1          ;/

                                @@leave:    JR      R5                  ; Leave.
                                            ENDP

                                ;; ======================================================================== ;;
                                ;;  NAME                                                                    ;;
                                ;;      IV_PLAYW    Play a voice sample sequence.  Wait for queue room.     ;;
                                ;;                                                                          ;;
                                ;;  AUTHOR                                                                  ;;
                                ;;      Joseph Zbiciak <intvnut AT gmail.com>                               ;;
                                ;;                                                                          ;;
                                ;;  REVISION HISTORY                                                        ;;
                                ;;      15-Sep-2002 Initial revision . . . . . . . . . . .  J. Zbiciak      ;;
                                ;;                                                                          ;;
                                ;;  INPUTS for IV_PLAY                                                      ;;
                                ;;      R5      Invocation record, followed by return address.              ;;
                                ;;                  1 DECLE    Phrase number to play.                       ;;
                                ;;                                                                          ;;
                                ;;  INPUTS for IV_PLAY.1                                                    ;;
                                ;;      R0      Address of phrase to play.                                  ;;
                                ;;      R5      Return address                                              ;;
                                ;;                                                                          ;;
                                ;;  OUTPUTS                                                                 ;;
                                ;;      R0, R1  trashed                                                     ;;
                                ;;                                                                          ;;
                                ;;  NOTES                                                                   ;;
                                ;;      This code will wait for a queue slot to open if queue is full.      ;;
                                ;;      Phrase numbers 1..42 are RESROM samples.  43..255 will index        ;;
                                ;;      into the user-supplied IV_PHRASE_TBL.  43 will refer to the         ;;
                                ;;      first entry, 44 to the second, and so on.  Phrase 0 is undefined.   ;;
                                ;;                                                                          ;;
                                ;; ------------------------------------------------------------------------ ;;
                                ;;                   Copyright (c) 2002, Joseph Zbiciak                     ;;
                                ;; ======================================================================== ;;
                                IV_PLAYW    PROC
                                            MVI@    R5,     R0

                                @@1:        ; alternate entry point
                                            MVI     IV.QT,  R1          ; Get queue tail
                                            SWAP    R1,     2           ;\___ Leave if "no Intellivoice"
                                            BMI     IV_PLAY.leave       ;/    bit it set.
                                @@ok:       
                                            DECR    R1                  ;\
                                            ANDI    #$7,    R1          ; |-- See if we still have room
                                            CMP     IV.QH,  R1          ;/
                                            BEQ     @@1                 ; wait for room
                                            B       IV_PLAY.2

                                            ENDP

                                ;; ======================================================================== ;;
                                ;;  NAME                                                                    ;;
                                ;;      IV_WAIT     Wait for voice queue to empty.                          ;;
                                ;;                                                                          ;;
                                ;;  AUTHOR                                                                  ;;
                                ;;      Joseph Zbiciak <intvnut AT gmail.com>                               ;;
                                ;;                                                                          ;;
                                ;;  REVISION HISTORY                                                        ;;
                                ;;      15-Sep-2002 Initial revision . . . . . . . . . . .  J. Zbiciak      ;;
                                ;;                                                                          ;;
                                ;;  INPUTS for IV_WAIT                                                      ;;
                                ;;      R5      Return address                                              ;;
                                ;;                                                                          ;;
                                ;;  OUTPUTS                                                                 ;;
                                ;;      R0      trashed.                                                    ;;
                                ;;                                                                          ;;
                                ;;  NOTES                                                                   ;;
                                ;;      This waits until the Intellivoice is nearly completely quiescent.   ;;
                                ;;      Some voice data may still be spoken from the last triggered         ;;
                                ;;      phrase.  To truly wait for *that* to be spoken, speak a 'pause'     ;;
                                ;;      (eg. RESROM.pa1) and then call IV_WAIT.                             ;;
                                ;; ------------------------------------------------------------------------ ;;
                                ;;                   Copyright (c) 2002, Joseph Zbiciak                     ;;
                                ;; ======================================================================== ;;
                                IV_WAIT     PROC
                                            MVI     IV.QH,  R0
                                            SWAP    R0                  ;\___ test bit 7, leave if set.
                                            SWAP    R0                  ;/    (SWAP2 corrupts upper byte.)
                                            BMI     @@leave

                                            ; Wait for queue to drain.
                                @@q_loop:   CMP     IV.QT,  R0
                                            BNEQ    @@q_loop

                                            ; Wait for FIFO and LRQ to say ready.
                                @@s_loop:   MVI     $81,    R0          ; Read FIFO status.  0 == ready.
                                            COMR    R0
                                            AND     $80,    R0          ; Merge w/ ALD status.  1 == ready
                                            TSTR    R0
                                            BPL     @@s_loop            ; if bit 15 == 0, not ready.
                                            
                                @@leave:    JR      R5
                                            ENDP

                                ;; ======================================================================== ;;
                                ;;  End of File:  ivoice.asm                                                ;;
                                ;; ======================================================================== ;;

                                ;* ======================================================================== *;
                                ;*  These routines are placed into the public domain by their author.  All  *;
                                ;*  copyright rights are hereby relinquished on the routines and data in    *;
                                ;*  this file.  -- Joseph Zbiciak, 2008                                     *;
                                ;* ======================================================================== *;

                                ;; ======================================================================== ;;
                                ;;  NAME                                                                    ;;
                                ;;      IV_SAYNUM16 Say a 16-bit unsigned number using RESROM digits        ;;
                                ;;                                                                          ;;
                                ;;  AUTHOR                                                                  ;;
                                ;;      Joseph Zbiciak <intvnut AT gmail.com>                               ;;
                                ;;                                                                          ;;
                                ;;  REVISION HISTORY                                                        ;;
                                ;;      16-Sep-2002 Initial revision . . . . . . . . . . .  J. Zbiciak      ;;
                                ;;                                                                          ;;
                                ;;  INPUTS for IV_INIT                                                      ;;
                                ;;      R0      Number to "speak"                                           ;;
                                ;;      R5      Return address                                              ;;
                                ;;                                                                          ;;
                                ;;  OUTPUTS                                                                 ;;
                                ;;                                                                          ;;
                                ;;  DESCRIPTION                                                             ;;
                                ;;      "Says" a 16-bit number using IV_PLAYW to queue up the phrase.       ;;
                                ;;      Because the number may be built from several segments, it could     ;;
                                ;;      easily eat up the queue.  I believe the longest number will take    ;;
                                ;;      7 queue entries -- that is, fill the queue.  Thus, this code        ;;
                                ;;      could block, waiting for slots in the queue.                        ;;
                                ;; ======================================================================== ;;

                                IV_SAYNUM16 PROC
                                            PSHR    R5

                                            TSTR    R0
                                            BEQ     @@zero          ; Special case:  Just say "zero"

                                            ;; ------------------------------------------------------------ ;;
                                            ;;  First, try to pull off 'thousands'.  We call ourselves      ;;
                                            ;;  recursively to play the the number of thousands.            ;;
                                            ;; ------------------------------------------------------------ ;;
                                            CLRR    R1
                                @@thloop:   INCR    R1
                                            SUBI    #1000,  R0
                                            BC      @@thloop

                                            ADDI    #1000,  R0
                                            PSHR    R0
                                            DECR    R1
                                            BEQ     @@no_thousand

                                            CALL    IV_SAYNUM16.recurse

                                            CALL    IV_PLAYW
                                            DECLE   36  ; THOUSAND
                                            
                                @@no_thousand
                                            PULR    R1

                                            ;; ------------------------------------------------------------ ;;
                                            ;;  Now try to play hundreds.                                   ;;
                                            ;; ------------------------------------------------------------ ;;
                                            MVII    #7-1, R0    ; ZERO
                                            CMPI    #100,   R1
                                            BNC     @@no_hundred

                                @@hloop:    INCR    R0
                                            SUBI    #100,   R1
                                            BC      @@hloop
                                            ADDI    #100,   R1

                                            PSHR    R1

                                            CALL    IV_PLAYW.1

                                            CALL    IV_PLAYW
                                            DECLE   35  ; HUNDRED

                                            PULR    R1
                                            B       @@notrecurse    ; skip "PSHR R5"
                                @@recurse:  PSHR    R5              ; recursive entry point for 'thousand'

                                @@no_hundred:
                                @@notrecurse:
                                            MOVR    R1,     R0
                                            BEQ     @@leave

                                            SUBI    #20,    R1
                                            BNC     @@teens

                                            MVII    #27-1, R0   ; TWENTY
                                @@tyloop    INCR    R0
                                            SUBI    #10,    R1
                                            BC      @@tyloop
                                            ADDI    #10,    R1

                                            PSHR    R1
                                            CALL    IV_PLAYW.1

                                            PULR    R0
                                            TSTR    R0
                                            BEQ     @@leave

                                @@teens:
                                @@zero:     ADDI    #7, R0  ; ZERO

                                            CALL    IV_PLAYW.1

                                @@leave     PULR    PC
                                            ENDP

                                ;; ======================================================================== ;;
                                ;;  End of File:  saynum16.asm                                              ;;
                                ;; ======================================================================== ;;

                                    ENDI

                                        IF DEFINED intybasic_flash

                                ;; ======================================================================== ;;
                                ;;  JLP "Save Game" support                                                 ;;
                                ;; ======================================================================== ;;
                                JF.first    EQU     $8023
                                JF.last     EQU     $8024
                                JF.addr     EQU     $8025
                                JF.row      EQU     $8026
                                                   
                                JF.wrcmd    EQU     $802D
                                JF.rdcmd    EQU     $802E
                                JF.ercmd    EQU     $802F
                                JF.wrkey    EQU     $C0DE
                                JF.rdkey    EQU     $DEC0
                                JF.erkey    EQU     $BEEF

                                JF.write:   DECLE   JF.wrcmd,   JF.wrkey    ; Copy JLP RAM to flash row  
                                JF.read:    DECLE   JF.rdcmd,   JF.rdkey    ; Copy flash row to JLP RAM  
                                JF.erase:   DECLE   JF.ercmd,   JF.erkey    ; Erase flash sector 

                                ;; ======================================================================== ;;
                                ;;  JF.INIT         Copy JLP save-game support routine to System RAM        ;;
                                ;; ======================================================================== ;;
                                JF.INIT     PROC
                                            PSHR    R5            
                                            MVII    #@@__code,  R5
                                            MVII    #JF.SYSRAM, R4
                                            REPEAT  5       
                                            MVI@    R5,         R0      ; \_ Copy code fragment to System RAM
                                            MVO@    R0,         R4      ; /
                                            ENDR
                                            PULR    PC

                                            ;; === start of code that will run from RAM
                                @@__code:   MVO@    R0,         R1      ; JF.SYSRAM + 0: initiate command
                                            ADD@    R1,         PC      ; JF.SYSRAM + 1: Wait for JLP to return
                                            JR      R5                  ; JF.SYSRAM + 2:
                                            MVO@    R2,         R2      ; JF.SYSRAM + 3: \__ simple ISR
                                            JR      R5                  ; JF.SYSRAM + 4: /
                                            ;; === end of code that will run from RAM
                                            ENDP

                                ;; ======================================================================== ;;
                                ;;  JF.CMD          Issue a JLP Flash command                               ;;
                                ;;                                                                          ;;
                                ;;  INPUT                                                                   ;;
                                ;;      R0  Slot number to operate on                                       ;;
                                ;;      R1  Address to copy to/from in JLP RAM                              ;;
                                ;;      @R5 Command to invoke:                                              ;;
                                ;;                                                                          ;;
                                ;;              JF.write -- Copy JLP RAM to Flash                           ;;
                                ;;              JF.read  -- Copy Flash to JLP RAM                           ;;
                                ;;              JF.erase -- Erase flash sector                              ;;
                                ;;                                                                          ;;
                                ;;  OUTPUT                                                                  ;;
                                ;;      R0 - R4 not modified.  (Saved and restored across call)             ;;
                                ;;      JLP command executed                                                ;;
                                ;;                                                                          ;;
                                ;;  NOTES                                                                   ;;
                                ;;      This code requires two short routines in the console's System RAM.  ;;
                                ;;      It also requires that the system stack reside in System RAM.        ;;
                                ;;      Because an interrupt may occur during the code's execution, there   ;;
                                ;;      must be sufficient stack space to service the interrupt (8 words).  ;;
                                ;;                                                                          ;;
                                ;;      The code also relies on the fact that the EXEC ISR dispatch does    ;;
                                ;;      not modify R2.  This allows us to initialize R2 for the ISR ahead   ;;
                                ;;      of time, rather than in the ISR.                                    ;;
                                ;; ======================================================================== ;;
                                JF.CMD      PROC

                                            MVO     R4,         JF.SV.R4    ; \
                                            MVII    #JF.SV.R0,  R4          ;  |
                                            MVO@    R0,         R4          ;  |- Save registers, but not on
                                            MVO@    R1,         R4          ;  |  the stack.  (limit stack use)
                                            MVO@    R2,         R4          ; /

                                            MVI@    R5,         R4          ; Get command to invoke

                                            MVO     R5,         JF.SV.R5    ; save return address

                                            DIS
                                            MVO     R1,         JF.addr     ; \_ Save SG arguments in JLP
                                            MVO     R0,         JF.row      ; /
                                                                          
                                            MVI@    R4,         R1          ; Get command address
                                            MVI@    R4,         R0          ; Get unlock word
                                                                          
                                            MVII    #$100,      R4          ; \
                                            SDBD                            ;  |_ Save old ISR in save area
                                            MVI@    R4,         R2          ;  |
                                            MVO     R2,         JF.SV.ISR   ; /
                                                                          
                                            MVII    #JF.SYSRAM + 3, R2      ; \
                                            MVO     R2,         $100        ;  |_ Set up new ISR in RAM
                                            SWAP    R2                      ;  |
                                            MVO     R2,         $101        ; / 
                                                                          
                                            MVII    #$20,       R2          ; Address of STIC handshake
                                            JSRE    R5,  JF.SYSRAM          ; Invoke the command
                                                                          
                                            MVI     JF.SV.ISR,  R2          ; \
                                            MVO     R2,         $100        ;  |_ Restore old ISR 
                                            SWAP    R2                      ;  |
                                            MVO     R2,         $101        ; /
                                                                          
                                            MVII    #JF.SV.R0,  R5          ; \
                                            MVI@    R5,         R0          ;  |
                                            MVI@    R5,         R1          ;  |- Restore registers
                                            MVI@    R5,         R2          ;  |
                                            MVI@    R5,         R4          ; /
                                            MVI@    R5,         PC          ; Return

                                            ENDP


                                        ENDI

                                	IF DEFINED intybasic_fastmult

                                ; Quarter Square Multiplication
                                ; Assembly code by Joe Zbiciak, 2015
                                ; Released to public domain.

0x642B                          QSQR8_TBL:  PROC
642B   3F80 3F01 3E82 3E04                  DECLE   $3F80, $3F01, $3E82, $3E04, $3D86, $3D09, $3C8C, $3C10
642F   3D86 3D09 3C8C 3C10 
6433   3B94 3B19 3A9E 3A24                  DECLE   $3B94, $3B19, $3A9E, $3A24, $39AA, $3931, $38B8, $3840
6437   39AA 3931 38B8 3840 
643B   37C8 3751 36DA 3664                  DECLE   $37C8, $3751, $36DA, $3664, $35EE, $3579, $3504, $3490
643F   35EE 3579 3504 3490 
6443   341C 33A9 3336 32C4                  DECLE   $341C, $33A9, $3336, $32C4, $3252, $31E1, $3170, $3100
6447   3252 31E1 3170 3100 
644B   3090 3021 2FB2 2F44                  DECLE   $3090, $3021, $2FB2, $2F44, $2ED6, $2E69, $2DFC, $2D90
644F   2ED6 2E69 2DFC 2D90 
6453   2D24 2CB9 2C4E 2BE4                  DECLE   $2D24, $2CB9, $2C4E, $2BE4, $2B7A, $2B11, $2AA8, $2A40
6457   2B7A 2B11 2AA8 2A40 
645B   29D8 2971 290A 28A4                  DECLE   $29D8, $2971, $290A, $28A4, $283E, $27D9, $2774, $2710
645F   283E 27D9 2774 2710 
6463   26AC 2649 25E6 2584                  DECLE   $26AC, $2649, $25E6, $2584, $2522, $24C1, $2460, $2400
6467   2522 24C1 2460 2400 
646B   23A0 2341 22E2 2284                  DECLE   $23A0, $2341, $22E2, $2284, $2226, $21C9, $216C, $2110
646F   2226 21C9 216C 2110 
6473   20B4 2059 1FFE 1FA4                  DECLE   $20B4, $2059, $1FFE, $1FA4, $1F4A, $1EF1, $1E98, $1E40
6477   1F4A 1EF1 1E98 1E40 
647B   1DE8 1D91 1D3A 1CE4                  DECLE   $1DE8, $1D91, $1D3A, $1CE4, $1C8E, $1C39, $1BE4, $1B90
647F   1C8E 1C39 1BE4 1B90 
6483   1B3C 1AE9 1A96 1A44                  DECLE   $1B3C, $1AE9, $1A96, $1A44, $19F2, $19A1, $1950, $1900
6487   19F2 19A1 1950 1900 
648B   18B0 1861 1812 17C4                  DECLE   $18B0, $1861, $1812, $17C4, $1776, $1729, $16DC, $1690
648F   1776 1729 16DC 1690 
6493   1644 15F9 15AE 1564                  DECLE   $1644, $15F9, $15AE, $1564, $151A, $14D1, $1488, $1440
6497   151A 14D1 1488 1440 
649B   13F8 13B1 136A 1324                  DECLE   $13F8, $13B1, $136A, $1324, $12DE, $1299, $1254, $1210
649F   12DE 1299 1254 1210 
64A3   11CC 1189 1146 1104                  DECLE   $11CC, $1189, $1146, $1104, $10C2, $1081, $1040, $1000
64A7   10C2 1081 1040 1000 
64AB   0FC0 0F81 0F42 0F04                  DECLE   $0FC0, $0F81, $0F42, $0F04, $0EC6, $0E89, $0E4C, $0E10
64AF   0EC6 0E89 0E4C 0E10 
64B3   0DD4 0D99 0D5E 0D24                  DECLE   $0DD4, $0D99, $0D5E, $0D24, $0CEA, $0CB1, $0C78, $0C40
64B7   0CEA 0CB1 0C78 0C40 
64BB   0C08 0BD1 0B9A 0B64                  DECLE   $0C08, $0BD1, $0B9A, $0B64, $0B2E, $0AF9, $0AC4, $0A90
64BF   0B2E 0AF9 0AC4 0A90 
64C3   0A5C 0A29 09F6 09C4                  DECLE   $0A5C, $0A29, $09F6, $09C4, $0992, $0961, $0930, $0900
64C7   0992 0961 0930 0900 
64CB   08D0 08A1 0872 0844                  DECLE   $08D0, $08A1, $0872, $0844, $0816, $07E9, $07BC, $0790
64CF   0816 07E9 07BC 0790 
64D3   0764 0739 070E 06E4                  DECLE   $0764, $0739, $070E, $06E4, $06BA, $0691, $0668, $0640
64D7   06BA 0691 0668 0640 
64DB   0618 05F1 05CA 05A4                  DECLE   $0618, $05F1, $05CA, $05A4, $057E, $0559, $0534, $0510
64DF   057E 0559 0534 0510 
64E3   04EC 04C9 04A6 0484                  DECLE   $04EC, $04C9, $04A6, $0484, $0462, $0441, $0420, $0400
64E7   0462 0441 0420 0400 
64EB   03E0 03C1 03A2 0384                  DECLE   $03E0, $03C1, $03A2, $0384, $0366, $0349, $032C, $0310
64EF   0366 0349 032C 0310 
64F3   02F4 02D9 02BE 02A4                  DECLE   $02F4, $02D9, $02BE, $02A4, $028A, $0271, $0258, $0240
64F7   028A 0271 0258 0240 
64FB   0228 0211 01FA 01E4                  DECLE   $0228, $0211, $01FA, $01E4, $01CE, $01B9, $01A4, $0190
64FF   01CE 01B9 01A4 0190 
6503   017C 0169 0156 0144                  DECLE   $017C, $0169, $0156, $0144, $0132, $0121, $0110, $0100
6507   0132 0121 0110 0100 
650B   00F0 00E1 00D2 00C4                  DECLE   $00F0, $00E1, $00D2, $00C4, $00B6, $00A9, $009C, $0090
650F   00B6 00A9 009C 0090 
6513   0084 0079 006E 0064                  DECLE   $0084, $0079, $006E, $0064, $005A, $0051, $0048, $0040
6517   005A 0051 0048 0040 
651B   0038 0031 002A 0024                  DECLE   $0038, $0031, $002A, $0024, $001E, $0019, $0014, $0010
651F   001E 0019 0014 0010 
6523   000C 0009 0006 0004                  DECLE   $000C, $0009, $0006, $0004, $0002, $0001, $0000
6527   0002 0001 0000 
0x652A                          @@mid:
652A   0000 0000 0001 0002                  DECLE   $0000, $0000, $0001, $0002, $0004, $0006, $0009, $000C
652E   0004 0006 0009 000C 
6532   0010 0014 0019 001E                  DECLE   $0010, $0014, $0019, $001E, $0024, $002A, $0031, $0038
6536   0024 002A 0031 0038 
653A   0040 0048 0051 005A                  DECLE   $0040, $0048, $0051, $005A, $0064, $006E, $0079, $0084
653E   0064 006E 0079 0084 
6542   0090 009C 00A9 00B6                  DECLE   $0090, $009C, $00A9, $00B6, $00C4, $00D2, $00E1, $00F0
6546   00C4 00D2 00E1 00F0 
654A   0100 0110 0121 0132                  DECLE   $0100, $0110, $0121, $0132, $0144, $0156, $0169, $017C
654E   0144 0156 0169 017C 
6552   0190 01A4 01B9 01CE                  DECLE   $0190, $01A4, $01B9, $01CE, $01E4, $01FA, $0211, $0228
6556   01E4 01FA 0211 0228 
655A   0240 0258 0271 028A                  DECLE   $0240, $0258, $0271, $028A, $02A4, $02BE, $02D9, $02F4
655E   02A4 02BE 02D9 02F4 
6562   0310 032C 0349 0366                  DECLE   $0310, $032C, $0349, $0366, $0384, $03A2, $03C1, $03E0
6566   0384 03A2 03C1 03E0 
656A   0400 0420 0441 0462                  DECLE   $0400, $0420, $0441, $0462, $0484, $04A6, $04C9, $04EC
656E   0484 04A6 04C9 04EC 
6572   0510 0534 0559 057E                  DECLE   $0510, $0534, $0559, $057E, $05A4, $05CA, $05F1, $0618
6576   05A4 05CA 05F1 0618 
657A   0640 0668 0691 06BA                  DECLE   $0640, $0668, $0691, $06BA, $06E4, $070E, $0739, $0764
657E   06E4 070E 0739 0764 
6582   0790 07BC 07E9 0816                  DECLE   $0790, $07BC, $07E9, $0816, $0844, $0872, $08A1, $08D0
6586   0844 0872 08A1 08D0 
658A   0900 0930 0961 0992                  DECLE   $0900, $0930, $0961, $0992, $09C4, $09F6, $0A29, $0A5C
658E   09C4 09F6 0A29 0A5C 
6592   0A90 0AC4 0AF9 0B2E                  DECLE   $0A90, $0AC4, $0AF9, $0B2E, $0B64, $0B9A, $0BD1, $0C08
6596   0B64 0B9A 0BD1 0C08 
659A   0C40 0C78 0CB1 0CEA                  DECLE   $0C40, $0C78, $0CB1, $0CEA, $0D24, $0D5E, $0D99, $0DD4
659E   0D24 0D5E 0D99 0DD4 
65A2   0E10 0E4C 0E89 0EC6                  DECLE   $0E10, $0E4C, $0E89, $0EC6, $0F04, $0F42, $0F81, $0FC0
65A6   0F04 0F42 0F81 0FC0 
65AA   1000 1040 1081 10C2                  DECLE   $1000, $1040, $1081, $10C2, $1104, $1146, $1189, $11CC
65AE   1104 1146 1189 11CC 
65B2   1210 1254 1299 12DE                  DECLE   $1210, $1254, $1299, $12DE, $1324, $136A, $13B1, $13F8
65B6   1324 136A 13B1 13F8 
65BA   1440 1488 14D1 151A                  DECLE   $1440, $1488, $14D1, $151A, $1564, $15AE, $15F9, $1644
65BE   1564 15AE 15F9 1644 
65C2   1690 16DC 1729 1776                  DECLE   $1690, $16DC, $1729, $1776, $17C4, $1812, $1861, $18B0
65C6   17C4 1812 1861 18B0 
65CA   1900 1950 19A1 19F2                  DECLE   $1900, $1950, $19A1, $19F2, $1A44, $1A96, $1AE9, $1B3C
65CE   1A44 1A96 1AE9 1B3C 
65D2   1B90 1BE4 1C39 1C8E                  DECLE   $1B90, $1BE4, $1C39, $1C8E, $1CE4, $1D3A, $1D91, $1DE8
65D6   1CE4 1D3A 1D91 1DE8 
65DA   1E40 1E98 1EF1 1F4A                  DECLE   $1E40, $1E98, $1EF1, $1F4A, $1FA4, $1FFE, $2059, $20B4
65DE   1FA4 1FFE 2059 20B4 
65E2   2110 216C 21C9 2226                  DECLE   $2110, $216C, $21C9, $2226, $2284, $22E2, $2341, $23A0
65E6   2284 22E2 2341 23A0 
65EA   2400 2460 24C1 2522                  DECLE   $2400, $2460, $24C1, $2522, $2584, $25E6, $2649, $26AC
65EE   2584 25E6 2649 26AC 
65F2   2710 2774 27D9 283E                  DECLE   $2710, $2774, $27D9, $283E, $28A4, $290A, $2971, $29D8
65F6   28A4 290A 2971 29D8 
65FA   2A40 2AA8 2B11 2B7A                  DECLE   $2A40, $2AA8, $2B11, $2B7A, $2BE4, $2C4E, $2CB9, $2D24
65FE   2BE4 2C4E 2CB9 2D24 
6602   2D90 2DFC 2E69 2ED6                  DECLE   $2D90, $2DFC, $2E69, $2ED6, $2F44, $2FB2, $3021, $3090
6606   2F44 2FB2 3021 3090 
660A   3100 3170 31E1 3252                  DECLE   $3100, $3170, $31E1, $3252, $32C4, $3336, $33A9, $341C
660E   32C4 3336 33A9 341C 
6612   3490 3504 3579 35EE                  DECLE   $3490, $3504, $3579, $35EE, $3664, $36DA, $3751, $37C8
6616   3664 36DA 3751 37C8 
661A   3840 38B8 3931 39AA                  DECLE   $3840, $38B8, $3931, $39AA, $3A24, $3A9E, $3B19, $3B94
661E   3A24 3A9E 3B19 3B94 
6622   3C10 3C8C 3D09 3D86                  DECLE   $3C10, $3C8C, $3D09, $3D86, $3E04, $3E82, $3F01, $3F80
6626   3E04 3E82 3F01 3F80 
662A   4000 4080 4101 4182                  DECLE   $4000, $4080, $4101, $4182, $4204, $4286, $4309, $438C
662E   4204 4286 4309 438C 
6632   4410 4494 4519 459E                  DECLE   $4410, $4494, $4519, $459E, $4624, $46AA, $4731, $47B8
6636   4624 46AA 4731 47B8 
663A   4840 48C8 4951 49DA                  DECLE   $4840, $48C8, $4951, $49DA, $4A64, $4AEE, $4B79, $4C04
663E   4A64 4AEE 4B79 4C04 
6642   4C90 4D1C 4DA9 4E36                  DECLE   $4C90, $4D1C, $4DA9, $4E36, $4EC4, $4F52, $4FE1, $5070
6646   4EC4 4F52 4FE1 5070 
664A   5100 5190 5221 52B2                  DECLE   $5100, $5190, $5221, $52B2, $5344, $53D6, $5469, $54FC
664E   5344 53D6 5469 54FC 
6652   5590 5624 56B9 574E                  DECLE   $5590, $5624, $56B9, $574E, $57E4, $587A, $5911, $59A8
6656   57E4 587A 5911 59A8 
665A   5A40 5AD8 5B71 5C0A                  DECLE   $5A40, $5AD8, $5B71, $5C0A, $5CA4, $5D3E, $5DD9, $5E74
665E   5CA4 5D3E 5DD9 5E74 
6662   5F10 5FAC 6049 60E6                  DECLE   $5F10, $5FAC, $6049, $60E6, $6184, $6222, $62C1, $6360
6666   6184 6222 62C1 6360 
666A   6400 64A0 6541 65E2                  DECLE   $6400, $64A0, $6541, $65E2, $6684, $6726, $67C9, $686C
666E   6684 6726 67C9 686C 
6672   6910 69B4 6A59 6AFE                  DECLE   $6910, $69B4, $6A59, $6AFE, $6BA4, $6C4A, $6CF1, $6D98
6676   6BA4 6C4A 6CF1 6D98 
667A   6E40 6EE8 6F91 703A                  DECLE   $6E40, $6EE8, $6F91, $703A, $70E4, $718E, $7239, $72E4
667E   70E4 718E 7239 72E4 
6682   7390 743C 74E9 7596                  DECLE   $7390, $743C, $74E9, $7596, $7644, $76F2, $77A1, $7850
6686   7644 76F2 77A1 7850 
668A   7900 79B0 7A61 7B12                  DECLE   $7900, $79B0, $7A61, $7B12, $7BC4, $7C76, $7D29, $7DDC
668E   7BC4 7C76 7D29 7DDC 
6692   7E90 7F44 7FF9 80AE                  DECLE   $7E90, $7F44, $7FF9, $80AE, $8164, $821A, $82D1, $8388
6696   8164 821A 82D1 8388 
669A   8440 84F8 85B1 866A                  DECLE   $8440, $84F8, $85B1, $866A, $8724, $87DE, $8899, $8954
669E   8724 87DE 8899 8954 
66A2   8A10 8ACC 8B89 8C46                  DECLE   $8A10, $8ACC, $8B89, $8C46, $8D04, $8DC2, $8E81, $8F40
66A6   8D04 8DC2 8E81 8F40 
66AA   9000 90C0 9181 9242                  DECLE   $9000, $90C0, $9181, $9242, $9304, $93C6, $9489, $954C
66AE   9304 93C6 9489 954C 
66B2   9610 96D4 9799 985E                  DECLE   $9610, $96D4, $9799, $985E, $9924, $99EA, $9AB1, $9B78
66B6   9924 99EA 9AB1 9B78 
66BA   9C40 9D08 9DD1 9E9A                  DECLE   $9C40, $9D08, $9DD1, $9E9A, $9F64, $A02E, $A0F9, $A1C4
66BE   9F64 A02E A0F9 A1C4 
66C2   A290 A35C A429 A4F6                  DECLE   $A290, $A35C, $A429, $A4F6, $A5C4, $A692, $A761, $A830
66C6   A5C4 A692 A761 A830 
66CA   A900 A9D0 AAA1 AB72                  DECLE   $A900, $A9D0, $AAA1, $AB72, $AC44, $AD16, $ADE9, $AEBC
66CE   AC44 AD16 ADE9 AEBC 
66D2   AF90 B064 B139 B20E                  DECLE   $AF90, $B064, $B139, $B20E, $B2E4, $B3BA, $B491, $B568
66D6   B2E4 B3BA B491 B568 
66DA   B640 B718 B7F1 B8CA                  DECLE   $B640, $B718, $B7F1, $B8CA, $B9A4, $BA7E, $BB59, $BC34
66DE   B9A4 BA7E BB59 BC34 
66E2   BD10 BDEC BEC9 BFA6                  DECLE   $BD10, $BDEC, $BEC9, $BFA6, $C084, $C162, $C241, $C320
66E6   C084 C162 C241 C320 
66EA   C400 C4E0 C5C1 C6A2                  DECLE   $C400, $C4E0, $C5C1, $C6A2, $C784, $C866, $C949, $CA2C
66EE   C784 C866 C949 CA2C 
66F2   CB10 CBF4 CCD9 CDBE                  DECLE   $CB10, $CBF4, $CCD9, $CDBE, $CEA4, $CF8A, $D071, $D158
66F6   CEA4 CF8A D071 D158 
66FA   D240 D328 D411 D4FA                  DECLE   $D240, $D328, $D411, $D4FA, $D5E4, $D6CE, $D7B9, $D8A4
66FE   D5E4 D6CE D7B9 D8A4 
6702   D990 DA7C DB69 DC56                  DECLE   $D990, $DA7C, $DB69, $DC56, $DD44, $DE32, $DF21, $E010
6706   DD44 DE32 DF21 E010 
670A   E100 E1F0 E2E1 E3D2                  DECLE   $E100, $E1F0, $E2E1, $E3D2, $E4C4, $E5B6, $E6A9, $E79C
670E   E4C4 E5B6 E6A9 E79C 
6712   E890 E984 EA79 EB6E                  DECLE   $E890, $E984, $EA79, $EB6E, $EC64, $ED5A, $EE51, $EF48
6716   EC64 ED5A EE51 EF48 
671A   F040 F138 F231 F32A                  DECLE   $F040, $F138, $F231, $F32A, $F424, $F51E, $F619, $F714
671E   F424 F51E F619 F714 
6722   F810 F90C FA09 FB06                  DECLE   $F810, $F90C, $FA09, $FB06, $FC04, $FD02, $FE01
6726   FC04 FD02 FE01 
                                            ENDP

                                ; R0 = R0 * R1, where R0 and R1 are unsigned 8-bit values
                                ; Destroys R1, R4
0x6729                          qs_mpy8:    PROC
6729   0084                                 MOVR    R0,             R4      ;   6
672A   02F9 652A                            ADDI    #QSQR8_TBL.mid, R1      ;   8
672C   00CC                                 ADDR    R1,             R4      ;   6   a + b
672D   0101                                 SUBR    R0,             R1      ;   6   a - b
672E   02A0                     @@ok:       MVI@    R4,             R0      ;   8
672F   0308                                 SUB@    R1,             R0      ;   8
6730   00AF                                 JR      R5                      ;   7
                                                                            ;----
                                                                            ;  49
                                            ENDP
                                            

                                ; R1 = R0 * R1, where R0 and R1 are 16-bit values
                                ; destroys R0, R2, R3, R4, R5
0x6731                          qs_mpy16:   PROC
6731   0275                                 PSHR    R5                  ;   9
                                                                   
                                            ; Unpack lo/hi
6732   0082                                 MOVR    R0,         R2      ;   6   
6733   03B8 00FF                            ANDI    #$FF,       R0      ;   8   R0 is lo(a)
6735   01C2                                 XORR    R0,         R2      ;   6   
6736   0042                                 SWAP    R2                  ;   6   R2 is hi(a)

6737   008B                                 MOVR    R1,         R3      ;   6   R3 is orig 16-bit b
6738   03B9 00FF                            ANDI    #$FF,       R1      ;   8   R1 is lo(b)
673A   008D                                 MOVR    R1,         R5      ;   6   R5 is lo(b)
673B   01CB                                 XORR    R1,         R3      ;   6   
673C   0043                                 SWAP    R3                  ;   6   R3 is hi(b)
                                                                        ;----
                                                                        ;  67
                                                                        
                                            ; lo * lo                   
673D   0084                                 MOVR    R0,         R4      ;   6   R4 is lo(a)
673E   02F9 652A                            ADDI    #QSQR8_TBL.mid, R1  ;   8
6740   00CC                                 ADDR    R1,         R4      ;   6   R4 = lo(a) + lo(b)
6741   0101                                 SUBR    R0,         R1      ;   6   R1 = lo(a) - lo(b)
                                                                        
6742   02A4                     @@pos_ll:   MVI@    R4,         R4      ;   8   R4 = qstbl[lo(a)+lo(b)]
6743   030C                                 SUB@    R1,         R4      ;   8   R4 = lo(a)*lo(b)
                                                                        ;----
                                                                        ;  42
                                                                        ;  67 (carried forward)
                                                                        ;----
                                                                        ; 109
                                                                       
                                            ; lo * hi                  
6744   0081                                 MOVR    R0,         R1      ;   6   R0 = R1 = lo(a)
6745   02FB 652A                            ADDI    #QSQR8_TBL.mid, R3  ;   8
6747   00D9                                 ADDR    R3,         R1      ;   6   R1 = hi(b) + lo(a)
6748   0103                                 SUBR    R0,         R3      ;   6   R3 = hi(b) - lo(a)
                                                                       
6749   0289                     @@pos_lh:   MVI@    R1,         R1      ;   8   R1 = qstbl[hi(b)-lo(a)]
674A   0319                                 SUB@    R3,         R1      ;   8   R1 = lo(a)*hi(b)
                                                                        ;----
                                                                        ;  42
                                                                        ; 109 (carried forward)
                                                                        ;----
                                                                        ; 151
                                                                       
                                            ; hi * lo                  
674B   00A8                                 MOVR    R5,         R0      ;   6   R5 = R0 = lo(b)
674C   02FA 652A                            ADDI    #QSQR8_TBL.mid, R2  ;   8
674E   00D5                                 ADDR    R2,         R5      ;   6   R3 = hi(a) + lo(b)
674F   0102                                 SUBR    R0,         R2      ;   6   R2 = hi(a) - lo(b)
                                                                       
6750   02E9                     @@pos_hl:   ADD@    R5,         R1      ;   8   \_ R1 = lo(a)*hi(b)+hi(a)*lo(b)
6751   0311                                 SUB@    R2,         R1      ;   8   /
                                                                        ;----
                                                                        ;  42
                                                                        ; 151 (carried forward)
                                                                        ;----
                                                                        ; 193
                                                                       
6752   0041                                 SWAP    R1                  ;   6   \_ shift upper product left 8
6753   03B9 FF00                            ANDI    #$FF00,     R1      ;   8   /
6755   00E1                                 ADDR    R4,         R1      ;   6   final product
6756   02B7                                 PULR    PC                  ;  12
                                                                        ;----
                                                                        ;  32
                                                                        ; 193 (carried forward)
                                                                        ;----
                                                                        ; 225
                                            ENDP

                                	ENDI

                                	IF DEFINED intybasic_fastdiv

                                ; Fast unsigned division/remainder
                                ; Assembly code by Oscar Toledo G. Jul/10/2015
                                ; Released to public domain.

                                	; Ultrafast unsigned division/remainder operation
                                	; Entry: R0 = Dividend
                                	;        R1 = Divisor
                                	; Output: R0 = Quotient
                                	;         R2 = Remainder
                                	; Worst case: 6 + 6 + 9 + 496 = 517 cycles
                                	; Best case: 6 + (6 + 7) * 16 = 214 cycles

                                uf_udiv16:	PROC
                                	CLRR R2		; 6
                                	SLLC R0,1	; 6
                                	BC @@1		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@2		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@3		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@4		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@5		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@6		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@7		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@8		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@9		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@10		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@11		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@12		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@13		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@14		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@15		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@16		; 7/9
                                	JR R5

                                @@1:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@2:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@3:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@4:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@5:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@6:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@7:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@8:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@9:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@10:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@11:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@12:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@13:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@14:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@15:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@16:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                	JR R5
                                	
                                	ENDP

                                	ENDI

                                	IF DEFINED intybasic_ecs
                                	ORG $4800	; Available up to $4FFF

                                        ; Disable ECS ROMs so that they don't conflict with us
                                        MVII    #$2A5F, R0
                                        MVO     R0,     $2FFF
                                        MVII    #$7A5F, R0
                                        MVO     R0,     $7FFF
                                        MVII    #$EA5F, R0
                                        MVO     R0,     $EFFF

                                        B       $1041       ; resume boot

                                	ENDI

0x200                                   ORG $200,$200,"-RWB"

0x200                           Q2:	; Reserved label for #BACKTAB

0x319                           	ORG $319,$319,"-RWB"
                                        ;
                                        ; 16-bits variables
                                	; Note IntyBASIC variables grow up starting in $308.
                                        ;
                                        IF DEFINED intybasic_voice
                                IV.Q:      RMB 8    ; IV_xxx        16-bit          Voice queue  (8 words)
                                IV.FPTR:   RMB 1    ; IV_xxx        16-bit          Current FIFO ptr.
                                IV.PPTR:   RMB 1    ; IV_xxx        16-bit          Current Phrase ptr.
                                        ENDI

0x323                                   ORG $323,$323,"-RWB"

0x323                           _scroll_buffer: RMB 20  ; Sometimes this is unused
0x337                           _music_table:	RMB 1	; Note table
0x338                           _music_start:	RMB 1	; Start of music
0x339                           _music_p:	RMB 1	; Pointer to music
0x33A                           _frame:         RMB 1   ; Current frame
0x33B                           _read:          RMB 1   ; Pointer to DATA
0x33C                           _gram_bitmap:   RMB 1   ; Bitmap for definition
0x33D                           _gram2_bitmap:  RMB 1   ; Secondary bitmap for definition
0x33E                           _screen:    RMB 1       ; Pointer to current screen position
0x33F                           _color:     RMB 1       ; Current color

0x340                           Q1:			; Reserved label for #MOBSHADOW
0x340                           _mobs:      RMB 3*8     ; MOB buffer

0x358                           _col0:      RMB 1       ; Collision status for MOB0
0x359                           _col1:      RMB 1       ; Collision status for MOB1
0x35A                           _col2:      RMB 1       ; Collision status for MOB2
0x35B                           _col3:      RMB 1       ; Collision status for MOB3
0x35C                           _col4:      RMB 1       ; Collision status for MOB4
0x35D                           _col5:      RMB 1       ; Collision status for MOB5
0x35E                           _col6:      RMB 1       ; Collision status for MOB6
0x35F                           _col7:      RMB 1       ; Collision status for MOB7

0x100                           SCRATCH:    ORG $100,$100,"-RWBN"
                                        ;
                                        ; 8-bits variables
                                        ;
0x100                           ISRVEC:     RMB 2       ; Pointer to ISR vector (required by Intellivision ROM)
0x102                           _int:       RMB 1       ; Signals interrupt received
0x103                           _ntsc:      RMB 1       ; Signals NTSC Intellivision
0x104                           _rand:      RMB 1       ; Pseudo-random value
0x105                           _gram_target:   RMB 1   ; Contains GRAM card number
0x106                           _gram_total:    RMB 1   ; Contains total GRAM cards for definition
0x107                           _gram2_target:  RMB 1   ; Contains GRAM card number
0x108                           _gram2_total:   RMB 1   ; Contains total GRAM cards for definition
0x109                           _mode_select:   RMB 1   ; Graphics mode selection
0x10A                           _border_color:  RMB 1   ; Border color
0x10B                           _border_mask:   RMB 1   ; Border mask
                                    IF DEFINED intybasic_keypad
                                _cnt1_p0:   RMB 1       ; Debouncing 1
                                _cnt1_p1:   RMB 1       ; Debouncing 2
                                _cnt1_key:  RMB 1       ; Currently pressed key
                                _cnt2_p0:   RMB 1       ; Debouncing 1
                                _cnt2_p1:   RMB 1       ; Debouncing 2
                                _cnt2_key:  RMB 1       ; Currently pressed key
                                    ENDI
                                    IF DEFINED intybasic_scroll
                                _scroll_x:  RMB 1       ; Scroll X offset
                                _scroll_y:  RMB 1       ; Scroll Y offset
                                _scroll_d:  RMB 1       ; Scroll direction
                                    ENDI
                                    IF DEFINED intybasic_music
                                _music_mode: RMB 1      ; Music mode (0= Not using PSG, 2= Simple, 4= Full, add 1 if using noise channel for drums)
                                _music_frame: RMB 1     ; Music frame (for 50 hz fixed)
                                _music_tc:  RMB 1       ; Time counter
                                _music_t:   RMB 1       ; Time base
                                _music_i1:  RMB 1       ; Instrument 1 
                                _music_s1:  RMB 1       ; Sample pointer 1
                                _music_n1:  RMB 1       ; Note 1
                                _music_i2:  RMB 1       ; Instrument 2
                                _music_s2:  RMB 1       ; Sample pointer 2
                                _music_n2:  RMB 1       ; Note 2
                                _music_i3:  RMB 1       ; Instrument 3
                                _music_s3:  RMB 1       ; Sample pointer 3
                                _music_n3:  RMB 1       ; Note 3
                                _music_s4:  RMB 1       ; Sample pointer 4
                                _music_n4:  RMB 1       ; Note 4 (really it's drum)

                                _music_freq10:	RMB 1   ; Low byte frequency A
                                _music_freq20:	RMB 1   ; Low byte frequency B
                                _music_freq30:	RMB 1   ; Low byte frequency C
                                _music_freq11:	RMB 1   ; High byte frequency A
                                _music_freq21:	RMB 1   ; High byte frequency B
                                _music_freq31:	RMB 1   ; High byte frequency C
                                _music_mix:	RMB 1   ; Mixer
                                _music_noise:	RMB 1   ; Noise
                                _music_vol1:	RMB 1   ; Volume A
                                _music_vol2:	RMB 1   ; Volume B
                                _music_vol3:	RMB 1   ; Volume C
                                    ENDI
                                    IF DEFINED intybasic_music_volume
                                _music_vol:	RMB 1	; Global music volume
                                    ENDI
                                    IF DEFINED intybasic_voice
                                IV.QH:     RMB 1    ; IV_xxx        8-bit           Voice queue head
                                IV.QT:     RMB 1    ; IV_xxx        8-bit           Voice queue tail
                                IV.FLEN:   RMB 1    ; IV_xxx        8-bit           Length of FIFO data
                                    ENDI


0x10C                           V1:	RMB 1	; A
0x10D                           V8:	RMB 1	; BONUS_EXP
0x10E                           V9:	RMB 1	; BONUS_LIVES
0x10F                           V10:	RMB 1	; CHANCE
0x110                           V11:	RMB 1	; DIFICULTY
0x111                           V17:	RMB 1	; HEARTRATE
0x112                           V13:	RMB 1	; HIGHESTDIFFICULTY
0x113                           V7:	RMB 1	; INVISIBLE
0x114                           V15:	RMB 1	; JUMP
0x115                           V19:	RMB 1	; LEVEL
0x116                           V18:	RMB 1	; LIVES
0x117                           V4:	RMB 1	; PLAYERDX
0x118                           V6:	RMB 1	; PLAYERF
0x119                           V2:	RMB 1	; PLAYERX
0x11A                           V5:	RMB 1	; PLAYERY
0x11B                           V22:	RMB 1	; POWER
0x11C                           V14:	RMB 1	; SCENE
0x11D                           V21:	RMB 1	; STREET_LINEY
0x11E                           Q5:	RMB 3	; OBJECT
0x121                           Q3:	RMB 3	; OBJECTX
0x124                           Q4:	RMB 3	; OBJECTY
0x127                           Q7:	RMB 5	; PERCENTAGE
0x12C                           _SCRATCH:	EQU $

0x2F0                           SYSTEM:	ORG $2F0, $2F0, "-RWBN"
0x2F0                           STACK:	RMB 24
0x308                           V12:	RMB 1	; #MAXIMUNSCORE
0x309                           V3:	RMB 1	; #PLAYERCOLOR
0x30A                           V16:	RMB 1	; #SCORE
0x30B                           V20:	RMB 1	; #UNIVCLOCK
0x30C                           Q6:	RMB 4	; #OBJECTCOLOR
0x310                           _SYSTEM:	EQU $
 ERROR SUMMARY - ERRORS DETECTED 0
               -  WARNINGS       0
